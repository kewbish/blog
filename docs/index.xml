<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Yours, Kewbish - a collection of </title>
    <link>https://kewbi.sh/blog/</link>
    <description>Latest Yours, Kewbish posts</description>
    <managingEditor>(Emilie Ma ◦ Kewbish)</managingEditor>
    <lastBuildDate>Sun, 22 Aug 2021 19:50:41 -0700</lastBuildDate>
    
	<atom:link href="https://kewbi.sh/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Summer Research School</title>
      <link>https://kewbi.sh/blog/posts/210822/</link>
      <pubDate>22 Aug 2021</pubDate>
      <author>Emilie Ma ◦ Kewbish</author>
      <description>On determinism and delightful doner.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>I&rsquo;ve mentioned it a couple times in the footnotes and conclusions of previous posts, but I recently wrapped up a wonderful time at the <a href="http://www.math.bas.bg/srs/newsite/srs/">Summer Research School</a>. Hosted by the Bulgarian High School Student Institute for Mathematics and Informatics, the program takes in about forty Bulgarian and international students to pursue an intensive research program over summer break. For three weeks, each student works with their mentor on a topic of inquiry of their choosing, and end up both writing a paper and creating a presentation to defend against mentors' questions. In past years, all students, including international ones, gathered in Bulgaria for the camp, but COVID restrictions meant that only the Bulgarian students were able to do so this year. Even though I participated virtually with a ten-hour time difference (I&rsquo;ve always been an early bird, but I will confess I dropped a couple of the 6AM lectures for the sake of my sanity), I had an amazing time, and I&rsquo;ve gained many valuable experiences: learning to write academically, creating my own research program, and hanging out with other like-minded youth.</p>
<p>I&rsquo;d heard about SRS from a friend a couple years ago (thanks Umang!) over the summer, just when the program was starting up. I thought it sounded enticing, what with the opportunity to be mentored through a proper research article, and getting exposed to an abridged and compressed version of the typical academic. To be honest, I didn&rsquo;t think my limited research experience - restricted to a very scuffed audio-visual random number generator at a district science fair and maybe playing up whatever I did during Google Code-in - was sufficient to be accepted. But when I got the acceptance email, I was super excited: I&rsquo;d been hoping to participate for a while, so it was a pleasant suprise.</p>
<p>SRS was a great opportunity for me, both to explore the fields of theoretical mathematics and computer science, and to meet other students passionate about their interests. I&rsquo;ve made fantastic memories here, and I’m very happy I attended.</p>
<h2 id="probabilistic-primality-testing">Probabilistic Primality Testing</h2>
<p>On my application, I listed cryptography, random number generation, and programming language theory as my main interests - three things that I have very insubstantial experience with. Going into SRS, I had no concrete project ideas, so when the coordinators sent out the list of proposed topics, I was happy to find something that sort of fell into the crypto bucket and seemed to combine CS with maths. That something was a project on primality testing, and all the interesting theory and algorithms behind it. While I had absolutely no idea about the field before (except perhaps a cursory glance at the Sieve of Eratosthenes), I&rsquo;m pretty proud of what I was able to do in my three weeks here.</p>
<p>My project specifically centered around probabilistic primality testing. In layman&rsquo;s terms, they&rsquo;re tests that differentiate prime numbers from non-prime, or composite, ones and that do this differentiating with some element of randomness. These primality tests are essential in modern cryptography, ensuring the security and reversibility of encryption and decryption in most systems. For the number-theory inclined, I analyzed the Fermat, Euler (Solovay-Strassen), and Miller-Rabin tests, specifically. I looked at the accuracy, or the number of composite numbers marked as prime (in essence, wrong results), and the efficiency, or the wall time elapsed to test the given numbers, for each test.</p>
<p>There also exist deterministic primality tests, or tests that verify the primality of a number with none of the randomness, and with 100% accuracy. For example, the Agarwal-Kayal-Saxena (AKS) test is notable for being a deterministic primality test, and one that runs in polynomial-bounded (more efficient than other options) time, at that. However, though deterministic tests are perfectly accurate and return no incorrect results, they&rsquo;re very slow compared to the probabilistic tests. This is why probabilistic primality tests are usually used instead - they&rsquo;re just more practical.</p>
<p>My research also included a proposal for a new variant of AKS, which I called probabilistic AKS. It replaced the computationally expensive and extensive checks needed to verify primality with fewer ones, at the cost of returning some incorrect results (as with all probabilistic tests). This test ran significantly faster than the deterministic algorithm, reducing the bounds from <code>soft-O((log n)^15/2)</code> to <code>soft-O(k(log n)^5)</code>, further dropping to <code>soft-O(k(log n)^4)</code> with the best case scenario.</p>
<p>All this analysis was done through Python (more on the technical implementations later) and a bunch of data conversion scripts that pulled the results out to a CSV file. I then collected all the data into a couple central Excel sheets for graphing. All the pretty figures and results are available in <a href="https://github.com/kewbish/srs/blob/master/Primality.pdf">the actual paper</a> and in the <a href="https://github.com/kewbish/srs/">project repository</a>.</p>
<p>I chose this project as I wanted to work on something related to my existing interests of CS and crypto, but I also wished to explore something new. That something new ended up being a whole bunch of modular arithmetic and the world of number theory - a decent challenge, given that I&rsquo;d never really looked at these concepts systematically before. I was also looking forward to having a mentor with me, which made me feel more confident to step outside my knowledge comfort zone and engage in something that&rsquo;d really let me learn something new.</p>
<h2 id="my-saviour-numba">My Saviour, Numba</h2>
<p>Even with my mentor, Pressiana Marinova, and her consistent support and guidance, there were a couple obstacles throughout this whole experience. One of which, and also the title of this section (you&rsquo;ll see why in a bit), was optimization. I initially had written my primality test implementations in <a href="https://www.sagemath.org/">Sage</a>, a Python-like mathematics system that I&rsquo;d heard of previously. I knew its more advanced capabilities for maths were quite powerful, so I thought I&rsquo;d try that. I also thought it&rsquo;d be faster than raw Python - but I was incredibly wrong. Once I got to writing the Miller-Rabin tests (read, the primality tests with more computations), testing even 10000 integers was becoming frustratingly slow. I tried switching to pure Python, which delivered a slight speed increase, but it was my friends (thanks Pranav and Sayam!) who suggested I take a look at <a href="https://numpy.org/">Numpy</a> and, the saving grave of my entire project, <a href="http://numba.pydata.org/">Numba</a>. These compile Python code down to lower-level languages, which, after a brief but difficult struggle with decorators and external functions, sped up my code from an average runtime of five minutes to five seconds. Pretty significant, and incredibly liberating (especially when I started implementing deterministic AKS - I don&rsquo;t think I could have gotten reasonable data for even a hundred integers without Numba).</p>
<p>Learning the background material itself was also a challenge. I had a vague understanding of some of the modular arithmetic and group theory from my past forays into crypto with <a href="https://cryptohack.org/">Cryptohack</a>. However, trying to wrap my head around all this new notation in the context of primality testing and the papers I had to read was a challenge. The first couple days of SRS were spent speedrunning modular arithmetic on Khan Academy and binge-watching Fermat&rsquo;s Little Theorem proofs off YouTube. Still, trying to comprehend all the theory was pretty difficult, especially since primality testing is a complex topic with a decent amount of prerequisite knowledge, so there wasn&rsquo;t a lot of easily accessible explanations of proofs or the tests. Then again, the project was an amazing crash course in number theory and modular arithmetic, and I&rsquo;d like to extend endless thanks to my amazing mentor and the resources she provided - without them, I couldn&rsquo;t have cracked even the first couple days' worth of material.</p>
<p>The last major struggle I had was dealing with the program deadlines. I kept up a pretty reasonable working pace throughout the entire camp, but I still ended up speedrunning the paper and presentation last minute. I wrote a good chunk (pretty much the entire analysis of results and discussion) on the day before the deadline day. To my credit, it was still a decent amount of time in advance, since I was behind Bulgarian time by ten hours. I also started the presentation completely from scratch (and with absolutely no knowledge of <a href="https://www.overleaf.com/learn/latex/Beamer">Beamer</a>) the day before I was scheduled to present my paper - not something I&rsquo;m most proud of. I ended up not having a ton of prep time, but I managed to muddle my way through satisfactorily. I remember planning to have finished my paper by the beginning of the last week, and having an entire week to prep my presentation, but that was certainly not the case. I don&rsquo;t even think it was due to time management - the program just crams a lot of material into a short period of time.</p>
<h2 id="the-cult-of-doner">The Cult of Doner</h2>
<p>But it wasn&rsquo;t all work - there was an appropriate amount of fun and games as well, even if I was an entire 9271km away from the Bulgarian students. There were a couple social nights and weekend activities over the course of the program, especially in the first week. Our online quiz night and extraordinarily cursed Cards Against Humanity game stand out as my favourite memories. I also enjoyed receiving a very thorough Bulgarian education on everything from Bulgarian music, food, innovations, and culture in our SRS Discord, which I <del>un</del>fortunately started.</p>
<p>Speaking of starting the Discord, I&rsquo;m quite glad we had that community as well, since I would have never been graced with the Bulgarian sensation of doner (or duner, apparently). I don&rsquo;t think it even originated in Bulgaria (at least, the places I found in Vancouver were either advertising &lsquo;Berlin-style&rsquo; or &lsquo;authentic Middle-Eastern&rsquo;, so take that as you will), but regardless: doner is a pita-style wrap-sandwich-burrito-esque concoction. And it&rsquo;s apparently really popular among the Bulgarian students of SRS: the literal second day the server had been running, I woke up to a deluge of doner pictures and discussion. Over the course of the week, I&rsquo;d come to learn what doner was, as well as agree to trying it. I eventually stopped by <a href="https://www.google.com/maps/dir//robson+street+doner/data=!4m6!4m5!1m1!4e2!1m2!1m1!1s0x548671883df1ec17:0xa031e83d87de69cf?sa=X&amp;ved=2ahUKEwjNmMvyjsbyAhVSJzQIHVoTC34Q9RcwAHoECAsQBA">this little</a> place in Vancouver to try it, thereby fulfilling my SRS doner bet duties.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Overall, I really, really liked SRS. As my first research experience, I gained valuable skills and insights regarding the whole academic procedure, things I&rsquo;m sure to apply in my future studies. However, I wish the program were longer, since it felt a bit like I was cramming an entire thesis process into three weeks. I didn&rsquo;t find that as enough time for the theory to really sink in, as well as not enough time to finish up my analysis to my standards. I also wish I&rsquo;d have been able to see what SRS was like in person - the photos and updates the Bulgarian students were posting were very enticing. Unfortunately, COVID was a major obstacle (and apparently they had a slightly scuffed location), but it would have been nice to get to know fellow participants more. As well, I would have been able to have closer feedback loops with my mentor - but that&rsquo;s besides the point. All in all, it was still an amazing experience, and has left me with incredible memories.</p>
<p>I&rsquo;d like to thank my mentor for her hard work and support throughout this entire rollercoaster ride of a program. Her clear explanations and daily checkins helped me get through even the worst obstacles. As well, much gratitude to the HSSIMI and SRS coordination team - I really appreciate all the work the team&rsquo;s put in to make the experience enriching and fulfilling, even for international students half a world away.</p>
<p>In the future, I plan to continue tinkering with my analysis, and finish editing my paper for potential publishing - I&rsquo;ve been looking at a couple youth journals in Canada. I&rsquo;d like to adjust my testing bounds, as well as iron out a couple inconsistencies in the amount of data collected due to time constraints during SRS. I also plan on diving deeper into the theory and underlying system of the AKS test to see if I can improve the probabilistic version more. I&rsquo;m decently proud of what I&rsquo;ve managed to produce given three weeks' time, but I can&rsquo;t help but focus on the tiny things I&rsquo;d like to fix. SRS has inspired me to put more time into considering research opportunities like this, but we&rsquo;ll see how that all pans out as school starts.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>A Plaintext Zettelkasten</title>
      <link>https://kewbi.sh/blog/posts/210815/</link>
      <pubDate>15 Aug 2021</pubDate>
      <author>Emilie Ma ◦ Kewbish</author>
      <description>On speaking at Augment Minds 2021 and my notetaking system.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>With my notetaking workflow, I enjoy working on the meta-flow, building tools, integrations, and new features for myself, just as much as I enjoy actually writing and filling out the content there. I&rsquo;ve recently been fiddling a bit more with my system, integrating additional principles of the wildly popular Zettelkasten system, and having tonnes of fun messing around with command-line tools and Vimscript. In fact, a couple weeks ago, I sat down and worked through my existing notetaking system wishlist: searching within files, jumping to files from outside of Vim, finally integrating tags and intra-note navigation, and more. I&rsquo;ve wanted to implement these for a while now, so finally getting them integrated with my Vim setup was a very satisfying weekend accomplishment.</p>
<p>As I finished up my setup, I also learned about <a href="https://kewbi.sh/blog/posts/210801/">Augmented Minds 2021</a>, a short unconference that took place a couple weeks ago. Prominent speakers in the HCI space (well, in layman&rsquo;s terms, cool people on Twitter) and a morning of discussion about tools for thought? That sounded like a dream come true - so I spontaneously registered for a ticket. While scanning the OpenCollective page, I noted that they were taking proposals for shorter talks throughout the conference: in fact, the entire unconference was built around these smaller breakout sessions. It seemed like a casual, fun way to share on a topic I&rsquo;m passionate about, and giving lightning talks at other conferences was something I was considering in the future anyways. Long story short, I impulsively signed up to deliver a talk on my Zettelkasten-in-progress, the first topic I could think of off the top of my head. So, among much more qualified speakers and more engaging presentation topics:</p>
<blockquote>
<p><em>Vim + FZF + RipGrep = A Plaintext Zettelkasten*</em><br>
A demo of my notetaking system, built around Vim, FZF (and FZF.vim), and rg, followed by an open discussion on building your own Zettelkasten systems.</p>
</blockquote>
<p>popped up in the schedule of events. I was decently nervous, but the opportunity to give a talk, and especially one in such a welcoming, open space, was something I was definitely excited and grateful for.</p>
<p>This post is a standalone discussion (and a bit about the experience of actually delivering the talk) on my current pseudo-Zettelkasten system adapted directly from my talk, but is the second part of my series on <a href="https://opencollective.com/psionica/events/augment-minds-7d13842a">Augment Minds 2021</a> that I started with <a href="https://kewbi.sh/blog/posts/210801/">this post</a>. If you&rsquo;re here to nerd out with me about personal knowledge management, this&rsquo;ll likely be the more attractive post, but feel free to check that one out as well - I go a bit more in depth on some of the amazing talks from the unconference.</p>
<h2 id="heres-a-video">Here&rsquo;s a Video</h2>
<p><em>&hellip; well, soon, anyways. I&rsquo;ll update this section with the talk recording as soon as it comes out.</em></p>
<h2 id="my-notetaking-system">My Notetaking System</h2>
<p>My Zettelkasten (or, really, pseudo-Zettelkasten) is entirely local and entirely Markdown, and my workflow with it involves a combination of <a href="https://github.com/vim/vim">Vim</a>, <a href="https://github.com/junegunn/fzf">FZF</a>, and <a href="https://github.com/BurntSushi/ripgrep">rg</a>. If you&rsquo;re not familiar with the concept of Zettelkasten, most people&rsquo;ll point you to <a href="https://zettelkasten.de">Zettelkasten.de</a>, and maybe <a href="https://reddit.com/r/Zettelkasten">r/Zettelkasten</a>. Look through a couple posts, and you&rsquo;ll be sure to get the gist of Niklas Luhmann, the creator of the system, and what he proposed, the central concept of atomic notes, and all the hyped-up software that people tend to use with it. My Zettelkasten&rsquo;s not much of a &lsquo;proper&rsquo; Zettelkasten besides in that it borrows some of the concepts of stages of notes, and some of the concepts of interlinking, but I think it&rsquo;s still interesting in terms of possible ways that it can be modified and expanded, even if you&rsquo;re striving for a by-the-books Zettelkasten approach.</p>
<p>First, let&rsquo;s look at the file structure of my system. Zettelkasten purists generally advocate a flat-file approach, with the usual argument being that your links should serve to connect and group files, instead of imposing a decision. As well, what if something belongs in two categories? Extra mental overhead, and even if you manage to subcategorize, you&rsquo;re increasing the sprawl and unmaintainability of your notes - or so people tend to say. Even with all these apparent cons, in my system, I work with a bunch of folders instead. I opted for this approach mainly because I take notes over several rather disparate categories, and because it makes things easier to navigate visually in a file manager. With just my first term at university, I&rsquo;ll be taking six classes, all in different topics. I have quite a bit of range with the notes, and to my brain, it makes more sense to group them in a folder. As well, with my linking system, which I&rsquo;ll touch on in a bit, I can still achieve the same knowledge-connecting ability.</p>
<p>Something else that&rsquo;s a plus with having an entirely plaintext productivity system is that everything can be backed up through Git or another system. I keep a repository on GitHub, and just run a sync script through cron to commit the changes in the root of my notebook.</p>
<h2 id="source-fleeting--literature-notes">Source (Fleeting / Literature) Notes</h2>
<p>What the Zettelkasten system calls fleeting, or literature, notes, I group into one big category of source notes. These are generally going to be the notes that I take from something I need to study, be it a paper, a video course on Khan Academy, or a textbook. I tend to jot quick thoughts down as I&rsquo;m going through the source material, and then return to take more detailed notes in my own words either with a second pass, or pausing between sections. Notes here are almost always linear, or linear-like, where I just go through the material again in the order it was presented in the source. I find that I don&rsquo;t really have time when I&rsquo;m taking notes in class to go through and network and piece things together. I&rsquo;m also a strong believer in the whole &lsquo;have something ready at each stage&rsquo; methodology - I don&rsquo;t want to neglect material just to add a couple linking notes. The format of these notes are also very non-atomic at this stage, since I&rsquo;m generally trying to collect all the information in one place with a bit more context.</p>
<h2 id="evergreen-notes">Evergreen Notes</h2>
<p>In terms of evergreen notes, I don&rsquo;t have many of them either - I&rsquo;ve just gotten the linking working not that long ago, and I haven&rsquo;t really been &lsquo;tending&rsquo; this digital garden for too long. However, I think my idea of these evergreen notes is more in line with the main Zettelkasten workflow. They&rsquo;re drawn either from source notes, though that&rsquo;s a bit rarer since I don&rsquo;t really see myself having marvellous interdisciplinary connections between, say, cold fronts and public-key cryptography (yes, those are real examples - you can thank ATSC113 and my vague interest in crypto). Otherwise, they&rsquo;re just collections of my own thoughts, which is usually more often where the evergreen notes stem from. Anything and everything goes here, from my thoughts on random posts I see on Twitter, to some of my life goals, as long as they have sufficient linkage surface area and context.</p>
<p>Here&rsquo;s an example: I played with Web Monetization not too long ago, and I found a bunch of posts and talk describing why it was super great and the next big thing, which I do appreciate and support, but I came up with a couple thoughts about why it&rsquo;s not quite working yet, and then I just wrote about it. Eventually, evergreen notes sometimes get promoted to their own blog post, like this web monetization one, and sometimes I translate blog posts into evergreen notes as well for older content, but let&rsquo;s finally get into the components that make my Zettelkasten more unique.</p>
<h2 id="my-tools-of-choice">My Tools of Choice</h2>
<p>My notetaking toolkit currently includes:</p>
<ul>
<li>Vim =&gt; I&rsquo;d been trying Vim out ever since I was on Windows, because I kept hearing my friends rave about how efficient, customizable, and smooth everything was, so I wanted to see what all the fuss was about. Long story short, I took to the idea of modal editing, and stuck to using it as my main code editor ever since. It makes sense that I want my notes to be as easily editable as possible, so I went with what I was familiar with.
<ul>
<li>This also brings up the nice bonus that I can interact with code right beside my notes, and add to my notes when I&rsquo;m thinking of something even when coding.</li>
</ul>
</li>
<li>FZF =&gt; FZF is a fuzzy-finder tool, where you can pass in a bunch of sources, and it&rsquo;ll search through all of them for you. It&rsquo;s useful outside of vim for searching through files and processes, but I mostly use it in conjunction with FZF.vim, a Vim plugin that wraps a bunch of commands and everything into a very nice interface.</li>
<li>RG =&gt; Ripgrep is a search tool, written in Rust, and it&rsquo;s extremely quick when searching through regexes and files. Honestly, I could have just gone with normal find, but as ripgrep integrates so well with FZF and FZF.vim, I thought I may as well integrate it.</li>
<li>CTags =&gt; CTags, or more specifically, Universal CTags, is a tagging utility that was built to be used to index code files and implement &lsquo;jump to definition&rsquo; features and the like. In my system, I abuse its ability to define custom languages and its existing mappings within Vim to make my notes linkable and navigatable.</li>
</ul>
<h2 id="search">Search</h2>
<p>Everything so far has been pretty vanilla - just modified Zettelkasten workflows. Well, here begins the spicy parts: I&rsquo;m first going to touch on notebook search, and how I&rsquo;ve integrated ripgrep and FZF.vim with shortcuts and aliases for editing, and then linking things together in a bit. I think search and linking are two of the big features why people generally turn to things like Notion, Obsidian, or Roam instead for their personal knowledge base, since it comes with those things built in, and you don&rsquo;t have to spend hours toying with Vim configs - but that&rsquo;s what makes me happy.</p>
<p>There are a couple different things I search in my workflow: files to open, files containing specific notes, or searching through my links. The first one, files to open, is done through Bash instead of within Vim. I alias <code>evb</code> to<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>:</p>
<pre><code>cd /home/kewbish/EVB/;vim -o &quot;$(rg --files $evb | fzf)&quot;; ctags -R .
</code></pre><p>Ignore the <code>ctags</code>, but for now, but what this does is change directory into my notebook, look for all files, and open the FZF fuzzy searching window. I usually know what file I&rsquo;m going to work on when I&rsquo;m going to take notes - like, for example, my course notes or lecture notes, so I can just open them with this.</p>
<p>The second mini workflow is integrated within Vim, and is a remap of a FZF command. I use</p>
<pre><code>command! -bang -nargs=* Sevb 
  \ call fzf#vim#grep(&quot;rg --column --line-number --no-heading --color=always --smart-case &quot;.shellescape(&lt;q-args&gt;), 1, {'dir': '/home/kewbish/EVB/'}, &lt;bang&gt;0)
</code></pre><p>this big blob of Vimscript to run ripgrep in my notebook folder. It looks a lot more complicated than it is, but I need to use the custom FZF.vim call because I need to a) search within file contents, as well as b) search all files within my notebook. I&rsquo;ve remapped this to <code>nnoremap &lt;leader&gt;se :Sevb&lt;CR&gt;</code>, so a quick <code>\se</code> gets me what I&rsquo;m looking for.</p>
<h2 id="linking">Linking</h2>
<p>The third searching command involves tags, which was what the earlier <code>ctags -R .</code> was for in my bash alias. Inspired by <a href="https://www.edwinwenink.xyz/posts/48-vim_fast_creating_and_linking_notes/">Edwin Wenink&rsquo;s plaintext Zettelkasten</a>, I use these tags instead to link between notes. I denote a link with <code>(#: link contents here)</code>, mostly because I&rsquo;d never type <code>(#:)</code> in normal notetaking. It&rsquo;s a bit clunky, but it also stands out visually, so I&rsquo;ve stuck with it. I&rsquo;ve defined this as a custom tag pattern in my <code>~/.ctags.d/</code> folder</p>
<pre><code>--langdef=markdowntags
--languages=markdowntags
--langmap=markdowntags:.md
--kinddef-markdowntags=l,link,links
--mline-regex-markdowntags=/(^|[[:space:]])\(\#: ([^\)]*)/\2/l/{mgroup=1}
</code></pre><p>Every time I open my notebook with <code>evb</code>, the tags are generated, and I can then use the FZF.vim <code>:Tags</code> mapping, which I have as \st, to search through my links. While on a link, I can also use this mapping:</p>
<pre><code>nnoremap &lt;leader&gt;ln va)y:exe &quot;:Sevb &quot; . substitute(substitute(getreg('&quot;'), &quot;\(#:&quot;, &quot;&quot;, &quot;/g&quot;), &quot;\)&quot;, &quot;&quot;, &quot;/g&quot;)&lt;CR&gt;
</code></pre><p>to search through my tags, and insert it somewhere. The first block here yanks my link to a register so I can paste it, then searches my notebook for similar topics as the content of the link. I can always change what I search for, and then quickly jump to the file position and paste the link. I can also use Vim&rsquo;s inbuilt :ts and g] commands to search through my links and jump to them, but I use that a bit less frequently. I think this linking system&rsquo;s pretty unique, and one of the biggest features that admittedly, most other software implements out of the box, but that I finally have, in my little plaintext notebook.</p>
<h2 id="the-experience">The Experience</h2>
<p>Admittedly, the decision to give the above talk was completely spontaneous, so I can&rsquo;t go on about some impressive intrinsic motivation. Yes, I wanted to talk, but I&rsquo;d like to think that it was more about sharing what my Zettelkasten was like. I also wanted to push myself out of my lurker-by-default existence at bigger events, and force myself to do something slightly outside my comfort zone. People talk about stretching yourself - giving this lightning talk, I think, is a great example of that. I&rsquo;m not afraid of public speaking per se, but it&rsquo;s one of those things I&rsquo;ll have to mentally steel myself for. Being able to share on something I&rsquo;ve been very into lately meant that I essentially could talk forever without a script anyways, so I didn&rsquo;t have to worry about not knowing what to say. Preparing for the talk wasn&rsquo;t an arduous process: mostly just piecing together past thoughts I&rsquo;d jotted down or thinking through the best order to present my notebook subsections. As well, with the small number of attendees for Augment Minds in general, there&rsquo;d be a minimal audience to, in the worst-case scenario, mess up in front of. Doing one slightly scary thing, but combining it with a bunch of mostly-familiar topics, is a recipe that I&rsquo;ll continue to apply in other places - it brings you more positive experiences than if I&rsquo;d, say, done a talk on a foreign topic with an audience of tonnes of people.</p>
<p>Not many people showed up to the talk, which I&rsquo;ll be positive about and call a good thing. With just a few people in the room, the little discussion session we had at the end was a lot more close-knit and meaningful. Getting to talk to other people at the end was honestly the best part of the entire Augment Minds 2021 experience - I really enjoyed getting to have these small group chitchats, and talk about alternative Zettelkasten systems, so thanks to everyone who engaged in that! Here&rsquo;s a brief, slightly abridged, list of the followup points that I took away:</p>
<ul>
<li>I&rsquo;d like to check out <a href="https://github.com/wookayin/fzf-ripgrep.vim">fzf-ripgrep.vim</a>
<ul>
<li>It appears to have more builtin rg bindings, and I wonder if I can pass the directory to search more easily (to avoid the mess of Vimscript everything currently is)</li>
</ul>
</li>
<li>Someone asked if I&rsquo;ve considered NLP, and how can I make fancy AI tools work for my thought
<ul>
<li>One of the projects by the hosting organization, <a href="https://psionica.org/tools/autocards/">Autocards by Psionica</a>, looks really interesting, especially since I&rsquo;ve been looking into flashcard and spaced-repetition models recently</li>
<li>Integrating notes directly into my calendar, or being able to pull between sources, would be interesting to consider</li>
<li>Tools like <a href="https://elicit.org/">Elicit</a> for coming up with a general scheme of things and terms to dive into - sort of like mapping a field - are also very appealing</li>
<li>A &lsquo;fancy AI&rsquo; idea: can I get some NLP tool (i.e. GPT{2, 3}) to distill information while I&rsquo;m researching? Coming up with plain layman&rsquo;s explanations of common things to look into would help me know what to look into first, and help me build a personal curriculum</li>
</ul>
</li>
<li>Another person asked if I use other old-school Linux utilities (the examples given for &lsquo;old-school Linux&rsquo; were sed and awk, so do with that what you will) and if they were powerful enough for me
<ul>
<li>I find my current toolkit powerful enough for me (right now), and I don&rsquo;t plan to switch anytime soon</li>
<li>Why have I stuck to such a minimal set? It&rsquo;s definitely enough for my use case, but there&rsquo;s also a config barrier that prevents a lot of people from taking this route, which is 100% valid logic</li>
</ul>
</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>Part of the reason why I like having my notetaking system in Vim, and stitched together with all these open source tools is because I feel that Vim&rsquo;s kind of become my Notion, or become my Roam. Or not specifically Vim, after all, but mainly the terminal. It feels like a kind of plaintext home to me, since I spend a lot of time programming and hacking away in the terminal anyways. There&rsquo;s something about being able to create a workflow that I fully understand, and that fits me perfectly, rather than have to try to slot myself into something that an external tool recommends. And I know, it&rsquo;s probably a lot easier and a massive waste of time in a lot of people&rsquo;s opinions for very small optimizations, but hey, it&rsquo;s my notetaking system, so I don&rsquo;t really have to explain myself, do I? Open source and plain text as general philosophies are some of the lesser points of my system, but I think they still matter. A lot of general purpose notetaking ecosystems like Roam cover a lot of the same features, but being able to have full control over something so integral to my learning and life is pretty important to me.</p>
<p>Since I gave the talk, I&rsquo;ve been able to experiment with, and really put, my system to test - I&rsquo;ve been working on a <a href="https://github.com/kewbish/srs">research project</a> on probablistic primality testing with the <a href="http://www.math.bas.bg/srs/newsite/srs/">Summer Research School</a> (which was an amazing experience and program, by the way - more on it in an upcoming post). It&rsquo;s a pretty number-theory-heavy field, and the first couple weeks of the program especially involved a lot of reading through the basics of modular math, theorem proofs, and processing jargon-filled papers. I&rsquo;ve been taking quite a number of notes, and I&rsquo;ve seen that having these improved searching and linking capabilities has significantly improved my workflow. I&rsquo;m happy that I took the time to finally get the features I&rsquo;d been longing for for ages finally into my system, but I think I won&rsquo;t be touching new Zettelkasten ideas for a while. I try not to mess with my system too often, or else I tend to get more tweaking done than actual work - I also try to limit myself to a couple indulgences of Vimscripting and diving into other people&rsquo;s systems a year. I&rsquo;ll see if I need any major changes to happen in my system once September rolls around and school starts, but we&rsquo;ll see - customizing my workflows is something I enjoy doing anyways.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>By the way, all my Vim commands can be found in my <a href="https://github.com/kewbish/dotfiles/blob/master/.vimrc"><code>.vimrc</code></a> - take a look there for my reference implementations if you want to replicate anything.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>Augment Minds 2021</title>
      <link>https://kewbi.sh/blog/posts/210801/</link>
      <pubDate>01 Aug 2021</pubDate>
      <author>Emilie Ma ◦ Kewbish</author>
      <description>On my first unconference and tools for thought.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Last weekend, absentmindedly scrolling through r/Zettelkasten, I stumbled upon a post for <a href="https://opencollective.com/psionica/events/augment-minds-7d13842a">Augment Minds 2021</a>, an unconference dedicated to discussing the development and design of tools for thought. Taking a quick look through the listed speakers - names like Maggie Appleton, Adam Wiggins, and Linus Lee, along with Slim Lim, Regina Ponciano, and Jungwon Byun (also known as a significant subset of the people I like to keep up with on Twitter) - I decided to attend. It was a spontaneous decision, but one that I&rsquo;m happy with - that Sunday was absolutely amazing<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>Augment Minds was an unconference that focused directly on these facets of tools for thought, which was something that I hadn&rsquo;t heard of or personally participated in before. Running for a few hours early Sunday morning, it was organized by <a href="https://psionica.org/">Psionica</a>, an indie collective striving to innovate on tools for extending and facilitating thought. Psionica has some incredible projects around the ideas of accelerating and expanding thinking with NLP and other technologies, so go check those out. There were a couple scheduled lightning speakers - all of whom are pretty prominent and well-known in the tools-for-thought space. As well, a bunch of other tools-for-thought enthusiasts, creators, and developers led breakout rooms later in the event, which was facilitated via a virtual <a href="http://gather.town/">gather.town</a> room. It was equal parts chatty, casual, and insightful, with a couple heaping servings of inspiration and wonder added with some demos and talks. This style of &ldquo;unconference&rdquo;, or less formal gathering, suited itself well to the vibe of Augment Minds, and I&rsquo;m very happy to have attended.</p>
<p>If you couldn&rsquo;t tell by the <a href="https://kewbi.sh/blog/posts/201206/">myriad</a> <a href="https://kewbi.sh/blog/posts/201220/">of</a> <a href="https://kewbi.sh/blog/posts/210425/">related</a> <a href="https://kewbi.sh/blog/posts/210516/">blog</a> <a href="https://kewbi.sh/blog/posts/210124/">posts</a>, tools for thinking, especially through the lens of CS and human-computer interactions, is something I&rsquo;m pretty passionate about. Maybe it&rsquo;s just the part of me that wants to relentlessly optimize my workflows, without, well, putting any actual work through them, but tweaking and exploring the online ecosystems for transformative tech like this has been something I&rsquo;ve started to enjoy more and more over the past couple months. One of the reasons I wanted to attend Augment Minds was, yes, to say hi personally to people I&rsquo;ve been following online for a while, but mainly to gain new perspectives and see what these influential people were thinking and working on. Tools for thought is a decently small and new field, so maybe it&rsquo;s easier to become known, but it also feels like a close indie community, which is something I really appreciate. Getting to talk to other people who were similarly oddly interested in notetaking or mediums for thought was an enjoyable experience, and I&rsquo;m glad that the cute audio-spatial format of Gather Town worked well here.</p>
<p>The other, smaller, reason I wanted to attend was to deliver a short talk of my own. I&rsquo;ll talk more about this in another post, perhaps, but I thought the combination of a low-pressure, chill environment and a topic that I&rsquo;m deeply into was too good to pass up. I&rsquo;d also just started working on polishing and connecting my fresh new iteration of my <a href="https://kewbi.sh/blog/posts/200607/">Zettelkasten</a> system, which was something I was already planning to share as a blog post. Writing a talk and a blog post are two entirely separate endeavours, but I managed to turn the rough outline for a post I had into a decently serviceable talk on how I use Vim, RipGrep, FZF, and Universal Ctags to maintain my plaintext notebook. It was a fun experience, and I got to discuss a bit with the participants about their thoughts on a terminal-only system like the one I have.</p>
<p>I&rsquo;m glad I had the chance to attend such a striking conference - this post will detail more of my thoughts about it, while my next post will be a recap of my talk as well as a bit on that experience as a whole.</p>
<h2 id="lightning-talks">Lightning Talks</h2>
<p>The only pre-scheduled part of the event was the lightning talks, which ran for maybe seven minutes each and were all grouped together at the beginning of the conference. Each talk was quite unique in subject material, and each definitely has key takeaways that I found novel.</p>
<p>In order of presentation:</p>
<ul>
<li><a href="https://maggieappleton.com/">Maggie Appleton</a> - on tools for thought from a cultural perspective
<ul>
<li>As an anthropologist, she explored some of the more traditional mediums for thought (pencil and paper, counting, etc) as cultural icons. I&rsquo;d never really considered the analog side of tools for thought, let alone the historical and societal implications, so this was an interesting discussion.</li>
</ul>
</li>
<li><a href="http://slim.computer/">Slim Lim</a> - on programming languages as tools for thought
<ul>
<li>I agree with what she points out with the different paradigms and &lsquo;mindsets&rsquo; that programming languages encourage, and how their workflows change how someone as a programmer thinks. I&rsquo;ve felt similarly when learning Racket, coming from Python, and how they&rsquo;re often neglected in explaining how to mentally migrate between languages.</li>
</ul>
</li>
<li><a href="https://martinezponciano.es/">Regina Ponciano</a> - on the limitations of a Zettelkasten
<ul>
<li>Considering the origins and personalities behind the rise of the Zettelkasten system was an interesting perspective, especially with connecting race and gender to Zettelkasten usage. I hadn&rsquo;t thought about the lack of citations and context in common systems, certainly inspiring.</li>
</ul>
</li>
<li><a href="https://adamwiggins.com/">Adam Wiggins</a> - on researchers in the HCI space
<ul>
<li>It was really fun to see the graphs and breakdowns of people in this tools for thought space, and trying to look through handles to see if I could recognize anyone. The analysis really does show that tools for thought is a very diverse (at least, job- and career-wise) field, and it&rsquo;s cool to see how many different walks of life people come from.</li>
</ul>
</li>
<li><a href="https://twitter.com/jungofthewon">Jungwon Byun</a> - on <a href="https://elicit.org">Elicit.org</a>, a GPT-3 backed thought engine
<ul>
<li>This was one of the demos that stood out to me most, since Elicit&rsquo;s obviously very feature rich and I can see some applications where it&rsquo;d make a nice addition to my workflow. For example, I found the exploration-of-a-field search tool really intriguing - it&rsquo;s something I&rsquo;ve been looking for myself when trying to dive into new areas of study. Right now, there&rsquo;s <a href="https://learn-anything.xyz">learnanything</a>, but this only has user-submitted and user-curated paths. It&rsquo;s a great application of NLP and GPT-3, and I hope to see more of these &lsquo;brain assistant&rsquo; type things around in the future.</li>
</ul>
</li>
<li><a href="https://thesephist.com">Linus Lee</a> - crashed out, will fill in later</li>
</ul>
<p>I stopped by some other talks, such as Flancian&rsquo;s <a href="https://www.youtube.com/watch?v=zPPdFvMJDgQ">demonstration</a> of <a href="https://anagora.org">Agora</a>, which I thought was really innovative - both technically or structurally with the pulling, pushing, and stoa features, and socially, with the collective knowledge base system. I&rsquo;ve spent a bit of time clicking around, and it seems full-featured and very well designed. I also popped into <a href="https://www.youtube.com/watch?v=xP93UiFQU7k">Adam Wiggin&rsquo;s discussion on a research mindset</a> - I found centering the discussion on mindset and attitude interesting, since most of the time &lsquo;research&rsquo; gets put more into the materialistic or accomplishment-heavy point of view. With Paul Bricman&rsquo;s talk on what&rsquo;s beyond knowledge graphs, I found a lot of similarities to Linus&rsquo;s recent posts about <a href="https://thesephist.com/posts/inc/">append-only notetaking</a>, which is a philosophy I agree with. I haven&rsquo;t really found the use-case to implement completely append-only notes (I can view enough history over time with Git), but Paul&rsquo;s points about timestamps, addressing, and linking are all parts of my notetaking system that I still want to explore and improve on. I haven&rsquo;t had the opportunity to go through any recordings (if available) at the moment, but I&rsquo;m sure the other talks were just as insightful as the ones I attended in Gather.</p>
<p><em>Note: I&rsquo;ll update this section with links to the recordings as soon as they&rsquo;re made available, and fill in or add to my thoughts on a couple of the lightning talks that I missed, so check back in a bit. In the meantime, <a href="https://www.youtube.com/watch?v=zPPdFvMJDgQ&amp;list=PLNl3dTYSs4b7hWt1AT7O5p_MuU3tFtWjb">here&rsquo;s a link</a> to the currently uploaded recordings. If something&rsquo;s updated recently and I haven&rsquo;t added a link yet, let me know.</em></p>
<h2 id="vibes-and-energy">Vibes and Energy</h2>
<p>Another thing I really liked about the conference was the buzz, almost, that filled the main rooms. In a way, it was technically audio buzz - Gather has a spatial audio feature that lets you listen in on muffled nearby conversations - but it was also a very bright atmosphere. It was exciting to see all the innovative and explorative ways people were thinking about how to express their own thinking. With software demos like the Agora I mentioned above, and people sharing their own digital gardens, I got to investigate several new ways of managing thought. Talking with others about creating our own Zettelkasten systems and notetaking workflows was an eye-opening experience, and even though I generally tend away from socializing, I found it pretty fun to meet all these new people. There&rsquo;s a certain aesthetic, I guess, that comes form having so many like-minded people interested in a topic all crammed into a space chatting. The choice of Gather as a meeting platform really helped to amplify this casual, collaborative environment, and I think more conferences and meetings should consider similar platforms for their own events.</p>
<h2 id="conclusion">Conclusion</h2>
<p>If I had to pick a favourite part of the entire event, I&rsquo;d probably say getting to meet all these people in a very chill, casual space. It was a great opportunity to finally say hi and speak to people in the space that I&rsquo;d been quietly following along with for a while, and collecting handfuls of new handles to follow was also fun. On the other hand, a small thing I&rsquo;d maybe give as feedback to the organizers would be to structure, or at least label, the downtime between scheduling and organizing people into rooms and the actual meetings. Between events, there was some awkward quiet small talk and mingling, but that transition period could have been more clearly defined. But that&rsquo;s a small thing - the event was well-organized and streamlined, and I&rsquo;d definitely recommend it to friends.</p>
<p>In terms of takeaways and inspirations, I saw the entire unconference as a clear sign that personal knowledge management and interfaces for thought are growing and thriving fields. I saw a very widespread list of topics in the breakout schedule, and there&rsquo;s an aspect of the space for everyone to explore. I&rsquo;d like to look more into the open source ecosystems and networks or collectives of people around tools for thought - I saw the Flancia Collective mentioned, as well as <a href="https://www.inkandswitch.com/">Ink and Switch</a>, and of course, the organizing Psionica group. In the future, I&rsquo;d like to also give more lightning talks and attend more conferences in general. Speaking really isn&rsquo;t all that scary, and I genuinely like the process of coming up with a presentation and sharing knowledge with others (even if it&rsquo;s spedran the day before the conference, but oh well). As well, I was very pleasantly surprised with how many new ideas were sparked from this unconference, so I&rsquo;d like to go attend more in the future - I have my eye on a couple further in the future.</p>
<p>I&rsquo;m just waiting for recordings to come out before I write up a text version of my talk, and share the video of my actual session. Near the end of my presentation, I was talking with someone about my tools and why I chose them, and I got a great RG x FZF plugin recommendation, which is something I&rsquo;d like to look into before I finalize the post. As well, I realized after the fact that several of the commands I shared in my presentation could be cleaned up quite a bit, so I&rsquo;ll be taking the time to do that. Some ways I&rsquo;m implementing notebook functionality aren&rsquo;t actually best practices, but oh well - you live and you learn. I&rsquo;m excited to finally show off my system in a post - working on it has been a goal of mine for a while now, and I&rsquo;m happy I finally got to it. If you&rsquo;re also into nerding out about knowledge management, check back in a week or two - hopefully, I&rsquo;ll have posted that article by then.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Sunday was also the kickoff event for the <a href="http://www.math.bas.bg/srs/newsite/srs/">Summer Research School</a> in Bulgaria, though I&rsquo;m participating virtually, 10 hours away. It&rsquo;s been a super fun program so far with plenty of challenging maths and CS to wrap my head around. The mentors, counsellors, and other students have been absolutely iconic so far, and I&rsquo;m looking forward to getting to know them and my research topic better.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>Software as Containers</title>
      <link>https://kewbi.sh/blog/posts/210725/</link>
      <pubDate>26 Jul 2021</pubDate>
      <author>Emilie Ma ◦ Kewbish</author>
      <description>On browsers, terminals, and the boxing principle.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>When I was little, I had a thing for lists. Yes, lists - of next year&rsquo;s required school supplies, of things to bring to summer school, and of groceries that I&rsquo;d try to optimize a path through the store for whenever I&rsquo;d tag along shopping. Regardless of the list&rsquo;s contents, something about its bullet points and orderly collections of information was captivating, and without realizing it, I&rsquo;d end up structuring my own systems around lists for a while to come<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. Even now, most of my notetaking and organization still <a href="https://kewbi.sh/blog/posts/210516/">revolves around list-like methods</a>, though I&rsquo;ve since drifted from my original requirement for intensely managed structure.</p>
<p>Lists were a way I could distill knowledge down to its core essence, and have it all in one place. Forms of structure and organization like this have become things I value - they drop information I&rsquo;m interested in into a central location, where I can process them and have an overall picture of everything. Lists serve as containers for information, and easily ordered, edited, and accessed ones at that.</p>
<p>In a way, everything I&rsquo;ve discussed about lists also relates to certain other organized structures, albeit digital ones. I&rsquo;ve noticed that I tend towards two specific realms of cyberspace: the Internet, through web development and browsers, and the command-line, with its wealth of terminal user interfaces. In this post, I&rsquo;d like to think about these platforms as intermediaries for work of all sorts, and explore why I&rsquo;m so drawn to them.</p>
<h2 id="containers-for-centralization">Containers for Centralization</h2>
<p>Web browsers, the terminal, and many apps all aim to be containers: an encompassing solution for their given niche. They&rsquo;re collections of information, where everything about something in your life can be found. With a web browser environment, for example, that&rsquo;s likely where you&rsquo;ll find all of your browsing history, your tabs, and your Wikipedia rabbit holes. Containers range from widely ranging (your computer) to specific applications (consolidating all your social media inboxes into one app, or an all-in-one fitness buddy). Most platforms, I&rsquo;d say, are striving to be containers - what I want to investigate probably also applies if you architect your life around other systems instead of the web or the command-line, like mobile apps, an e-ink tablet, or plain old paper.</p>
<p>As I discussed in the introduction, containers are nice. I know that if I want to check my calendar, I can trigger a shortcut to open my terminal, where I can see my meetings and todos blocked out. Instead of jumping between a bunch of different apps, one for todos, one for meetings, and an internal one for communications, it&rsquo;s all in one place. There&rsquo;s something about containers that makes them so satisfying to use, and so tempting in terms of wholly trusting them with a portion of your life.</p>
<h2 id="the-boxing-principle">The Boxing Principle</h2>
<p>I&rsquo;m not sure if there&rsquo;s a name for that phenomenon, but I&rsquo;ll nickname it the boxing principle. It&rsquo;s the comforting feeling of being able to collect things in one place, and even if it&rsquo;s at times redundant or not the best place for information, it still feels grounding. It&rsquo;s the feeling about having the power to draw from a central repository of anything - something I think that&rsquo;s only become more desired as apps and services become increasingly niche and targeted. And it&rsquo;s also what I think proponents of platforms like Notion and Roam seek, especially as they characterize their app of choice as the be-all-and-end-all of their productivity needs.</p>
<p>Notion&rsquo;s premise, right smack on their front page in 74px font, is that they&rsquo;re the &lsquo;All-in-one workspace&rsquo;. Users can &lsquo;write, plan, and get organized&rsquo; with it, and it&rsquo;ll be the &lsquo;one tool&rsquo;. Implied, of course, is the &lsquo;you&rsquo;ll ever need&rsquo; - and if you&rsquo;re someone who&rsquo;s filled out entire life dashboards in the app, why would you ever need anything else? For members of the #roamcult, the same follows, and I&rsquo;m sure everyone&rsquo;d agree if you switched out the appropriate slogans for the taglines of their apps of choice. These companies actively want you to centralize your life in their products and make use of all of its features, becoming your &lsquo;second brain&rsquo;, because that&rsquo;s their business - and to be fair, there&rsquo;s nothing wrong with that.</p>
<p>I&rsquo;m not saying the boxing principle or companies that exploit it to entice you into their services are bad. However, I think they&rsquo;re something to consider as you build your own &lsquo;life stack&rsquo;, or choose the apps that&rsquo;ll bear the brunt of your digital life. For me, my calendar, notetaking, learning, and (software) development are all terminal-based, and my social media and communications are mainly in the browser. It&rsquo;d be interesting to build my own set of tools that cover all of these use cases, but for now, I&rsquo;m trying to keep my tools either easily customizable, or migratable. I&rsquo;m not worried about Gmail, Discord, or Slack drastically changing - if that happens, I&rsquo;m sure a more global migration will take place - since I don&rsquo;t depend on a more customized workflow with those. With my terminal apps, however, they&rsquo;re all ones that I&rsquo;ve either heavily configured, built at least partly myself, or decided that fit my needs well. I don&rsquo;t really see the point of investing so much in a container, and &lsquo;filling it up&rsquo;, to continue the metaphor, while it doesn&rsquo;t match the workflow I need.</p>
<p>There&rsquo;s also the question of if an application for your container is the best fit for the job. Continuing with the Notion / Roam thread, common examples I&rsquo;ve seen come up when I discuss the topic are things like custom timeblocking views, spaced repetition, and grade calculators. I&rsquo;ve seen people come up with gorgeous implementations in many different apps, and while there&rsquo;s the voice in the back of my head going &lsquo;they could have just used Google Calendar / Anki / Excel&rsquo;, I&rsquo;m suitably impressed. I&rsquo;m guilty (if this is really something to lay shame to) of this myself. It&rsquo;s arguably easier to use an existing notetaking app than to rig one that has spaced repetition, linking, search, and more all in Vim - this, I concede. But that&rsquo;s the draw, and the temptation of existing containers - I have an existing system set up, how difficult can it be to shape it and add new features so I can have everything in one place? It&rsquo;s a difficult balance, and while I&rsquo;ll ask myself over and over why I bother to create custom scripts to have things in the terminal or browser, I&rsquo;m not likely to give up my workflows anytime soon.</p>
<h2 id="easy-customization">Easy Customization</h2>
<p>There&rsquo;s also something to be said for the ability to customize, however. Many apps, including the examples I touched on above (Notion, Roam, and Vim), have infinite, or nearly infinite, ways to add plugins and develop new functionality. With the browser, for example, it&rsquo;s <a href="https://kewbi.sh/blog/posts/210124/">relatively easy to create your own extension</a> to scrape, manipulate, or connect whatever data across pages as you see fit. I think having the ability to extend and customize itself is almost a core principle of being a container - otherwise, why would people bother investing more into your app if it doesn&rsquo;t fit their specific use cases?</p>
<p>As well, since containers contain all the information you&rsquo;d ever need in a specific domain in your life, operating on what&rsquo;s inside can provide larger insights and innovative ways to work. If a container&rsquo;s especially large (like a browser or command-line environment), even more can be done to create pipelines and connections. Having these abilities to customize and extend containers is another part of why they&rsquo;re so attractive. It&rsquo;s workflow inertia, where people don&rsquo;t see a point in switching apps or creating a whole new profile if their needs can be addressed with just a couple tweaks or configurations.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I&rsquo;ve been working on revamping my <a href="https://kewbi.sh/blog/posts/200607/">notetaking system</a> and personal productivity flows recently, so I guess this post is a more in-depth reflection on (and justification of) the choices I&rsquo;ve made - namely, to stick with a obscure custom-built approach. In the end, it&rsquo;s my workflow, so there&rsquo;s no one really to explain or report to, but it&rsquo;s been nice to expand my ideas on why I&rsquo;ve stuck to my cobbled-together systems of web extensions and local bash scripts. The containers I&rsquo;ll use might, and will, change, but I hope the principles of how I use them will stay the same.</p>
<p>Speaking of my notetaking system, I&rsquo;m very excited about a new addition or two that I&rsquo;ve managed to work in, mainly centering around linking, searching, and navigating my digital notebook. In typical Kewbish fashion, it consists of misusing an existing tool, as well as some difficult-to-parse regex, so I&rsquo;m looking forward to creating a writeup on that, also touching on a talk I gave earlier (I&rsquo;ll discuss both in a bit). I&rsquo;ve been reading a bit more on the Zettelkasten methodology, and while I&rsquo;ve changed several key parts of it, I like what I have so far. The system&rsquo;s likely to adapt and evolve over the next few months, but as with all slightly unnecessary deep-dives on productivity, I&rsquo;m happy with it.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>I&rsquo;m fully aware I sound insanely obsessive over literal lists, but I promise I&rsquo;m fine, and that this whole introduction is meant to be a segue into the main post.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>CPSC 110: Week 11</title>
      <link>https://kewbi.sh/blog/posts/210718/</link>
      <pubDate>18 Jul 2021</pubDate>
      <author>Emilie Ma ◦ Kewbish</author>
      <description>On graphs and the course as a whole.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Last summer, I wrote a series of posts about my <a href="https://kewbi.sh/blog/posts/200621/">experience with Harvard&rsquo;s CS50</a> course, and this spring, I worked through the majority of another series of notes, this time on <a href="https://kewbi.sh/blog/posts/201213/">UBC&rsquo;s CPSC 110</a> course. Over this summer, I&rsquo;ve decided to finally spend some time just developing whatever I feel like, and self-studying topics that I find interesting, one of those topics being reviewing CPSC 110 for the upcoming winter session<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. While I was going through the course for a second round and looking through the notes I took the first time, I realized I never posted the final week&rsquo;s worth of notes for CPSC 110.</p>
<p>So here they are, along with an overview of the course, my likes and dislikes, strategies I&rsquo;m using in order to prepare, and my feelings about the course as whole. The notes that follow were written as I went through the course the first time, and while there&rsquo;s a lot of conceptual understanding that&rsquo;s changed since then, I think the module summary&rsquo;s decent as it is. I&rsquo;ll save the more introspective musing and thoughts on the course for the latter sections of this post.</p>
<p>Like the other posts in the CPSC 110 saga, these notes probably won&rsquo;t be useful for you, unless you&rsquo;re also taking the course, or have decided to implement some sort of cyclic data structure in Racket as well. If you belong to one of those two sets of people, you&rsquo;ll probably want to start <a href="https://kewbi.sh/blog/posts/201213/">at the beginning</a>, and if not, you might want to check out my other posts: I like rambling about CS, personal knowledge management, and vaguely tech-oriented things.</p>
<h2 id="notes---week-11">Notes - Week 11</h2>
<p>This week covers graph structures, including those that have self-referential loops through the introduction of the <code>(shared)</code> expression.</p>
<ul>
<li>information naturally forms a graph when there are multiple connections to other nodes
<ul>
<li>directed graph =&gt; arrows only go in one direction</li>
<li>cyclic =&gt; cycles (or loops) can exist in the graph</li>
<li>unlike lists, there isn&rsquo;t a natural order of sorts, and unlike arbitrary-arity trees, there isn&rsquo;t a direct or unique one-to-one mapping and cycles can appear</li>
</ul>
</li>
<li>HtDD for graphs is similar to other HtDD recipes
<ul>
<li>define a struct for the room, and include a field for a list of other nodes to link to</li>
<li>cannot define variables normally as there can be cycles in graph</li>
</ul>
</li>
<li>use <code>(shared)</code> to define looping variables
<ul>
<li>only available in ASL =&gt; check if correct language used</li>
<li>same structure as <code>(local)</code> with the square brackets for definitions and the final expression</li>
<li>similar scoping as <code>(local)</code> where variables are only valid within the expression</li>
<li>define each <code>-X-</code> variable and use the same variable in the list of linking nodes =&gt; numbers are convention, letters are preferred</li>
<li>i.e.</li>
</ul>
<pre><code>(shared ((-A- (make-room &quot;A&quot; -B-))
        (-B- (make-room &quot;B&quot; -A-)))
        -A-)
</code></pre></li>
<li>use accumulators (visited accumulator) to check that you&rsquo;re not in a cyclic loop
<ul>
<li>HtDF for graphs combines the local and accumulators modules extensively
<ul>
<li>also make use of the worklist and context preserving accumulators when necessary (depends on problem)</li>
</ul>
</li>
<li>remember that variables that don&rsquo;t change over the evaluation of a function don&rsquo;t need to be set as an accumulator (!)</li>
</ul>
</li>
</ul>
<h2 id="self-study">Self-Study</h2>
<p>Somewhere through the first module of the course, Kiczales (the professor) points out that just following along with the video lectures, and even taking meticulous notes, isn&rsquo;t enough to learn the material in CPSC 110. A large part of the learning comes from the practice: be it through problem sets, labs, or the extensive problem bank. I agree - though maybe with a caveat. I found practicing all the concepts to be pretty straightforward the first time round, but coming back this summer to re-attempt many of the problems was a decent challenge. I wanted to see how much I could remember in terms of design recipes and function calls without having the lectures to hold my hand through everything, so I&rsquo;ve just been jumping straight into each module&rsquo;s practice problems.</p>
<p>I&rsquo;ve been trying to choose problems that are marked at least a blue square, though I will sometimes go through the shorter green circles if I&rsquo;d like to rebuild my understanding of a topic. CPSC 110 was designed to be an introductory CS course, so besides the first couple weeks of learning design templates and familiarizing myself with the language, the theory behind topics isn&rsquo;t that difficult. I didn&rsquo;t really see a point in grinding through easy problems to falsely feel productive, so I thought I&rsquo;d try to tackle some of the more difficult problems. Another point about CPSC 110 being designed for beginners: there&rsquo;ll be a lot of tedious template syntax and repetition in the beginning. I sort of ignored this my first time round, completely forgoing the <code>spd/tags</code> expressions and copy-pasting trivial tests. In hindsight, that wasn&rsquo;t a good idea - going through all the templates, though very tedious and boring, drills them into muscle memory, and is good practice for further modules. The bit about tests and monotony also goes into my last overall goal: not relying on solution sets or videos for help. In the exam, I won&rsquo;t have these resources at hand, so since I&rsquo;ve sort of got the basics down, I want to ensure that I actually do understand what I&rsquo;m doing. That&rsquo;s also part of the reason I like the labs so much - there&rsquo;s no answer key, so even if you&rsquo;re tempted to go check and see if your tests and function design is formed correctly, you can&rsquo;t. Coming back to Kiczales' point, I think practice is certainly an important part of the process, but so is choosing practice at a difficult enough level, persisting through the tedium, and teaching yourself through it without opening solutions or even watching the lectures, if you&rsquo;ve gotten to that point<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Altogether, CPSC 110&rsquo;s been an insightful learning experience, and one that&rsquo;s been pretty positive. One of my favourite parts of the course was by far <a href="https://kewbi.sh/blog/posts/210411/">module 8, on abstraction</a>, though the <code>(local)</code> expressions covered in module 7 would be a close second. There was something about the way creating fold functions obviated the need for a lot of repetitive function design that somehow clicked with me. I found everything about encapsulating templates into abstract functions, and using built-in functions very intuitive. Composing built-in abstract functions was like putting together a puzzle, and I had a lot of fun working out where I&rsquo;d need a <code>(filter)</code> as opposed to a <code>(map)</code>, and so on. It was also interesting to see the role abstract functions played in functional programming, and I&rsquo;m beginning to see why developers in Javascript or Python sometimes tend to this sort of paradigm.</p>
<p>On the other hand, one of the things I didn&rsquo;t quite like was <a href="https://kewbi.sh/blog/posts/210418/">module 9, on generative recursion</a> - or at least, I didn&rsquo;t like it the first time round. The module was a lengthy series of videos playing off one central problem set, and while I&rsquo;m happy it was explained in great detail, it was honestly a bit boring to sit through. Maybe it&rsquo;s just my brain not being used to recursion, but the concepts of backtracking and generative recursion as opposed to structural recursion didn&rsquo;t really stick. Oh well - here&rsquo;s to hoping it&rsquo;ll be more manageable this time round.</p>
<p>My opinion on CPSC 110&rsquo;s definitely changed since I first looked into the course late last year. In the beginning, I was definitely very skeptical about Racket and the whole design recipe system - I was one of those &ldquo;oh, but Racket isn&rsquo;t used in the &lsquo;real world&rsquo;&rdquo; people. At first, I thought the unique (to me, at the time) syntax was a bit constraining, but after going through a good chunk of things a second time, I think I&rsquo;ve gained more of an appreciation for how structured and logical everything is. For example, the first couple weeks of trudging through HtDD and HtDF recipes sort of turned me off them: I thought they were tedious, repetitive, and annoying. Looking back, I appreciate how orderly everything is presented: the course certainly lives up to its moniker of &ldquo;Systematic Program Design&rdquo;. Having a bit of hindsight&rsquo;s made me more appreciative of the theory and concepts that were taught in the course, and besides just understanding them better, knowing where each topic&rsquo;ll be used again in the course gives me an overview and a map<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> of sorts to guide me through my studying.</p>
<p>I&rsquo;m still working through my second run of the course - I&rsquo;m currently somewhere around module 9 (which, as an aside, I sort of hated the first time, but we&rsquo;ll see how it is this time). For the rest of the summer, I&rsquo;ll likely be spending some time here and there to continue reviewing, and start attempting practice exams soon. Successfully challenging the course means I won&rsquo;t have to suffer through six courses in my first term, so that&rsquo;s an excellent motivator for me to do my absolute best. Besides CPSC 110, I&rsquo;ve been looking into some maths and some CS theory - spending a bit of time researching and looking into topics that I&rsquo;m interested in. It&rsquo;s been really nice to have the freedom to finally cross some of the learning I&rsquo;ve wanted to do for ages off my todo list, and I&rsquo;m looking forward to what the rest of the summer holds.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Speaking of which, I now understand why most university students I&rsquo;ve spoken to loathe course registration. My timetable was most certainly a work in progress, all the way up til thirty seconds before my registration time. (A special thank you to that CPSC 121 tutorial that decided to restrict itself.) But it was all fine in the end, and I did manage to get the courses I&rsquo;d been originally looking for, so I suppose the stress was a necessary part of the experience.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>An aside: part of what made me even bother writing up formal notes and doing the amount of practice I did was because there was an external motivator present: the challenge exam, sometime in September. While it wasn&rsquo;t really a major push when I went through CPSC 110 this spring, I&rsquo;ve been taking it a lot more seriously since I started reviewing earlier this summer. I guess that just goes to show the power of structure and well-defined end goals, but then again, isn&rsquo;t that the whole point of CPSC 110?&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>Please laugh now to validate my terrible abstract function puns.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>XFCE Monitor &#43; Bluetooth Setup</title>
      <link>https://kewbi.sh/blog/posts/210711/</link>
      <pubDate>11 Jul 2021</pubDate>
      <author>Emilie Ma ◦ Kewbish</author>
      <description>On my workarounds for my laptop setup.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>I suppose it wasn&rsquo;t particularly &lsquo;recently&rsquo; anymore, but I quote-unquote &lsquo;recently&rsquo; redid my laptop setup. (It&rsquo;s been at least three months now, but I&rsquo;ve been procrastinating on the writeup for unknown reasons.) My previous setup, if you can even call it that, was the typical hunching over my laptop, staring into the depths of a 15&quot; screen for hours on end situation. Not very good for posture, and probably not very good for my eyesight either. I went through the better part of the pandemic Zooming from there, but my parents and I decided it was probably not a great idea to continue like this. So, I acquired a monitor, a clamshell stand, a Bluetooth keyboard and mouse, a webcam, and off I went.</p>
<p>Setting all of this up probably would have been easier on Ubuntu with the normal DE and everything, but when I <a href="https://kewbi.sh/blog/posts/200906/">got into Linux</a>, I went with <a href="https://manjaro.org/">Manjaro</a> + <a href="https://xfce.org">XFCE</a> as a DE + <a href="https://i3wm.org/">i3</a> for a WM. Most of the tutorials I found for setting up display profiles on monitor connect, pairing Bluetooth peripherals, and wrangling the power manager to avoid suspending on lid close were mostly for GNOME Ubuntu. The few I found for Manjaro were quite convoluted, and would be using a different DE or device. I was left to trawl my way through the Arch Linux wiki and bodge together pieces of different writeups for what fit my system - it wasn&rsquo;t a very straightforward process. Since I don&rsquo;t want to bother having to figure everything out from scratch if I reinstall, I&rsquo;ve decided to put together what I remember doing to Make Everything Just Work™. If you&rsquo;re looking for a tutorial that&rsquo;ll go through how to replicate a system where:</p>
<ul>
<li>your laptop is running Manjaro with XFCE as a DE,</li>
<li>your laptop is docked in clamshell mode,</li>
<li>your laptop&rsquo;s only display is rendering to an external monitor (specifically Dell, though I doubt this makes a difference), and</li>
<li>your laptop&rsquo;s connected to a <a href="https://www.microsoft.com/en-my/accessories/products/keyboards/designer-bluetooth-desktop?activetab=overview%3aprimaryr2">Microsoft Designer Desktop Bluetooth keyboard and mouse</a> (monitor is irrelevant but this model is, I think)
you&rsquo;re in the right place.</li>
</ul>
<p>This&rsquo;ll be a decently technical post, but it&rsquo;s here to serve as a semi-tutorial for how to replicate my setup, just in case I have to reset my laptop or someone out there has the exact same, very niche problem as I did. I won&rsquo;t cover any of the more general advice, so there&rsquo;s a decent chance this is entirely irrelevant to you. Apologies, please check out one of the numerous other tutorials I&rsquo;m sure are out there. As with most of my articles here, take this with a grain of salt as well, and if what I&rsquo;ve done doesn&rsquo;t quite work on your setup, consider this your liability waiver: don&rsquo;t execute any of the commands or follow any of my instructions unless you understand them, and I hereby cleanse myself of any responsibility for you messing up.</p>
<h2 id="monitor-displays">Monitor Displays</h2>
<p>Now that we&rsquo;ve got that out of the way, let&rsquo;s start with the monitor setup itself. I have a Dell monitor - I don&rsquo;t think the model number is relevant at all, since I just plugged the monitor in via HDMI. (I&rsquo;m fairly certain this should be roughly the same for most other monitors.) What&rsquo;s a bit tricky, however, is the monitor display setup. It took a while for me to get how to turn on and off displays, since I just wanted my monitor on, and not have my laptop screen mirroring it.</p>
<p>Plug in your monitor to your laptop and open <code>xfce4-display-settings</code>, or just search for Display. You should have something like this:
<figure><img src="https://i.imgur.com/DSRtQQO.png"
         alt="Figure 1. When you first open Display."/><figcaption>
            <p><em>Figure 1. When you first open Display.</em></p>
        </figcaption>
</figure>

The little toggle next to laptop will likely be green instead - toggle it off (and toggle off &lsquo;primary display&rsquo; for good measure). This will turn off the laptop display, and leave you with your monitor on. (You&rsquo;ll still have to leave your laptop open and use it for keyboard and mouse controls though, at least until we get to the Bluetooth pairing.)</p>
<p>Click the dropdown that currently reads &lsquo;1 - Laptop&rsquo;, and switch to &lsquo;2 - Dell Inc.&rsquo;, followed by the screen size of your monitor. Have fun playing with any of the bottom settings, but once you&rsquo;re done, toggle &lsquo;primary display&rsquo; to on, and ensure the toggle beside the monitor name is still on. At this point, you can go ahead and drag the monitor displays on the left side of the screen around, but nothing should happen.</p>
<p>If you want to set up display profiles, so that your laptop automatically switches between monitor and laptop screen as primary display (for example, when you&rsquo;re on the go and your monitor&rsquo;s not plugged in), you&rsquo;ll have to tab over to the Advanced menu.
<figure><img src="https://i.imgur.com/d6AOrmA.png"
         alt="Figure 2. The Advanced Display menu."/><figcaption>
            <p><em>Figure 2. The Advanced Display menu.</em></p>
        </figcaption>
</figure>

Click the little file icon with a plus in the lower right hand of the main box, and name your new profile something like &lsquo;Home&rsquo;. Check &lsquo;Configure new displays when connected&rsquo; and &lsquo;automatically enable profiles when new display is connected&rsquo;, and toggle off &lsquo;Show popup windows to identify displays&rsquo;. This will become your Home profile, and you can click &lsquo;Apply&rsquo; in the bottom right of the main box to apply it currently. For your other display profile, create a new profile as before, with a different name. Tab back over to General display settings, and toggle &lsquo;1 - Laptop&rsquo; back on, as well as enabling it as a primary display. Turn off the monitor as well - select it in the dropdown and toggle it off. You might want to unplug your monitor, update (download icon), and apply your profile for good measure. This will give you a fallback profile when you&rsquo;re away from your monitor, and the two profiles should automatically switch when you return home and plug in your monitor.</p>
<p>Random note: sometimes plugging and unplugging my monitor disables my WiFi for no apparent reason, but this is easily fixed with <code>sudo wifi on</code> in the terminal.</p>
<h2 id="clamshell-mode">Clamshell Mode</h2>
<p>Now that the monitor&rsquo;s on and working as expected, it&rsquo;s time to set up a pseudo-clamshell mode for your laptop. XFCE Power Settings are a bit finicky - what I found in old tutorials was an outdated setting that automatically went and set it so the laptop wouldn&rsquo;t suspend on lid close, but from what I can see, that&rsquo;s gone now. There are a couple files you&rsquo;ll have to edit:</p>
<p>In <code>/etc/systemd/logind.conf</code>:</p>
<pre><code>HandleLidSwitch=ignore
HandleLidSwitchExternalPower=ignore
HandleLidSwitchDocked=ignore
LidSwitchIgnoreInhibited=no
</code></pre><p>In <code>/etc/UPower/UPower.conf</code>:</p>
<pre><code>IgnoreLid=true
</code></pre><p>And for good measure, tweak the Display settings in <code>xfce4-power-manager</code> to not blank. I tried just the systemd logind.conf fix, and just the UPower.conf fix, but it seems that it didn&rsquo;t quite work until I&rsquo;d edited both files - not sure why. After all this, reboot, and try closing the laptop lid (while having it plugged into your monitor). Hopefully, your laptop should remain on. (From now on, remember to properly suspend your laptop before closing it when it&rsquo;s not docked, if the suspend-on-close feature was something you were used to.)</p>
<p>I docked my laptop vertically in one of those clamshell holders off Amazon. When suspended, my laptop automatically wakes if I open the lid, so whenever I want to turn on my laptop, I crack it open a bit in the dock. (I had to widen the holder a bit so I could open my laptop enough for the magnetic switch to disengage and detect my laptop was open.)</p>
<h2 id="bluetooth-peripherals">Bluetooth Peripherals</h2>
<p>Since your laptop will mostly now be docked, you&rsquo;ll still need some way to control it - I opted for a <a href="https://www.microsoft.com/en-my/accessories/products/keyboards/designer-bluetooth-desktop?activetab=overview%3aprimaryr2">Bluetooth keyboard and mouse</a>. I won&rsquo;t go into starting Bluetooth services and autoenabling controllers on startup, but I&rsquo;ll go over how I managed to get my mouse and keyboard both working. Pairing Bluetooth devices is generally pretty easy with blueman&rsquo;s <code>blueman-manager</code>, so I thought that this&rsquo;d be the simplest part of the entire process. (And hey, I was only half wrong.)</p>
<p><figure><img src="https://i.imgur.com/d6AOrmA.png"
         alt="Figure 3. Blueman pairing."/><figcaption>
            <p><em>Figure 3. Blueman pairing.</em></p>
        </figcaption>
</figure>

First, let&rsquo;s pair the mouse. Once in Blueman, click &lsquo;setup&rsquo; to go through the pairing assistant. Hold down the small button on the bottom of the mouse, and wait for it to show up in the &lsquo;Device&rsquo; menu of the wizard. Click it, and once everything sets up, the mouse should be good to go. Right-click on the mouse (it should read &lsquo;Designer Mouse&rsquo;) in the main pane of Blueman, and select Trust. I have it set up so that trusted devices are automatically connected, which makes everything a lot less complicated when I go to start up my laptop.</p>
<p>Now, onto the fun bit. Trying to pair my keyboard to my laptop was a pain, but I finally found some hints in the <a href="https://wiki.archlinux.org/title/bluetooth_keyboard">Arch Linux wiki page</a>. You&rsquo;ll need <code>bluez-utils</code> in addition to Blueman for this bit, so pull that from whatever repository you decide to use. Similar to the wiki, we&rsquo;ll be using <code>bluetoothctl</code> for the pairing process.</p>
<p>Run <code>bluetoothctl</code> to enter the tool, and enter <code>power on</code> to boot up the controller. Hopefully, no error messages appear. Then, enter <code>agent KeyboardOnly</code> and <code>default-agent</code> to limit the search to keyboards. Next, run <code>pairable on</code> to put the laptop&rsquo;s controller into pairing mode, and then hold the little button on the left underside of the keyboard to put the keyboard into pairing mode. Once you enter <code>scan on</code>, the keyboard should be discovered pretty quickly. To actually pair your keyboard, run <code>pair </code>, followed by the Bluetooth MAC address that the scanner spit out. For example, if you had something like <code>01:02:03:04:05:06</code>, run <code>pair 01:02:03:04:05:06</code>. The Microsoft Designer Keyboard is interesting in that it demands some PIN to be entered, so enter that physically on the Bluetooth keyboard. Then run <code>trust 01:02:03:04:05:06</code> to trust the device, and <code>connect 01:02:03:04:05:06</code> to connect. At this point, you can <code>quit</code> the tool, and the keyboard should be connected and working. It should also auto-connect once you turn your laptop on.</p>
<p>Sometimes, the keyboard and mouse don&rsquo;t connect right away when I turn my laptop on (or, strangely, one&rsquo;ll connect but not the other, and then they&rsquo;ll switch or lag for a while). This is fixed by using whichever device is connected to suspend the laptop again. Once it rewakes, I find that most connection lag errors are gone, but maybe this has nothing to do with the keyboard and mouse and is just an issue with my Bluetooth controller.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Congratulations! You should now, in theory and with a tablespoon or two of good luck, have an aesthetic laptop setup with a nice comfortable monitor and a very satisfying keyboard<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. Future me, if you&rsquo;re reading this: try not to mess up whatever you&rsquo;ve just done to warrant a reset now again. I doubt anyone&rsquo;ll properly need this guide, but hey, it at least will help me when I unexpectedly break everything sometime in the future.</p>
<p>It doesn&rsquo;t particularly feel like it, but I suppose it&rsquo;s summer vacation now. I&rsquo;ve been spending maybe a bit too much time in the same old routines of studying things that I&rsquo;m sure I&rsquo;ll do fine in even if I didn&rsquo;t bother previewing. It&rsquo;s nice to have a lot more freedom in what, when, and how I&rsquo;m learning, however - having this much time to dive into topics I&rsquo;m interested in and self-study has been something I&rsquo;ve been looking forward to for a long time. I&rsquo;ve also been trying to do more creative things, and spend more time writing, so hopefully I&rsquo;ll be more consistent with this blog as well. (I know I append some version of this to each post, but I&rsquo;ve gone and made a backlog of ideas, and it&rsquo;s something I&rsquo;ve really decided I need to devote more time to in the future.) I&rsquo;m pretty sure writing about vaguely technical topics and slaving away over online courses probably isn&rsquo;t everyone&rsquo;s idea of an ideal summer, but to me, it really is the perfect transition to university.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>I genuinely like the feel of this keyboard. I&rsquo;ve never tried mechanical keyboards, and they seem a bit clunky; the original keyboard built into my laptop is a bit too soft. This keyboard is a really nice balanace between easy to type on without a rather flimsy feeling - and it sounds pretty aesthetic as well, if that&rsquo;s somewhere on your criteria.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>Indie Games: Influences</title>
      <link>https://kewbi.sh/blog/posts/210613/</link>
      <pubDate>13 Jun 2021</pubDate>
      <author>Emilie Ma ◦ Kewbish</author>
      <description>On the ideal aesthetic behind my game dev.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>This is a continuation of my last post: if you&rsquo;re interested, I discussed some of the <a href="https://kewbi.sh/blog/posts/210523/">tools and engines</a> I used over my indie game dev journey back then. In it, I reminisced on the process of finding new gamemaking tools to try out, mostly drawing from memories of the little experiments I used to work with. I will also confess that I was mistaken in that post: I do actually <a href="https://kewbi.sh/blog/posts/210523/#fn:2">have the original files</a> for a good number of old projects. The other day, I was looking through my backups and archives from a couple years ago, and found a few interesting folders. Here&rsquo;s a look at what eleven-year-old me thought was peak indie game development:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">archives/
├─ aninfinitebath.zip/
├─ bleedingpenguins.zip/
├─ botanicpiano.zip/
├─ closer.zip/
├─ ohmagosh.zip/
</code></pre></div><p>These are some of my mid-Unity-phase games, put together a couple years ago sometime before the end of 2018. I&rsquo;ll expand a bit more on the actual projects in a bit, but just looking through the old files&rsquo;s brought me right back to developing each of the experiences. Back then, I had no idea what I actually wanted to aim for in terms of game mechanics, genre, or style, so I focused on copying my ideal aesthetic.</p>
<p>That &lsquo;ideal aesthetic&rsquo; was developed over many an hour trawling through <a href="https://itch.io">itch.io</a>, a digital marketplace focusing on sharing and selling indie games of all genres. I really liked the vibe of the site as a kid - there was just something about the simple theming and easily discoverable games<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. When I started looking for places to share my games (after all, I very much was validated by watching download counts tick very slowly up over time), I went straight to customizing my profile and uploading little HTML5 games to itch.io. I spent a while learning CSS to fine-tune my landing pages there, and I think it&rsquo;s made a clear impact in the aesthetic that continues to influence my design decisions to this day. Game jams and development communities centered on the site also gave me a starting point and many sources of inspiration throughout the process of trying to learn how to develop - in short, it was a pretty interesting environment.</p>
<p>In this post, I&rsquo;d like to reflect on some of my past projects and other aspects of my game dev journey, such as the various influences that somehow combined to build what I&rsquo;ll continue to call my &lsquo;aesthetic&rsquo; for games. I can&rsquo;t seem to find a better word for the phenomenon, but I mean the general feel, artistic style, production quality, and story types that featured in games that I came to love and admire.</p>
<h2 id="itchio-inspiration">Itch.io Inspiration</h2>
<p>I&rsquo;ve already mentioned the impact of itch.io on my sources of inspiration, but I can&rsquo;t highlight enough how much of an influence it had over what I chose to create. I remember somewhat illegally joining their Discord (by illegally, I mean age-wise, but let&rsquo;s hope I don&rsquo;t get my account suspended for not following TOS), and subscribing to the daily progress updates. Each day, I&rsquo;d look forward to the <code>@DailyDev</code> ping that rolled in sometime in the morning, and watch the channels get flooded with cute screenshots and GIFs of fascinating mechanics in progress. I generally lurked in the server, never interacting unless I really wanted to post a couple screenshots of art or request feedback when I was &lsquo;launching&rsquo; a game. However, just being able to see the amazing work and concepts that were also being created in parallel with my projects was a healthy motivation boost. I think having this initial community that I could sort of pseudo-participate in was a very fun experience, and I can&rsquo;t thank the whole itch.io community enough for fostering that space.</p>
<p>Itch.io also introduced me to the thriving community of game jams, and the often unpolished, though wonderful, experiences that would come out of them. For the uninitiated, game jams are short events, usually under a tight time crunch, where developers and artists gather to create a game based on a hidden theme. Some of the bigger ones that you might have heard of are <a href="https://globalgamejam.org/">Global Game Jam</a> and <a href="https://ldjam.com/">Ludum Dare</a> - I&rsquo;d advise going through some of the event galleries for meetups and game showcases: the end results are super creative and surprising. Itch.io had its own online game jam functionality, and the list of jams hosted on the site is only growing. <a href="https://itch.io/jams">This page</a> highlights all the jams happening at any one time - just today, I can see at least forty or fifty jams running, and I didn&rsquo;t even scroll that far down the page. Larger jams often stemmed out of, or would host, their own Discord communities, which gave eleven-year-old me extra content to feast on. Looking through project galleries was hugely inspiring - seeing the efforts of just a couple people over just a few hours was oddly motivating.</p>
<p>Though I never really got into the whole game jam lifestyle, I did like to look through past jams and projects for their themes. At this point in time, I had no original ideas, really, and was just trying to emulate all the cool projects I&rsquo;d seen online. I&rsquo;d piece together different game mechanics or slap together a slightly more creative story, and call it a day. As you&rsquo;ll see later on, I focused not on making full releasable games, but on smaller scenes and cute experiments, which were mostly an excuse to make new Unity projects and spend much too long on custom pixel art again. That means I was constantly looking for new ideas to feed my tiny games, and the more frequently running game jams were a godsend for sparking new schemes. I particularly had a thing for the <a href="http://www.weeklygamejam.com/">Weekly Game Jams</a>, which put out new themes each week. I also liked drawing on other people&rsquo;s interpretations of these prompts later when developing my own games, since I never stuck to the strict weekly schedule or even formally entered in any jams, as far as I can remember. The nice thing about these jams, especially the week-long shorter ones, was that there was no pressure to polish (or even present, since I didn&rsquo;t officially participate) anything that came out of those experiences. That incessant stream of new thoughts and potential games was incredibly fun to think about as a kid, and I used to be constantly dreaming about new things to make. I think there&rsquo;s something interesting to consider with these tight creative feedback loops and constant states of tinkering - a continuous imaginative cycle of producing new things for the sake of honing my skills and just having fun with the process.</p>
<h2 id="experiments-and-examples">Experiments and Examples</h2>
<p>Back then, I liked making proof of concepts, toying around with environments and game mechanics, instead of worrying about gameplay. This helped me learn how to work through design problems, and piece together how to create simple interactive environments. Having a system of just picking up new ideas and working on them as long as I wanted before moving on to the next idea in my backlog allowed me create a pace of continual creative thinking, and remain motivated to even work on development. While no major games came out of this cycle, I think my brain likes these smaller experiences more, and having smaller &lsquo;investments&rsquo; to have to make with each game let me develop my aesthetic and refine my ideas well.</p>
<p>Let&rsquo;s go through a quick summary of some of the games I mentioned earlier, as well as some I just very vividly remember putting together. I discussed in my last blog post that I had a couple tool &lsquo;phases&rsquo;, in which I would fall into a rabbit hole of endlessly exploring on specific engine, and then jump to dabbling with the next. I can&rsquo;t really remember anything I made in GameMaker, I only put together a couple platformers in GDevelop, and I can&rsquo;t access my Roblox anymore, so I&rsquo;ll go into some of the work I put together in two main tools: Bitsy and Unity.</p>
<p><a href="https://ledoux.itch.io/bitsy">Bitsy</a> is a minimalist, retro-ish game engine that focuses on story- and rudimentary interaction- based games. I made a bunch of games in Bitsy, mostly because the boilerplate required was absolutely nothing, and it was a quick way to capture whatever questionable narrative I wanted to express. After a couple exploration games (I think I really had a thing for trying to do super scaled-down pixel art back then), I worked on a couple &lsquo;proper&rsquo; games. One of my favourites was based off a play on words between Caesar, the individual who was brutally murdered by his closest confidants, to the salad, which I don&rsquo;t think involves any violence. Eleven-year-old me thought it would be funny to create a whole Ancient Rome-esque world, in which the main character played a spy out to poison Caesar, with, well, a salad. The player would wander round a bunch of rooms, looking for the right rotten tomatoes (it had not yet dawned on me that the presence of tomatos would make it closer to a Greek salad) and toxic lettuce to finish off the poor general. I remember getting very carried away with the art, meticulously painting together little salad bowls and baker NPCs selling their loaves that the player would buy to make croutons out of. It was a very amusing little game, and I&rsquo;m honestly sort of proud that I went all in on the pun. I think the last thing I tried to make in Bitsy was an elaborate network of rooms that would each depict a phase in the main character&rsquo;s life, all connected to form their entire life story, but it got a bit too complicated, so I scrapped it.</p>
<p>Unity was where I made the majority of my games after my Bitsy adventures, though I suppose a better word for what came out of my tinkering would be &lsquo;experiments&rsquo;. Even just looking at the things I worked on in 2018 (that I archived, I remember working on plenty more projects that never went past the player controller script or so and were therefore not saved properly), I had a pretty interesting streak of ideas:</p>
<ul>
<li><em>An Infinite Bath</em> - This was something to do with balancing a bathtub, and trying to balance the rubber duck and the soap and whatever suds in the basin while the game randomly started to tip it. It resembled the IRL game of &lsquo;keep it up&rsquo; that I used to play in elementary school, so I suppose that might have been an inspiration.</li>
<li><em>Bleeding Penguins</em> - A painstakingly hand-pixellated ice sheet, complete with icebergs and snowflakes, and a sliding penguin that you could drag around. The &lsquo;bleeding&rsquo; part of the title refers to the fact that, naturally, the penguin was moved not by a mysterious force, but by gently prodding it with a knife (hence the blood spatters that I also thought were necessary to maintain the atmosphere). I genuinely don&rsquo;t have an explanation for this one (besides maybe one of those word generators?) - I was an interesting child.</li>
<li><em>Botanic Piano</em> - On the complete opposite side of the questionability spectrum, this involved a calming musical loop with nice rain and wind sounds (that were ripped directly from somewhere off YouTube). The player jumped around a flowerpot, landing on magical flowers that would play a single note. Very oddly charming, and sort of relaxing as well.</li>
<li><em>Closer</em> - I think this pivoted from being a C# script (yes, I had a bit of a thing for terminal apps even then) to a half-hearted Unity game. The premise was that you&rsquo;d try to get as close as possible to another character, and then eventually have them push you away. I remember making the itch.io cover art, and including a bunch of hearts, which means that I&rsquo;d intended this to be a somewhat romance-related game, but I really don&rsquo;t know how that came through, since the gameplay was essentially a PowerPoint slideshow.</li>
<li><em>OHMagosh</em> - Another play on words, this was one of the times I tried to actually make a playable game and learn more about the programming side of things. It was meant to be an infinite runner, since that was what I was following <a href="https://www.youtube.com/watch?v=5M7vX_z6B9I">this tutorial</a> for. I think this was also the first time I&rsquo;d tried to look into a game jam (without actually committing by signing up or anything), which explains why the theme was something to do about electricity. The main character played a cute little (pixel-art; are you seeing the recurring theme here?) janitor, running around with their toolkit to put resistors in the correct slots. I had a bit of trouble actually learning how to code this, and didn&rsquo;t end up finishing or submitting it, but I do have the art, which I think was pretty adorable given I had no actual experience:
<figure><img src="https://i.imgur.com/PXiCISc.png"
         alt="Figure 1. My attempts at a character and assets."/><figcaption>
            <p><em>Figure 1. My attempts at a character and assets.</em></p>
        </figcaption>
</figure>
</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>I don&rsquo;t think I&rsquo;ve even really figured out what my full aesthetic is, but if I had to sum it up in a couple phrases, it&rsquo;d be:</p>
<ul>
<li>first and foremost, pixel art - I had a huge thing for trying to make spritesheets and distill complex images into a couple pixels</li>
<li>experientially focused - I wasn&rsquo;t too bothered with the game length aspect, and was more concerned about their feel</li>
<li>very odd ideas - what can I say? I twisted even game jam themes into pretty interesting interpretations</li>
<li>one-upping the last - each game was focusing on a different aspect of development that I was trying to learn, and this method of tackling one thing at a time was very effective in learning the engine</li>
</ul>
<p>I could go on forever, diving into all the old hidden archives I have, but I think it might be a bit more interesting to focus on the takeaways I&rsquo;ve learned from this whole nostalgic look back. First, I find it really interesting that I was drawn to such simple and relatively unengaging experiences to build, and I think the fact that I had a severely limited programming ability was a major factor. I&rsquo;ve noted that game dev kind of helped me learn how to learn to develop on my own, and properly learning how to develop lead to me being able to create quote-unquote better games. As well, it&rsquo;s fascinating how my game dev focus also shifted over the years as I hopped between tools, and how my style and preferred game type changed with each engine. With GDevelop, an engine suited well to event-based games (and with a built-in platformer tutorial), I fell back to making platformers and action games. On the other hand, Bitsy was built for worldbuilding and storylines, which I focused on when using the tool. Unity&rsquo;s relative difficulty in getting started and learning curve lead to smaller experiences with which I tried to work on learning how the engine worked. And finally, I&rsquo;d also like to reflect on the tight creation loops and the steady stream of games I was putting out back then. I think the whole game jam community and the influences I was surrounding myself with digitally helped to push me towards a system of tiny projects, made and finished quickly, which also benefited my creative thinking, and later, my development skills.</p>
<p>Moving forward, while it&rsquo;d certainly be fun to get back into game jams, I think their rather time-crunch-y nature doesn&rsquo;t make them a good fit for what I like to do (also a reason that the couple weekend hackathons I&rsquo;ve done were more stressful and unenjoyable than the two-month long one I&rsquo;ve participated in). Something I&rsquo;d like to bring back into my life, however, is the &lsquo;creation state&rsquo; that I was in when I was younger. I really liked being able to constantly work on something and dive back into tinkering with little systems whenever I wanted, and I think I&rsquo;ll be shifting around my current projects to reflect that. Whether it be CTF problems<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, personalized CLI tools, or even reinstating my weekly writing habits, I&rsquo;d like to return to that creative state, and with summer coming up, it&rsquo;ll be the perfect opportunity to dive into whatever I&rsquo;d like to tackle.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>I specifically remember spending way too much time at school clicking through the <a href="https://itch.io/randomizer">randomizer</a>, which you could fine-tune to narrow down tags and platform types. There was something very magical about the way it managed to spit out highly appealing games every couple clicks, though I suppose that&rsquo;s also a testament to the quality of the games hosted there. itch.io also has a very nice tagging system, which I recall tabbing through as well. The <a href="https://itch.io/games/tag-pixel-art">pixel art</a>, <a href="https://itch.io/games/tag-2d">2D</a>, <a href="https://itch.io/games/tag-casual">casual</a>, and <a href="https://itch.io/games/tag-cute">cute</a> tags were the ones I frequented the most, which I guess exposes my entire taste right there.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>I&rsquo;ve also been getting back into attempting some <a href="https://play.picoctf.org/practice">picoGym</a> problems, as well as taking a look at some crypto resources, namely <a href="https://cryptohack.org/">Cryptohack</a> and <a href="http://cryptopals.com/">Cryptopals</a>. They&rsquo;re pretty challenging, but it&rsquo;s fun to properly learn the basics and familiarize myself with common attacks and such.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>Indie Games: A Trail of Tools</title>
      <link>https://kewbi.sh/blog/posts/210523/</link>
      <pubDate>23 May 2021</pubDate>
      <author>Emilie Ma ◦ Kewbish</author>
      <description>On my game dev toolbelt as I got started.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>I think I&rsquo;ve mentioned it before, but ironically, the platform that hooked me into programming was low- and no-code tools. Specifically, I had a bit of a phase in which I fancied myself a game developer, while exclusively relying on drag-and-drop engines and scripting-free tools. I think game dev was my first real foray into any sort of programming (unless those endless rounds of <a href="https://lightbot.com/">Lightbot</a> in elementary school computer class counted). I recall it being surprisingly easy to get started: there&rsquo;s a wealth of game-making tools available that don&rsquo;t require any coding and are specifically targeted at kids: from the ubiquitous <a href="https://scratch.mit.edu/">Scratch</a>, to <a href="https://roblox.com">Roblox</a>, the addicting launcher and editor that supplied many an hour of obbying fun<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. While I no longer have original files<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> for most of these projects, I thought it&rsquo;d be interesting to take a dive into the tools and engines that, well, &lsquo;raised&rsquo; me as a programmer - at least until I found out what web development was.</p>
<p>I used to play quite a few games as a kid - I think I started with the first versions of the Dora games (where an oddly grown-up version of the title character would go around with her gang of friends and rescue puppies). There was also the Build-a-Bear Bearville universe, which I can no longer find any archives of, and apparently shut down in early 2015. I was very intrigued by seeing my physical teddy bear pixellated on a screen, and I think I spent way too long on customizing my in-game house. It was odd how accurate my character was, and trying to figure out how the game magically copy-pasted my toy directly into the Cub Condo was an interesting thought experiment for six year old me. <a href="https://en.wikipedia.org/wiki/Moshi_Monsters">Moshi Monsters</a> was another super fun game - though also now deprecated due to Flash requirements. I remember spending ages trying to figure out all the puzzles and quests, and inevitably falling into the YouTube clickhole of walkthroughs and clues. When I got a bit older, I went into a pretty heavy grind with <a href="https://en.wikipedia.org/wiki/Club_Penguin">Club Penguin</a>, and I used to meet up with friends to do the <a href="https://clubpenguin.fandom.com/wiki/PSA_Secret_Missions">PSA Secret Missions</a>. There are tonnes more Flash and (pseudo-)educational games I used to spend my free time on, and I credit the experience of these engaging game mechanics with sparking my interests in game development.</p>
<p>Somwhere along the way, I got the idea that I could replicate or extend some of my favourite games, so I started Googling around for &lsquo;how to make games no code&rsquo;. It&rsquo;s interesting to note that I even understood the concept of code, and that I didn&rsquo;t have the skills to write it, in the first place. I think it&rsquo;s kind of poetic that what ended up drawing me to development were such low-code (and low-effort) tools. Most of the games I get nostalgic over are the bubbly, vibrant, slightly buggy Flash games that popped up in the early 2010s, and back then, that was all I wanted to replicate. Game-mechanics-wise, my projects weren&rsquo;t much more than drag and drop world builders, or side-scrolling puzzle platformers. But I saw something in the process of building each of these game worlds, from the carefully crafted quests and characters to the infinitely customizable housing systems in many of the games. That something was enough to encourage me to jump (well, attempt to awkwardly stumble) into the world of game development, and it&rsquo;s brought me, through a very disjointed and meandering path, to where I am today.</p>
<p>In the process of writing this post, I realized I had a lot more to reminisce about than I&rsquo;d initially thought, so I&rsquo;ll split this post into two. This post will cover the tools that I used, and how each of them shaped my development journey. The next post, whenever that comes out, will tackle more about the projects I worked on and the impacts game development and indie game culture have had on my experiences to date.</p>
<h2 id="the-gamemaker-era">The GameMaker Era</h2>
<p><a href="https://www.yoyogames.com/en/gamemaker">GameMaker</a> wasn&rsquo;t the first programming experience I had - that honour goes to the battered copy of &lsquo;Javascript for Dummies&rsquo; I picked up at the local library sometime in third grade. It taught the basics of console logging<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>, and eventually got into how to bodge together HTML5 games. I can&rsquo;t remember what exactly led me to download GameMaker on the first old Toshiba laptop I had essential free reign over, but I remember being spontaneously inspired to see if I could make JS games without programming. Oh, the naivete of little me - though I guess it&rsquo;s sort of funny that even 9 year old me was already frustrated by programming.</p>
<p>I don&rsquo;t think that GameMaker was even paid when I installed it, but I recall being very intimidated by all its buttons and menus. GameMaker games can be put together with GameMaker Language, the proprietary scripting system, though I was nowhere near prepared enough for that. Even the visual drag and drop systems were a bit overwhelming. I doubt that&rsquo;s a fault of GameMaker&rsquo;s - I was glancing through a couple tutorials earlier, and it&rsquo;s comparable to Unity. But what can I say: I was probably 9 or 10, and I simply was unprepared for the wild world of &lsquo;actual programming&rsquo;, even though I guess GML is more visual scripting than anything. After discounting GameMaker as a viable tool (because I could not for the life of me understand it, and the concept of Googling niche websites for tutorials had not revealed itself  yet), I delved into a search for another engine: something that might be less feature-heavy, but that would be more comprehensible.</p>
<h2 id="hacking-gdevelop">&lsquo;Hacking&rsquo; GDevelop</h2>
<p>That tool ended up being <a href="https://gdevelop-app.com/">GDevelop</a>, which actually did spark a lot of small creations and my first couple finished games. GDevelop has a custom event-based scripting system that&rsquo;s pretty advanced for its child-friendly interfaces. I probably didn&rsquo;t make use of half the features available, but I think this was roughly when I started to think about proper mechanics and ideas - I was no longer too handicapped by my lack of programming skills, so I could focus on what I really wanted to make. (Not that I had any original ideas, but it was definitely rewarding to see the actual playable fruits of my efforts.) Exporting was also super simple, so I started to be able to actually play my games and show them off to my classmates. (I think this was also the point when I made an <a href="https://itch.io">itch.io</a> account as well.)</p>
<p>I&rsquo;ll talk a bit more about some of my projects in the other post, but the first couple experiments I made in GDevelop were definitely platformers. I had a thing for the genre (probably due to a minor dinosaur game addiction), so I spent a lot of time drafting up rudimentary &lsquo;AI&rsquo; (if-statements) in the editor. No matter what scuffed little projects I worked on - the important thing was that I could actually make things now. Whatever ideas I had - I could (probably) bodge together a solution, and that freedom was pretty addicting as a kid.</p>
<h2 id="bitsy">Bitsy</h2>
<p>Sometime vaguely concurrent with my GDevelop escapades was my foray into <a href="https://ledoux.itch.io/bitsy">Bitsy</a>, a little story game maker that&rsquo;s decently popular in the indie game community. There was a charming painting pane where I could pixel-art whatever characters I wanted to build, a tile editor to lay out my story, and a few rudimentary animation and item settings. Things were dead simple to rig together, and while the editor certainly had its limitations (which were intentional design features, I&rsquo;m sure), I found the restrictions more freeing than anything. Instead of making proper shooters or scripting complex game behaviours, I could focus on writing my storyline, and improve my world-building skills.</p>
<p>Dialog and drawing out the worlds were the key pillars of the whole Bitsy experience, and while I didn&rsquo;t come up with any cinematic masterpieces, the whole retro + limited aesthetic has made a lasting impression on my content preferences. It&rsquo;s built a very niche, indie community, and I value that while it might not be the choice for a fast-paced action interaction, the experiences people have worked Bitsy into are very impressive and inspiring. I might take a stab at another few Bitsy games in my spare time (not that I have any at this point, but I can dream), just because they&rsquo;re so cute and fun to make.</p>
<h2 id="climbing-the-social-ladder">Climbing the Social Ladder</h2>
<p>I can&rsquo;t think back about my game development phase without mentioning <a href="https://roblox.com">Roblox</a>. At first, I didn&rsquo;t even know I&rsquo;d installed the editor, since it was just bundled in with the default installer. I only opened it after trawling through Windows Appdata folders looking for something, but once I opened it, I immediately started playing around with the modelling and setup tools. Roblox itself was an amazing, engaging game environment, and since I&rsquo;d been playing a bunch of the various games with my friends, I had references and inspiration to draw ideas from. Roblox&rsquo;s editor was definitely a step up from the simplicity of GDevelop, but the basics were simple enough: drag and drop models from this pane, make your own over here, and fiddle with object settings in this one. It&rsquo;s surprisingly comparable to Unity, though the scripting is done in Lua instead. I remember spending ages scrolling through Roblox tutorials on YouTube - <a href="https://www.youtube.com/channel/UCp1R0TBvgM7gj0rwTYULmSA">AlvinBlox</a> was one of my favourites. I had no idea how to get anything new done, since I was copying code directly over from video courses, but it was still something.</p>
<p>Given the odd section title, you&rsquo;re probably thinking some dramatic backstory happened with grade 5 me. I&rsquo;ve mentioned this a couple times before <a href="https://kewbi.sh/blog/posts/210124/">in other posts</a>, but my Roblox shenanigans involved making little games for my classmates to show off my tried-and-true hackerman skills. This was sort of an expansion of my experience with GDevelop and Bitsy, but Roblox also offered a platform to share my experiments on, and one that my friends were already spending way too much time on. In a way, I guess Roblox shares a similar vein with TikTok in that remixing and sharing content is super easy, and this low barrier of creation lends itself nicely to the empire of content both apps have been building. As well, seeing how my classmates played my team games led to new feature ideas, which then fed my need to learn programming, so by the end of my Roblox journey, I&rsquo;d developed a decent understanding of how &lsquo;real&rsquo; game engines worked.</p>
<h2 id="pixelpad-and-unity">Pixelpad and Unity</h2>
<p>This came in handy, since by this point, my parents had picked up on my whole programming spiel and wanted me to learn &lsquo;properly&rsquo;. That meant shipping me off to coding classes once a week, where I sat in an overly bright schoolroom and copied code directly from what the instructor was writing out. No shade at all - in later classes they tried to get us to build our own functions first, but thinking back, one of the main reasons I stopped was because it felt very repetitive and, frankly, boring to be essentially regurgitating lines of script. There wasn&rsquo;t much creative thinking involved, and since each session was oriented around making similar versions of the curriculum project, I felt a bit shackled by all the restrictions of fitting to a pre-built game. (However, this did end up expanding my actual programming skills quite nicely, so while I maybe lacked freedom in my gamedev, I certainly ended up making more polished and playable final products.)</p>
<p>My first year there involved working with <a href="https://pixelpad.io/">Pixelpad</a>, a Python-based web interface. It has a pretty detailed core library that makes programming in it very different from vanilla Python, but it was easy enough to hack away at. I took away none of the Python syntax and had only scratched the surface of what it was capable of, but Pixelpad was my first instructor-led look into properly scripted games. While I didn&rsquo;t really grasp the library well other than what was used in classes, I&rsquo;d learned the basics of thinking in a game loop and started thinking about possible recipes that I could reuse in other languages and engines.</p>
<p>Once I&rsquo;d <del>started to fancy myself an actual game developer</del> graduated to the next module of the program, I started working with Unity. (This continued for a couple years before I finally decided making websites was more attractive and quit.) Unity was certainly a step and a half up above Pixelpad, so while not being able to control exactly what I was making, having an instructor guide me through what was going on helped cement the scripting system better than if I&rsquo;d tried to tackle it on my own. A lot of the maths concepts (vectors used for jumping and 3D world space movement) went completely over my head, and it honestly wasn&rsquo;t until last year when I revisited Unity (for an unrelated project) that I finally understood them. Despite its challenging interface and complex starting point, Unity&rsquo;s been what I turn to for any small game development for school projects now - it&rsquo;s a nicely popular, full-featured engine that I have enough experience in to bodge games together with.</p>
<h2 id="conclusion">Conclusion</h2>
<p>It&rsquo;s been a fun trip to navigate through what I have left of old projects and memories of when I was getting started - I should do this more often. What&rsquo;s been most interesting to personally note as I&rsquo;ve charted my journey through a minefield of various engines is how my annoyances and frustrations with each tool logically lead for a search for the next. Following the trail somehow leads all the way to where I am now - I think each of the tools I&rsquo;ve mentioned above has changed my approach to programming in a significant, though perhaps minor, way. Game dev was where I got started with real, applicable programming, and that makes it something I&rsquo;d like to at least consider dabbling around with in the future.</p>
<p>I&rsquo;ve fallen pretty far out of from game development now - the last time I touched it was for a school project, and before that, I hadn&rsquo;t even kept Unity downloaded on my system for ages. However, I think the cultures and communities that I somewhat illicitly joined (I was definitely under 13 when I made an itch.io, but we&rsquo;ll keep that one to ourselves) certainly made an impact - not just on my programming ability and game design skills, but also on my aesthetic, and the types of content I find appealing today. Or maybe it goes vice versa - perhaps the whole indie aesthetic drew me to the collaborative, close-knit sphere of game development. I could go on for ages about this, but I&rsquo;ll keep my discussion about my projects and inspirations to another post. I&rsquo;m excited to expand more on some of my old experiments, so look forward to that story when it comes out.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>We used to have to share laptops in grade 6, so while most people would fight over their assigned partner to finagle the most screen time, my friend and I agreed to use one computer and play together. Oddly more democratic and a lot less chaotic than most other arrangements, but that&rsquo;s besides the point. We were both into obbies, or glorified 3D platformers that generally had elaborate level design and often story levels, though our favourite, which I think was called Wipeout, was a pretty straightforward obby in terms of mechanics. One of us used to control the WASD keys, and the other would deal with jumping. To be honest, it was a lot more efficient than most teamwork I had since then, which might either say something about the sheer focus put into making precarious jumps, or something about effective organization.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>Well, I technically do have an archive of all of my work dating back roughly to 2019, which is when I just took all the work previously and zipped it up. However, I don&rsquo;t think half the project files would load properly with recent versions of the tools, and I can&rsquo;t be bothered to deal with the hassle of trying to find old releases and fix everything up for a few screenshots.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>Oh dear - I can tell this will be a footnote heavy post, but there are a lot of tangents I want to reminisce about, but I suppose you can skip these if you&rsquo;d like. Before picking up Javascript for Kids or Dummies or whatever it was, we used to use Internet Explorer at home, while the old clunky laptops at school were slowly transitioning to Chrome. Well, to get that spicy console inspector, the book directed me to download a copy of Chrome, which I remember thinking was the absolute coolest thing ever. I was <em>installing my very own web browser</em> - in short, I may as well have been in sunglasses and an oversized black hoodie: I was a <em>hacker</em>. The next time we used the laptops, I pulled out my new <code>alert()</code> and <code>console.log()</code> magic to prank all my friends. I think the moment when they realized that no, the FBI was not, in fact, watching them was one of the most inspiring moments for 9-year-old me - my first computer science clout.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>Dimensional Writing</title>
      <link>https://kewbi.sh/blog/posts/210516/</link>
      <pubDate>16 May 2021</pubDate>
      <author>Emilie Ma ◦ Kewbish</author>
      <description>On outlining and non-linear work.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>I can&rsquo;t seem to find it again, but earlier this month, I saw a video on Twitter of a proof-of-concept zooming essay model. It featured a straightforward explanation of some maths, but what really struck me was the layering of the concepts: each &lsquo;sentence&rsquo; or major phrase was underlined in a different colour, and when clicked, would expand into a longer, more intuitive layman&rsquo;s explanation of the topic. Not every word was expandable, but, for example, a sentence involving a couple formula definitions would lengthen into several more phrases developing the background knowledge. That &lsquo;second level&rsquo; explanation in turn contained a little bit of theory based on some other assumptions, so the reader could click again to expand key points in that explanation, and so on. I think this continued for three or four levels, and what I found most interesting was that this augmentation wasn&rsquo;t limited to individual phrases. If I recall correctly, one of the sentences involved the definition of some probability statistics,which was also touched on later in the paragraph. Clicking once on the first definition would expand topics later on in the writing, so the entire piece of writing had several levels of explanation &lsquo;advancement&rsquo;, going from expert complexity, with lots of notation and terms; all the way to something comprehensible by even those with no maths background.</p>
<p>Imagine the possibilities if these were extended to mainstream explanations and articles. With most blog posts (including mine, newsletters, and platforms like <a href="https://buttondown.email">buttondown.email</a>, this level of expansion and &lsquo;for later investigation by the reader&rsquo; is already possible with footnotes, but not quite to the level that was demonstrated in the GIF. Sure, you can link relevant resources and direct the reader to other related ideas, but with the Twitter example mentioned above, there&rsquo;s an extra dimension of presentation control. The author can fine-tune the level of jargon and generalizations present in each expansion, and has more power to present their essay or text as they&rsquo;d like it to be experienced.</p>
<p>If you read any Wikipedia article, you&rsquo;ll find that the first paragraph or so is a simple, clear summary of the topic at hand. Further links lead the reader to additional materials to increase their understanding of the depth of the topic, but skimming that first chunk is enough to get a gist of the topic itself. I&rsquo;m reminded of the idea of incremental learning<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, where instead of starting from complex theory step by step, you build a general understanding of the topic first. You might have to make a couple overall generalizations and assumptions, but the reader&rsquo;s left with a basic grasp of most of the topic. Then, each iteration of a text can build on the level before, clearing up a specific point or introducing new vocabulary. At each step in the process, the learner has a working understanding - it might not be the deepest or most accurate, but it&rsquo;s there. This works well with a sort of reversed version of the Twitter example (I&rsquo;ll just call it that since I forgot the actual name of the creator and can&rsquo;t find the video anymore) - using each expansion to further comprehension, not explain a point. Same concept of levels of knowledge, different structures.</p>
<p>This post is an exploration of my thoughts on theories that expand beyond just lists and dry bullet points, how to efficiently pursue idea connection, and how I approach the writing process. I really like the idea of infinite subexplorations and the &lsquo;zooming&rsquo; magnification present in that demo, and I don&rsquo;t entirely know why. Perhaps it&rsquo;s that it affords the reader more opportunities to customize the text to their own reading and comprehension levels, or maybe it&rsquo;s that everything is structured very logically, with an overall outline that can be (almost) infinitely expanded. Honestly, thinking back to the long <a href="https://kewbi.sh/blog/posts/201220/">digressions I had on click-holes</a>, I think it&rsquo;s just what appeals to my brain the most.</p>
<h2 id="non-linear-thinking">Non-linear Thinking</h2>
<p>This type of thinking ties basically the whole non-linear notetaking workflow and recent networked thought revolution together. Processing information in a way that doesn&rsquo;t involve immediately writing down final notes or content sequentially, or what I call non-linear thinking, is something that&rsquo;s been gaining traction recently. People praise it for mimicking how their brain works, and are surprised with how much less restrictive the entire system is. Thinking like this is inherent in models like the Twitter example, where each &lsquo;layer&rsquo; of text interacts with others but stays independent (for example, you can expand one set of definitions, while leaving another about a topic you&rsquo;re more comfortable with as-is).</p>
<p>There are many different manifestations of platforms that I think fall somewhere under the non-linear umbrella, such as infinitely nesting notes, linked systems like the ever-popular Zettelkasten or Roam Research graphs, and outlining tools. Tools available in this area might overlap in one or more of the areas above, but the main point is that things don&rsquo;t (have) to happen sequentially or from start to finish in one go. Thoughts can have intermediate layers, and iterations can stand alone while being incomplete and marked for further revision. Systems like this work to reorganize and restructure large amounts of information quickly and efficiently. Think back to trying to edit context-heavy sentences that draw on its neighbours to provide transitions and such, versus copy-pasting a bunch of bullet points around, while retaining any links those may have to other points. Off the top of my head, I can think of two main players in the space.</p>
<p>While I&rsquo;ve never used <a href="https://workflowy.com/">Workflowy</a> as a daily notetaking driver, I&rsquo;ve heard it described as one of the original implementations of non-linear thinking. One of its biggest selling points is the infinite nesting and pagination present in its model. Each point, termed a &lsquo;bullet&rsquo;, is an entire page - sort of a lower level of what&rsquo;s available in Notion and Roam. Each bullet can contain infinitely many other bullets, which opens up the possibilities for a lot of outlining-style and level-zooming type interactions. On its marketing page, it states that:</p>
<blockquote>
<p>No other document has an infinitely deep structure that lets you choose the exact focus level you want.
which directly echoes the whole layers concept that I think is an interesting platform to work with.</p>
</blockquote>
<p>Roam Research is slightly different, but has equal following (especially on Twitter, with the whole #roamcult shebang) and vaguely similar aims. Also one of the most popular tools for building networked knowledge bases, its main selling point is its whole graphs ecosystem and the blocks model that it so popularly uses. It&rsquo;s a cult favourite in the <a href="https://kewbi.sh/blog/posts/200607/">Zettelkasten</a> community, and has been lauded for completely revitalizing how people work. I&rsquo;ve also never personally used Roam, so while I can&rsquo;t speak directly to its apparent life-changing potential, I think it marks something interesting: the shift in awareness and prevalence of non-linear thinking tools.</p>
<h2 id="dimensional-dilution">Dimensional Dilution</h2>
<p>Over the past couple months at school, I&rsquo;ve realized that I keep returning to one &lsquo;way&rsquo; of doing schoolwork. Every time I create a new document for some homework assignment and finish all the setup of 12pt Times New Roman and double spacing, I start by copying over the guiding questions<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, which I find is a nice way of sparking thoughts and feeling a lot more productive than I really am. Oh well. Then, I start going through each question - and where I used to start by going systematically in with fully-fledged answers right away, I tend to just create a new bulleted list and come up with my main points and subpoints. I call this system outlining, and it&rsquo;s been pretty surprising how much it&rsquo;s taken over how I work.</p>
<p>Outlining is a bit of a one-dimensional version of the general ecosystem of networked and infinitely capable knowledge management tools. It dilutes (or well, not dilute, since the concentration of thought is the same, if not more) the complex process of creating full notes with perfect grammar and fully thought-out ideas into a more iterative process. I can quickly lay out each of my points, while not having to worry about grammar, coherence, or even having a proper idea. I tend to use super casual language, and just go ahead with stream-of-consciousness style writing, full of &lsquo;like&rsquo;s and &lsquo;whatever&rsquo;s and such. I don&rsquo;t have to worry about crafting each sentence until I&rsquo;ve actually developed my idea and figured out what I actually want to say, and it&rsquo;s a lot easier to work through several levels of iteration in the process. At this stage, things can still be reordered and ideas can be more developed very efficiently, and you&rsquo;re not locked in by any concrete &lsquo;work&rsquo;. Once I&rsquo;m done with my outline, I go back to restructure the text into full sentences and paragraphs, taking out all the slang, replacing repeated words, and refining the overall thoughts.</p>
<p>This kind of ties back to &lsquo;conversational notetaking&rsquo;: I find that with just typing out whatever I feel, I end up writing vaguely sentence-like thoughts, but they&rsquo;re still less focused on the wording and more on the idea. Feedback loops are very short, and I can work to develop my ideas more quickly than if I&rsquo;d have to go directly in with worrying about grammar and stressing over the correct language to use. Oddly, I&rsquo;ve found that I end up using most of the right words anyways, but I&rsquo;ve found that the writing process still goes by much more quickly than if I&rsquo;d started with an empty document and started grinding through full sentences. At each iteration of the outlining process, I have a full document - all my ideas at each point in time are laid out on the screen. An advantage of this method over the more linear ways of working is exactly that - the layering and successive development makes each step more efficient, and it definitely helps with avoiding that helpless feeling, since each thought is at a technically completed state with each stage of the system.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Strangely enough, even having found that my brain really likes the intermediary structures of outlining and the networked capabilities of a linked notes database, I still write blog posts the &lsquo;normal&rsquo; way: just start to end, composing full sentences as I go. I guess part of it is that articles here feel a lot more casual and stream-of-lightly-edited-and-filtered-consciousness here as opposed to more formal schoolwork, but I think it&rsquo;s also that I have a pretty good understanding of what I want to write about every time I sit down to work through a post. I don&rsquo;t have to struggle to structure my thoughts more, so while I lay out a couple of markdown headers with work-in-progress headers and put down a couple key bullet points, I largely just go ahead without a formal &lsquo;outlining&rsquo; process. I do jump around a bunch when sentences pop up to the top of my head, but I really have no idea why I haven&rsquo;t tried outlining a post the way I&rsquo;d write other work. Something to consider for the next post.</p>
<p>Speaking of posts, it&rsquo;s been a while, and it might continue to be a while. It feels weird to be apologizing (?) with each post, but I genuinely don&rsquo;t feel like I&rsquo;ve been putting in enough time to write, even when I do have ideas. School was expected to start winding down roundabout now, but it&rsquo;s started ramping up with final projects and such instead, and I&rsquo;m looking ahead to prepare as best I can for UBC. The next couple weeks look pretty packed, but I think I won&rsquo;t bother writing unless I make it a personal assignment, so I will certainly attempt to slot in more timeblocks in my calendar. This blog is a place I feel that I can sort of finally expand on and formulate my own thoughts, and it serves as a reminder of what I was thinking of each week in time - I&rsquo;d like to keep it up as much as possible. Oh well - next week we&rsquo;ll see what&rsquo;s going on, and we&rsquo;ll see if I come up with another couple coherent thoughts or not.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>I guess this is why the education system (at least in Canada) is structured in such a spiralling method, where we cover a topic, then go up a grade and do essentially the same thing, but in an ever so slightly more advanced way. I&rsquo;m not entirely sure why learning in layers (such as a textbook organized in the Twitter demo-esque way) is appealing while I find the spiral method awfully slow. I suspect it might have something to do with <a href="https://brianlui.dog/2020/05/10/beware-of-tight-feedback-loops/">tighter feedback loops</a> and having the ability to control your own speed in one (self-learning) but not the other (school). An interesting thought.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>Generally, most of my work ends up being stuff like reflections, essays, question / problem sets, which apply well to my system. With things that are more free-form, this process still works well, but there&rsquo;ll be an intermediate step of brainstorming actual creative directions and ideas instead of just copy pasting any requirements over.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>Problem Solving</title>
      <link>https://kewbi.sh/blog/posts/210425/</link>
      <pubDate>25 Apr 2021</pubDate>
      <author>Emilie Ma ◦ Kewbish</author>
      <description>On an ideal substrate for problem solving.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>I was working on a physics problem earlier today: something to do with a ferris wheel, centripetal acceleration, and calculating the range of something dropped at a certain point on the wheel. It wasn&rsquo;t particularly difficult, but it&rsquo;s a good example of the ways I&rsquo;ve had to wrangle with existing tools in order to work the way I&rsquo;d like to. Normally, when I complete practice problems, I don&rsquo;t bother writing out full equations or even a good amount of work, and just stick to a couple notes for formulas and things I&rsquo;ve moved around dashed out in Chrome&rsquo;s address bar. The rest of the arithmetic part ends up being bodged together in the omnibar&rsquo;s built-in calculator, which I find is more than good enough for most problems. When I&rsquo;m doing practice for myself, I&rsquo;m just focusing on if I can get the formula and the problem&rsquo;s givens somehow into the correct answer, and I know that if I properly tried, I could get the steps down anyhow.</p>
<p>However, this specific problem was for a friend who wanted a written solution, which meant that I had to work an actual diagram out. I didn&rsquo;t fancy trying to <a href="https://asciiflow.com">ASCII art</a> one together in Vim or something, so I turned to <a href="https://www.whiteboard.team/">whiteboard.team</a>, a free, no-account-needed (which is actually great, since most of the time, my boards are temporary and just for sketching out ideas and such) online whiteboard app. I&rsquo;ve found the lack of a cloud-sync or saving option while online not to be a problem at all - again, I&rsquo;m generally only keeping boards for a couple minutes for a screenshot. I sketched out the little wheel, slapped together a poorly-formatted, rather terse solution, snapped a screenshot, and sent it off. Close board, and go about the rest of my day.</p>
<p>Chemistry labs, physics problem sets, and calculus reviews have a couple things in common besides a general feeling of dread, accompanied at times by procrastination: they involve manipulating equations and working with data in ways that often don&rsquo;t work entirely well with existing tools. For example, with the physics problem example above, I&rsquo;d have loved to get a way to format equations with at least proper subscripts and integrate a quick calculator in the whiteboard, so I wouldn&rsquo;t have to keep switching between a myriad of new tabs with nothing but half-baked expressions in the omnibar and a Unicode reference page to copy out special characters.</p>
<p>I think tools nowadays tend to do either one thing very well à la the Unix philosophy, or several things half decently - something like the spread of things like Notion and other one-size-fits-all-problems software. On this specificity spectrum, I&rsquo;d still rather my tools tend towards the &lsquo;one thing very well&rsquo; side - I&rsquo;d like to have the power to do more complex things when I need to rather than be handrailled in. However, the problem with having a wide toolkit of highly specific programs tends to be sprawl, where the programs you need to have open to do one given thing increases as the required functionality gets split across more and more apps. As well, as bemoaned by most of the HCI / developer community, most tools lack a centralized standard, or even expose their internal API, to move information from app to app in a non-manual way. Especially when apps are very seemingly disconnected, requests for connections and integrations are very (understandably) niche, and end up serving only a couple users. Why can&rsquo;t I get a way to move equations between document formats, by, say, exporting a Word equation to clipboard for evaluation in Desmos or Chrome or whatever calculator, and then automatically copying the answer back into my doc? I doubt Word and Desmos / Chrome would ever build a proper two-way integration (rightfully so, but that&rsquo;s besides the point), so I either have to resort to manually repeating things like this, or have to change tools (well, apparently I can evaluate functions in Excel, but that&rsquo;s still a bit of a hurdle).</p>
<p>Maybe it&rsquo;s the influence of HCI Twitter and the amazing tools for thought I&rsquo;ve seen prototypes for on my timeline, but I&rsquo;ve been thinking a lot about a possible ideal mix of all these problem-solving softwares, or at least a combination of features that&rsquo;d personally benefit me best. With the amount of apps and things I&rsquo;ve tried out, I&rsquo;m surprised no one&rsquo;s thought about integrating the best of each of these tools, but hey, &lsquo;software to automatically evaluate and nicely format my equations in a way that&rsquo;s acceptable by my teachers&rsquo; is a pretty niche specification. Consider this thought-chain a speculative dream of what could have been (and hey, what might be, if I ever decide to take a stab at integrations myself one day).</p>
<h2 id="desmos-comes-close">Desmos Comes Close</h2>
<p>I&rsquo;d like start by extolling the virtues of <a href="https://www.desmos.com/">Desmos</a>, specifically focusing on their wonderful graphing calculator. With labels for notes, arbitrary point insertion, variable assignment, and immediate cell evaluation, it&rsquo;s become an invaluable tool, especially for formula- and repetition-heavy work. Though I sort of neglect the graph itself for most of my problem solving (save for in maths), I&rsquo;m pleasantly surprised at how full-featured and flexible the calculator itself is. Returning to the physics workflow example, I can pre-define constants and pre-program common formulas, while keeping changeable variables for mass, velocity, and other values that change between problems. This feature alone has saved so much time - instead of looking back for intermediate values or estimating them and losing precision, I can simply define them and reuse them in future calculations. Because Desmos also calculates the expression value immediately, I can get the convenience of the Chrome omnibar calculator with added annotation and manipulation powers.</p>
<p>Text labels have weirdly helped me think through problems and substitution more effectively than just trying to keep formulas, values, and all the next steps in my head. Part of it is that it&rsquo;s a lot easier to see where you are in a problem when everything&rsquo;s written out, especially when determining next steps. Visually seeing possible substitutions and figuring out what&rsquo;s next is plenty simpler when I&rsquo;m able to view both my notes and the calculations in one place. Previously, when using just Chrome, I&rsquo;d have to tab between calculations and formula notes, and it was honestly an information overload, as I had to keep each tab open to preserve intermediate values and could never find the work I was looking for.</p>
<p>Tables have also been especially useful in chemistry, with all the <a href="https://chem.libretexts.org/Bookshelves/Physical_and_Theoretical_Chemistry_Textbook_Maps/Supplemental_Modules_(Physical_and_Theoretical_Chemistry)/Equilibria/Le_Chateliers_Principle/Ice_Tables">ICE tables</a> we need to compose for our calculations. Calculating K values is an area where I find I need the guidance and actual visual information of a table, since there are way too many values to tackle to lay one out mentally. They&rsquo;re also super useful for applying formulas to a range of values without having to create a new Excel workbook for a problem that&rsquo;ll take a couple minutes - a past overhead that Desmos now obviates. While these tables are nowhere near as powerful as Excel cells, they&rsquo;re more than enough for calculating intermediate values and sketching out work.</p>
<p>Images, however, is one way Desmos falls short of what I&rsquo;d ideally need. I generally find that I need to diagram things for physics (or, at least, it&rsquo;s good practice), and trying to diagram anything other than a circle or a line is a lot more work than I&rsquo;d like. Sure, I can quickly draw something out in <a href="https://vectr.com">Vectr</a> and upload it, but I often find I&rsquo;d rather just go without and edit an explanation in in post, or forgo the diagram entirely. It&rsquo;s no fault of Desmos&rsquo;s - the entire point of the calculator is that it specializes in graphing and scientific computations, and it&rsquo;s gone above and beyond what I need from it. However, it&rsquo;d be amazing to figure out a way to combine both the power of the calculator and, say, something like Vectr or even a rudimentary version of whiteboard.team. Most of the drawing functions are redundant and overcomplicated, but even a box, circle, line, and arrow set of functions would be amazing. Oh well - it&rsquo;s outside of the scope or purpose of Desmos anyways.</p>
<h2 id="free-form-structure">Free-form Structure</h2>
<p>I find that my work in solving these science problems feels sort of like sketching, albeit perhaps on a digital canvas, rather than physical paper. When I&rsquo;m trying to work at my speed of thought, the most friction-free experience is generally with text, but diagrams and laying things out spatially can help sort out how to manipulate the formulas and such. I use the term manipulate, since it really does feel like you&rsquo;re slotting things in and moving terms around.</p>
<p>Highly limiting mediums like ASCII take away the aesthetics side of things, where I almost feel like I <em>need</em> to make something pretty and presentable. However, I generally don&rsquo;t want to make diagrams in ASCII, especially when there are more abstract shapes and arrows to work with (physics won&rsquo;t work, though chemistry might, since it&rsquo;s more text heavy) Especially when using more rudimentary tools that impose a certain structure, it feels that tools are pushing you against the decision paralysis presented by more complex and full-featured tools. That&rsquo;s why I tend towards quick scrawling even when solving problems - I&rsquo;d rather check that I can understand and produce the answer, rather than fuss over how to get a subscript in another subscript<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. Tools like Vectr are great for producing more polished drawings, but I end up spending much too long fiddling with fonts to get everything on a page to look nice and cohesive. whiteboard.team&rsquo;s sketching tools are quicker to work with, and while everything comes out looking a bit like an MS Paint attempt at modern art, it works for sorting the problem out quickly.</p>
<p>I guess this sort of touches on the presentation side of things, and the purpose of whatever I&rsquo;m sketchnoting. If it&rsquo;s something just for me, scribbling down a couple boxes with unlabelled arrows is generally enough for me to get the gist of what I need to do. However, if (like in the scenario I shard in the introduction) it&rsquo;s something I need to present for marks, I&rsquo;ll put more effort in. This &lsquo;effort spectrum&rsquo; is something that sort of changes the given toolkit I use for a given purpose.</p>
<h2 id="but-also-compatibility">But also, compatibility</h2>
<p>Speaking of changing the tools I use for a given purpose, I also have a minor point with file formats and such. Word, at least in my program, is the de-facto standard for documents and homework, so I&rsquo;m required to work with .docx files - even if I don&rsquo;t have to directly edit in Word, I need to produce something Word-parseable in the end<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>. Working with Word equations is not that painful of an experience - while my classmates seems to collectively agree that handwriting chemistry equations is much easier than typing them out, I find that working with digital equations is as fast as and as convenient as working on paper. Perhaps it&rsquo;s just a matter of medium preference.</p>
<p>However, one thing that I definitely find tedious is editing equations and working with calculations in the same workflow. When building a lab report, for example, I have plenty of sample calculations to transcribe, and generally data points for these equations source directly from raw data. I usually keep a separate Excel sheet with formulas I can easily drag around and apply to groups of cells, but it&rsquo;s a pain to try to copy around end values and work with calculations within Word itself. If I&rsquo;m not Excel-ing things, I keep a Chrome window open, and it&rsquo;s sort of frustrating to jump around to do calculations. It also introduces a new surface for error - I don&rsquo;t want to talk about the number of times I&rsquo;ve mispasted a value or missed an exponent by one.</p>
<p>It&rsquo;s relatively painless to fix things up if this wrong value happens at the end of a calculation, but when it&rsquo;s an intermediate value that other calculations depend on, reworking all my equations is an especially tedious task. This is when I tend to crave the variable recalculation abilities of Desmos, which immediately redoes all depending calculations, and Excel, where I can use cell references to keep values &lsquo;bound together&rsquo;. LibreOffice (/ Word) seems to have a variable function to define numbers and reuse them in the document, but I haven&rsquo;t found a way to run formulas on them, or integrate them in equation blocks.</p>
<p>I don&rsquo;t think it&rsquo;s worth making a point of introducing a new file standard for something like this (<a href="https://xkcd.com/927/">relevant XKCD</a>), and I also don&rsquo;t think it&rsquo;s worth bothering to ask if I can submit in a PDF or whatever quirky file format an &lsquo;ideal&rsquo; software would kick back. I wouldn&rsquo;t mind having to work with an intermediate file format, as long as it&rsquo;s fully integrated and exportable to Word (or LaTeX). I think these are pretty lofty goals, however, so I think I&rsquo;ll just have to live with the monotony of redoing a full set of equations four times over because I accidentally messed up in the first two sections - but that&rsquo;s a story for another day.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Whenever I&rsquo;m using only one of the above tools, it feels like I&rsquo;m missing something. With Word, I wish I&rsquo;d be able to calculate and substitute variables in equation blocks themselves. With Desmos, I lack the image and diagram manipulation features that help visualize problems at times. With whiteboard and other diagramming software, I lack the ability to format and present my work later, and also don&rsquo;t get any of the variable manipulation that streamlines my entire calculation workflow. I think my ideal scientific problem-solving software would be something like a combination of:</p>
<ul>
<li>Desmos&rsquo;s variable system and instant calculations</li>
<li>whiteboard.team&rsquo;s / Vectr&rsquo;s diagramming capabilities</li>
<li>Word&rsquo;s layouting, formatting, and text hiding, and</li>
<li>(maybe, would be nice to have) Vim&rsquo;s keyboard-driven philosophy</li>
</ul>
<p>I could replicate several parts of this system on physical paper, but again, I&rsquo;d be losing out on the variable calculation and the digitization aspects of my workflow. For me, it&rsquo;s also a lot easier to type things out, both in terms of remembering the solution work and efficiency (I type much more quickly than I can write). I&rsquo;d also prefer to figure out a toolkit digitally that can continue to work in the future, if the digital aspect does end up being a requirement sometime in university.</p>
<p>In terms of developing things like this, I&rsquo;m not entirely sure, but it might be possible to wire together Word extensions, a Desmos API, and some sort of diagramming API to make inserting and formatting work into Word more streamlined - I haven&rsquo;t done much research into the possibility. I think this might have something to do with the whole <a href="https://www.geoffreylitt.com/2021/03/05/bring-your-own-client.html">Bring Your Own Client</a> idea, where there&rsquo;s a need for more software to open up to remixing and inter-app data flow first. I&rsquo;d like to investigate possibilities and other tools that&rsquo;re easier to mix together in the future as well, especially tools that are simpler and more text-based. Developing a toolkit for scrap work and raw calculations is still a higher priority for me than Word integrations, but the whole file format thing is still a struggle, especially since most of the work I do is for school, and I need to follow assignment requirements.</p>
<p>I&rsquo;ve been putting off writing this post for a while, and I think I&rsquo;ve sort of lost the rhythm of writing weekly. Part of it is the homework (that they <em>did</em> say was supposed to decrease roundabout now, but oh well), and part of it was a lack of coherent thoughts. I&rsquo;ve went back and built a list of some ideas for future posts just now, so hopefully I&rsquo;ll be able to get back to writing more regularly. It&rsquo;s interesting how writing and outlining something like this sort of cements all the ideas and makes it clear what I personally think, so I guess that&rsquo;s a nice hidden benefit of writing. Writing this post actually inspired a different one that might come out in the near future, but we&rsquo;ll see how much time I have with school and such.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>I use LibreOffice, since booting back to Windows is too much effort to bother with on a regular basis, and Word on Wine was both a pain to set up and to work with, so some of the instructions for Word didn&rsquo;t apply. In the end, apparently you&rsquo;re supposed to wrap the part of the equation to subscript with a set of curly braces. You can then apparently nest to whatever depth you&rsquo;d like to - a bit of a late discovery, but hey, late&rsquo;s better than never.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>Apparently this changes to LaTeX in university, so there&rsquo;s something else to consider.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
