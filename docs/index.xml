<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Yours, Kewbish - a collection of </title>
    <link>https://kewbi.sh/blog/</link>
    <description>Latest Yours, Kewbish posts</description>
    <managingEditor>(Emilie Ma ◦ Kewbish)</managingEditor>
    <lastBuildDate>Sat, 25 Dec 2021 19:41:25 -0800</lastBuildDate>
    
	<atom:link href="https://kewbi.sh/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Year of Articles</title>
      <link>https://kewbi.sh/blog/posts/211226/</link>
      <pubDate>25 Dec 2021</pubDate>
      <author>Emilie Ma ◦ Kewbish</author>
      <description>On tracking (almost) every article I read this year.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Early in January this year, I had a bit of a realization I was spending too much time reading blog posts. That, combined with a typical New-Year&rsquo;s resolution-y mood, resulted in me <a href="https://kewbi.sh/blog/posts/210207/">tracking every single article I read that month</a>. I&rsquo;d been reading a bit about the whole <a href="https://reddit.com/r/QuantifiedSelf">Quantified Self</a> community, and thought that while I wouldn&rsquo;t go as hardcore with collecting data on myself, I&rsquo;d take a stab at recording and rationalizing my leisure content consumption. Armed with a shabbily-patched-together Chrome extension and a hacky Google Form, I sorted out a system where I&rsquo;d hit a keybind to record the URL and timestamp of any post I was reading. This experiment mostly aimed to give me a sense of what my reading habits were like, and give me a fun data visualization at the end. Well, I guess my muscle memory of hitting Alt-T every time I stumbled across anything interesting on Twitter persisted, because I ended up continuing this experiment for the whole year.</p>
<p>I wrote out a more comprehensive list of &lsquo;rules&rsquo; in the January blog post, but the gist of it was that: I wouldn&rsquo;t include forum sites, programming help, quick Googles for one-off topics. I would, on the other hand, include the jumping-off points of deeper rabbit holes, any long and short form articles, and a new addition to the criteria - sometimes also lengthy / interesting Twitter feeds. Data was collected with my custom Chrome extension (source not available, but it just programmatically pushes to a central Google Forms - more about this was in the January post). For today&rsquo;s analysis, I pulled all the article information I had from the very beginning of this year (~6 January) to about the 20th of December. I&rsquo;d say that&rsquo;s a pretty good spread of data, and I think we&rsquo;ll be able to capture some interesting trends that I already expect. Last year, I talked a lot about information aesthetics, and I think that applied even more so this year. I know I had less time to read starting in the fall, so I gravitated more heavily towards existing sources of cool writing and avoided more exploration.</p>
<p>So, without further ado - I present to you, A Year Of Articles; or, as I like to call it, Kewbish Wrapped.</p>
<h2 id="the-hypotheses">The Hypotheses</h2>
<p>As all good experiments do, I started by considering some of my hypotheses. In January, I&rsquo;d found that towards the end of the month, I ended up reading less (which was sort of my goal back then - I wanted to reduce mindless clicking and content consumption). With regards to time, I usually had a couple big spikes in reading during the very beginning and ends of my day. I also found that I tended to read more on weekends - reasonable, as I usually had lots more time to scroll HN or Lobste.rs on the weekends. I liked that I was able to build up a notetaking system and a library around what content I&rsquo;d read, and also that I&rsquo;d be able to find interesting articles that I&rsquo;d picked up over the last month.</p>
<p>Over the past year&rsquo;s data, I expected I&rsquo;d keep finding most of these trends. Most of the above findings, I reasoned, would apply until at least summer, which was when I kind of both fell off tracking and started reading more casual articles (i.e. ones I didn&rsquo;t track) a bit more. Around September, I started really dialling in instead on optimizing my learning workflow for university, and really didn&rsquo;t have the time to read much anymore. My Matter<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> backlog started growing quite a bit, which I suppose would speak to the fact that it&rsquo;s easy to use, and became my consumption &lsquo;source of truth&rsquo;. That&rsquo;s good, and what I intended. However, I just wasn&rsquo;t finding the time to regularly process it, and I remember that starting a bit of a feedback loop of intimidation of going through it. As such, I probably expect that around the beginning of the school year - when I remember my backlog starting to pile up - there&rsquo;d be a sharp decrease in reading.</p>
<p>I won&rsquo;t be discussing each and every URL I read the past year here, but in terms of more meta-analysis, I expect to see a bunch more articles about tools for thought, planning, and meta-productivity in general. I still expect that my content &lsquo;diet&rsquo;, as people apparently put it, will be largely composed of the same Twitter-adjacent people I follow: tools for thought leaders, indie makers, and a rather niche subset of the larger SWE industry.</p>
<h2 id="the-data">The Data</h2>
<p>In total, in 2021 (minus a week or so in December), I read <em>535</em> articles. (174 of these were from the initial January experiment). That averages out to 1.54 articles a day - a rather reasonable number, and roughly what I expected given my binge-reading during the beginning of the year and my lack of reading towards the latter half. This graph shows the spread of the articles over the day of the year, with a rolling three-day average:</p>
<figure><img src="https://i.imgur.com/B993l2F.png?1"
         alt="Figure 1. A graph showing articles read per day"/><figcaption>
            <p><em>Figure 1. Articles read per day.</em></p>
        </figcaption>
</figure>

<p>You can see a very sharp spike near the beginning of the experiment in January - my running average then was about 6.69 articles per day, according to my previous writeup. The reading activity sort of bottoms out around around June and July, where the articles read a day became more consistent (when averaged). As I expected, and as I observed in January, there&rsquo;s still obvious spikes within each month, which I expect are from my weekend reading sprees. I&rsquo;m sort of surprised that come August and September, I tended to read <em>more</em> articles than in the early summer, even though I&rsquo;d have expected that I was spending more time adapting to university work. This &lsquo;second spike&rsquo; might have lined up when I started to write brief summary notes again on the articles I&rsquo;d read - a habit that didn&rsquo;t quite continue through to October or November.</p>
<p>I also crunched the time data for each article read and came up with a graph showing the most frequent times I&rsquo;d read articles:</p>
<figure><img src="https://i.imgur.com/CCK9hvP.png?1"
         alt="Figure 2. A graph showing time distribution for article readings per day."/><figcaption>
            <p><em>Figure 2. Time distribution for article readings per day.</em></p>
        </figcaption>
</figure>

<p>In the beginning of the graph, you can see a very heavy trend of morning reading sometime between 0800-0900. This persisted, though to a lessening extent, throughout the year. There&rsquo;s also a decently frequent trend of night-time reading around 2000-2100, which stopped somewhere in mid-March, according to the graph. I think this graph shows some of the changes in my reading habits well: during the beginning of the year, after the initial January spike, I was quite systematic and rigorous about what I was reading and when. Through the summer and into the school year, however, I ended up fitting articles in during my breaks and other in-between time, so there&rsquo;s not as clear of a trend later in the year.</p>
<p>I also thought it&rsquo;d be interesting to briefly look at the most frequent websites that I read from. The most frequently read URLs and their number of occurences were:</p>
<ul>
<li><a href="https://thesephist.com">thesephist.com</a>, at 16 articles</li>
<li><a href="https://paulgraham.com">paulgraham.com</a>, at 13 articles</li>
<li><a href="https://every.to">every.to</a>, at 11 articles</li>
<li><a href="https://lesswrong.com">lesswrong.com</a>, at 8 articles</li>
<li><a href="https://ben-evans.com">ben-evans.com</a>, at 7 articles</li>
<li><a href="https://bulletjournal.com">bulletjournal.com</a>, at 5 articles</li>
<li><a href="https://nesslabs.com">nesslabs.com</a>, at 5 articles</li>
<li><a href="https://evantravers.com">evantravers.com</a>, at 4 articles
Medium and Nitter links weren&rsquo;t included in the above, though they rounded out to 8 articles each. I also did a bit of manual checking to get rid of the unique-URL problem with Paul Graham&rsquo;s blog, where I was somehow tracking both <code>www</code> and non-<code>www</code> versions of the URL. There were lots of other creators in the list with 2-3 posts each as well, but those were my top 10 URLs. I&rsquo;m pretty unsurprised with this list: I would have likely been able to name at least the larger blogs in this list. It&rsquo;s actually interesting to note that the majority of the list (not listed) has only 1-2 posts, reflecting a more indie / niche posting streak that I didn&rsquo;t return to as frequently.</li>
</ul>
<h2 id="the-findings">The Findings</h2>
<p>I think the trend that I overall spent much less time reading throughout the year is very obvious, but I&rsquo;d like to dive into a couple possibilities besides &lsquo;school stress; no time&rsquo; that could have contributed to that. One, Findka, a now defunct service that worked to automatically crowdsource recommendations for essays and articles to read, shut down sometime early this year. I shouldn&rsquo;t say shut down - just pivoted to their new work with email newsletters instead (more about that later). Previously, before using Findka, I&rsquo;d relied on the front page of HN or CS Reddits or Twitter communities. With Findka, I was able to pretty consistently find interesting new content, without doing much searching myself. As Findka&rsquo;s recommendations died down, I simply didn&rsquo;t have many recommendations for articles to read, and the friction of going to find new ones just to satisfy my article cravings was too much. Two, I started shifting the time that I&rsquo;d previously allocated to reading long or short-form articles towards exploring communities and individuals on Twitter. I started using Nitter much more, and I think that this new stream of information somewhat replaced what I was getting from Findka. As a result, I ended up consuming more short-form tweets and exploring thoughts there. Of course, I didn&rsquo;t track individual tweets, just occasionally long threads that I&rsquo;d come across, but this is what I&rsquo;d suspect from what I remember over the past year.</p>
<p>I don&rsquo;t feel like there&rsquo;s anything really to change about these reading habits. I&rsquo;d like to perhaps dedicate more time in the coming year to read long-form articles and tackle some of the backlog that&rsquo;s built up over finals season again. One of my main blockers was that I didn&rsquo;t have easy access to my backlog while on my phone or anywhere not on my laptop: Matter tracks everything through a GitHub issue system, and I&rsquo;m usually not logged in on mobile. Maybe a feature I&rsquo;ll start working on is a custom URL just for me that links to my GitHub token and would let me access my backlog through Matter when on mobile, but there&rsquo;re some security things that I&rsquo;d probably want to iron out better before I go live with that. Being able to spend too much more time on reading is probably wishful thinking, but hopefully since I&rsquo;ll keep it mind more I&rsquo;ll also end up doing it more.</p>
<p>Some other changes I&rsquo;d like to consider next year are expanding my content sources a bit, with regards to both creators and in topic. Right now, as you can see with my top few URLs, I end up returning to the same couple creators and the same few areas of content: productivity, HCI, and theoretical CS if I feel intellectual. It might be nice to move away from overall content aggregators like HN or Lobste.rs, and revisit Findka&rsquo;s new offering of a newsletter forwarder called <a href="https://thesample.ai/">The Sample</a>. I found that Findka gave me a decently nice breadth of articles that were all tailored to my general preferences for voice, tone, and topic. One of my friends is working on something really cool in this recommendation / discovery space as well, and I&rsquo;ve been pestering them every so often to see what their work&rsquo;s looking like. Another system I&rsquo;m following is Paul Bricman&rsquo;s <a href="https://paulbricman.com/thoughtware/lexiscore">Lexiscore</a>, which aims to combat information overload and tweak your digital content &lsquo;diet&rsquo;. Tools like that provide content that&rsquo;s more immediately interesting to me, and I end up spending less time scrolling endlessly looking for interesting things. I&rsquo;m cognizant of possible echo chamber effects if I rely too heavily on recommenders that are tuned directly to my liking, but if I only have so much time for reading, I may as well enjoy it.</p>
<p>And lastly, I had a system early in the year where I&rsquo;d pull all the articles from my reading tracker at the end of each week and briefly summarize it. I&rsquo;d built up a list til about the middle of the year of annotated links - noting anything interesting about the post, specific quotes or lines that I thought were interesting, or keywords that I might be able to link to when chatting with friends about similar topics. I ended up not doing that over the latter half of the year, mainly due to time constraints again. If possible, I think that annotation process made my reading a lot more active and meaningful, so I&rsquo;d like to get back into it. I liked looking back over a week&rsquo;s worth of reading and seeing what I tended towards and what interesting ideas others had around me, so perhaps I&rsquo;ll pick this up again in the New Year.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I think this was a pretty fun self-experiment to run over the past year, so I&rsquo;ll likely refresh my spreadsheet and form architecture and run it again next year as well. It&rsquo;s like a Year In Review retrospective that some developers do crossed with the data analysis and whimsy of Spotify Wrapped. I personally like meta-analysis content like this, so look forward to the possibility of a Kewbish Wrapped 2022 late next year. And while today, I mostly discussed the consumption of content, I&rsquo;ll be writing up a post about my content creation processes and how those have changed sometime in February<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</p>
<p>I&rsquo;m writing this late on Christmas Day, so happy holidays, for those of you who are reading. I&rsquo;m excited to finally have a break from formal, structured school, and some time for myself to tinker around with some dev stuff as well as pre-read for the next term. I&rsquo;m still waiting for some of my grades to come out, which isn&rsquo;t particularly fun, but I think I&rsquo;ve mentally disengaged with my grades, at least for this term. What&rsquo;s done is done, and I may as well focus on how I can make the next term as efficient and satisfying as possible instead. I&rsquo;ve finally finished up <a href="https://adventofcode.com">AOC</a> earlier today, so I plan to use that chunk of time that I&rsquo;d previously dedicated to bodging my way through solutions each morning to maybe doing some more writing. I enjoy sitting here and brain-dumping all of the musings I have sometimes, so hopefully I&rsquo;ll have some more articles and thoughts to share in the New Year.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>The tool I use to track all my &lsquo;to-reads&rsquo; and RSS feeds, more about it <a href="https://kewbi.sh/blog/posts/210207/">here</a>.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>The first blog post ever on YK was published on Valentine&rsquo;s Day around two years ago - this was mostly a personal joke à la &lsquo;haha look at me I&rsquo;m so lonely and nerdy that I wrote about my open source instead of touching grass and having fun what a cs kid&rsquo;. But I think that time of year&rsquo;s actually a bit better for retrospective / new-year&rsquo;s content, since by then any resolutions you&rsquo;ve stuck to have had enough time to sink in and develop, and any that you haven&rsquo;t managed to keep up have long been ditched.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>Least Common Denominators</title>
      <link>https://kewbi.sh/blog/posts/211219/</link>
      <pubDate>19 Dec 2021</pubDate>
      <author>Emilie Ma ◦ Kewbish</author>
      <description>On an atomicized software culture.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>A while ago, I finally bit the bullet and picked up a copy of <a href="https://www.calnewport.com/books/digital-minimalism/"><em>Digital Minimalism</em></a> at the library. It&rsquo;s a hugely famous book by Cal Newport, a popular (and for decently good reason) productivity author and CS professor. If you haven&rsquo;t heard of his philosophies surrounding technology usage and mindful technologism, you might want to go take a look at his work yourself. <em>Digital Minimalism</em> specifically focuses about social media and connecting with others virtually. A quick summary of <em>Digital Minimalism</em>: social media is often used for things that aren&rsquo;t useful, but &lsquo;could be&rsquo; - and that &lsquo;could&rsquo; is what hooks us to our devices in spite of ostensibly more productive and meaningful activities. The book centers around how to be more intentional about your digital footprint, media consumption, and online interactions with others.</p>
<p>At a very high level of abstraction, Newport discusses how we can make the tools we use less noisy, and to adapt them to work for us, not the other way around. You might recognize this phrasing, for good reason - it&rsquo;s often used when discussing tools for thought. That&rsquo;s what I wish to think about in this article. His philosophy is applicable not only to online connections and the <a href="https://kewbi.sh/blog/posts/201108/">endless maze of pings</a>, but with software as a whole as well. I&rsquo;ve discussed <a href="https://kewbi.sh/blog/posts/210124/">hyperpersonalized</a> software quite a few times on this blog, but Newport distills many of the ideas that orbit around that sort of artisan-created, artisan-facilitating software. However, while his advice centers around the <em>use</em> of social media and tools, I think there&rsquo;s a lot to be said about how we can <em>create</em> software in a way that pushes more worthwhile consumption and creation.</p>
<h2 id="but-what-if">But What If?</h2>
<p>In the book, Newport discusses a sort of &lsquo;but what if?&rsquo; logic that people tried to apply in order to push him towards getting on social media (which he had not, and has not done). He recalls that people often told him that he should consider joining social platforms, and when he asked why, they sort of universally came up with a &lsquo;but what if it&rsquo;s useful?&rsquo;, and a &lsquo;I&rsquo;m sure you&rsquo;ll discover something on [XYZ] that you&rsquo;ll find really meaningful&rsquo;.</p>
<p>I&rsquo;ve felt this way a lot myself. Two big examples of this that come to mind are Twitter and Notion / Roam / Obsidian. With Twitter, a lot of people in my friend circle&rsquo;ve hinted at the magical wonders of Twitter, and let me know that I&rsquo;d likely like it there. This is a bit tricky to unpack, because I know I would find it useful. I really do want to immerse myself in communities of people who are doing things much cooler than what I&rsquo;m working on, and be inspired<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. On Twitter, there&rsquo;s a sense of having a space to share my thoughts and ideas with a further group of people that I&rsquo;d really value. But on the other hand, I have a feeling I&rsquo;ll be constantly pulled into the discussion there. Right now, I do consume a decent bit of Twitter material with my <a href="https://kewbi.sh/blog/posts/210110/">Nitter</a> setup. It&rsquo;s sort of like having write lock - I can &lsquo;read&rsquo; from these systems fine for now, so I&rsquo;m trying to wean myself off the feeling I want to contribute directly there too yet. As Newport points out, I don&rsquo;t know what I&rsquo;d like to get out of Twitter. There&rsquo;s a bit of a circular dependency: without having been on the platform, I can&rsquo;t gauge what value it&rsquo;d return for me, and so I don&rsquo;t use it.</p>
<p>The same goes for Notion or other notetaking software. Each system has its own benefits: Notion, its centralizability; Roam, its database and linking model; Obsidian, its file-based focus. With notetaking tools, I feel less of what Newport describes, less of the &lsquo;what-if&rsquo; effect. I think it&rsquo;s because I&rsquo;ve felt the inertia of wanting to stay with my own systems, and because I&rsquo;m passionate about and know what I&rsquo;m doing with my knowledge management workflows, at least for now. Notion, for examples, brings a lot of maintenance and workaround effort - sure, I&rsquo;ve seen people organize their whole lives in it, but for their aesthetic setups they have to bring in custom icons and lots of layered filters. Could the same thing not be accomplished with separate notetaking, calendar, finance management, and habit apps? This isn&rsquo;t to say I don&rsquo;t have the same issues in the terminal, but I feel like I&rsquo;ve learned to cut down on it and recognize when there are better tools, cutting down on my &lsquo;what-if&rsquo; effect.</p>
<p>I recently had a conversation with a friend about <a href="https://github.com/Eeems/oxide">Remarkable launchers</a> or something - he was discussing with another friend why they&rsquo;d want to add a launcher to their tablet. Someone asked him what the point of the launcher was, and what he&rsquo;d personally used it for. He couldn&rsquo;t come up with any concrete examples (which is fine), but I jumped in and pointed this out. He was recommending a software without having an actual real use case for it, with the same &lsquo;but what-if&rsquo; thinking that seems to be so pervasive when working with software workflows.</p>
<h2 id="least-common-denominators">Least Common Denominators</h2>
<p>All this is to say that these recommendations are definitely valid, but in a different way. In <em>Digital Minimalism</em>, Newport specifically advocates for digging deeper into why you want to use a specific social media platform - for example, he notes a discussion he had with a client who realized he wanted to use Instagram to keep connections going with his childhood friends and see visually what they were up to. But Newport pushed him further, and asked if Instagram was the most productive and efficient way to engender that connection. Text messages and SMS photos would accomplish virtually the same thing, cutting out the distractions and even encouraging more meaningful discussion over thoughtless &lsquo;like&rsquo; interactions. And though messages were good, an in-person visit would add even more! Newport guided the client to go from what they wanted (connection) to a less distracting and more personable way to achieve the same thing (visits and text messages). This isn&rsquo;t applicable to all uses of social media and software, but there&rsquo;s an interesting idea I want to pull out in there.</p>
<p>What if we created software in a way such that we could get to exactly wanted, without all the other distraction and features that aren&rsquo;t useful to us. I thought of the term least-common-denominator software for this, trying to capture the idea of having the least possible component to do what you wanted while being composable and not having other features that you weren&rsquo;t interested in. Users can then select the exact feature set that matters to them, instead of having to settle for something that does too many things without optimizing for their own use-case. This form of software would break components and systems down into their least common denominator bits - atomic scripts that can do their job and just that. In my Twitter example, I&rsquo;d retain some ability to interact with people that I Twitter-simp over, without the noise and addiction and spam that&rsquo;s also on there. With Notion, I&rsquo;d be able to have a centralized source of truth database while having multiple views for everything, but also avoiding the performance issues and annoying workarounds people often have to use. There&rsquo;s got to be some reasonable limit for this granularity and control, but beyond that, why can&rsquo;t we have more composable systems?</p>
<p>For the developers among you, this&rsquo;d sort of reflect an extended view of the Unix philosophy applied to modern-day software systems. Do one thing, and do it well: so the Unix philosophy reads. Currently, most software is focused on doing multiple things, and doing them all decently. I hate to rag on Notion so often, but it&rsquo;s the perfect example - infinite capabilities, but each complicated system requiring many workarounds and hours of setup. Least-common-denominator software would optimize for its one use case and for sending its output to other tools. What I envision is something like the complicated multi-command pipes in bash, with commands passing data back and forth, only with a much better user interface.</p>
<p>Another idea that I&rsquo;d like to touch on is that least-common-denominator software wouldn&rsquo;t be like SaaSes or the constantly updating tools we use today. Of course, they&rsquo;d be maintained, and bug-fixes would pop up when needed, but I think having more atomicized software incentivizes it to be <em>done</em> much more quickly. Nowadays, if a product or tool or library is declared <em>done</em>, with work remaining only for issues and such, people tend to mentally mark it as deprecated and move onto the next shiny thing. But because these atomicized components wouldn&rsquo;t have a lot of interaction to do, there wouldn&rsquo;t be an endless backlog of features to work through, nor an increased surface area for bugs to pop up - again, they&rsquo;d do one thing, and do it well.</p>
<p>I won&rsquo;t go too far into what this sort of software system would look like, mostly because I haven&rsquo;t really figured that out. As to what technologies might be used: I&rsquo;ve mentioned <a href="https://www.inkandswitch.com/cambria/">Cambria</a> in a previous post about moving metadata around and translating data between sources. Tools like this to automate and facilitate data manipulation&rsquo;d likely be a central factor of this type of system, as well as open-source and transparent ways to organize and host data.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Though we can dream, I also don&rsquo;t realistically think a large-scale shift to this sort of minimal yet composable software&rsquo;ll get very far. For one, companies will certainly not stick to their core products - each big tech company:tm: has its countless failed / attempted / halfhearted ventures out into side businesses. Why wouldn&rsquo;t they want to monopolize user&rsquo;s time, and find new ways to appeal to their software / tool inertia to keep them with their existing software? In Newport&rsquo;s book, he writes that it&rsquo;s not very profitable for businesses to reduce their distractions. In this case, it&rsquo;s not very profitable to keep things minimalist and stop mashing new features into the app. As I&rsquo;ve mentioned before, standardization and the data processing aspects of these components would also get pretty complicated, and it&rsquo;s not clear what such a distributed model of software would look like without having a more open culture of software usage, where people can control their own tools and information.</p>
<p>I used to laugh at my friends when they&rsquo;d talk about whatever apps or whatever aspect of their systems being &ldquo;bloat&rdquo;<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, but I&rsquo;ve started to appreciate why they&rsquo;re pointing it out. It&rsquo;s a pattern (I won&rsquo;t say problem) that&rsquo;s pretty widespread across software as we use it today, and I&rsquo;d like to think that reinventing how we work with tools and software could help change that.</p>
<p>I&rsquo;m writing this during finals season, in between studying for separate exams and cramming practice papers. (Well, now that I&rsquo;m editing this conclusion, I&rsquo;ve got through nearly all of my exams already, but oh well.) I had a weird realization a month and a half before the end of term that it was <em>a month and a half before the end of term</em>, and I started trying to work on my study guides and come up with a plan of attack. I&rsquo;m glad I started early - I don&rsquo;t think I properly realized just how much there was to do, nor how much time it&rsquo;d take to get through all the practice materials I&rsquo;d want to tackle. I backloaded things weirdly, having a lot of my review and study sessions planned just before finals week started, and now I&rsquo;m slightly suffering my way through all of it. But lessons learned for next time, and I got through most things fine.</p>
<p>I also recently had my first couple of software engineering intern interviews ever, which was both really exciting and incredibly nerve-wracking. (If anyone working at a company I&rsquo;m interviewing at right now reads this, I assure you that I&rsquo;m probably overly enthuastic about the possibilities of working there! I assure you I&rsquo;m not normally this&hellip;rambly about software.) It&rsquo;s kind of scary that an actual company is considering taking me on to do work for them, and that I could potentially be making a very real impact to products. Things seem to be going well, but the sunk-cost is kind of kicking in, and with every round, I keep getting more and more nervous that they&rsquo;ll just decide I&rsquo;m not a good fit and not consider me. But such is life, and I&rsquo;m looking forward to my next couple rounds. Fingers crossed!</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>One friend in particular describes it as an online <a href="https://kk.org/thetechnium/scenius-or-comm/">scenius</a>. We&rsquo;ve (me and this particular group of friends) talked a decent bit about finding IRL sceniuses (ironically on an online chat). I guess this pull towards online groups stems from the fact that I don&rsquo;t really have that experience in-person right now. Oh well, perhaps I&rsquo;ll stumble into some quirky CS friend groups soon, but for now, I do have my digital scenius influences (you know who you are).&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>If you know, you know. I can literally hear the person I&rsquo;m thinking of saying this as I write it.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>Metadata and You</title>
      <link>https://kewbi.sh/blog/posts/211114/</link>
      <pubDate>14 Nov 2021</pubDate>
      <author>Emilie Ma ◦ Kewbish</author>
      <description>On metadata, its dimensions, and its impacts.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Recently, I&rsquo;ve started pondering the tools-for-thought phenomena again, but perhaps in a more meta way. From what I&rsquo;ve noticed on Twitter (at least for the short amount of time that I&rsquo;ve been checking content from it), there&rsquo;s been a trend over the past couple years with the explosion of popularity of apps like <a href="https://roamresearch.com/">Roam Research</a>, <a href="https://obsidian.md/">Obsidian</a>, <a href="https://logseq.com/">Logseq</a>, <a href="https://www.notion.so/">Notion</a>, <a href="https://workflowy.com/b/">Workflowy</a>, <a href="https://ankiweb.net/">Anki</a>, or the myriad of other apps that solve a major pain point for a lot of people: the management, and meta-management of knowledge. Here, I&rsquo;d like to focus on the meta-management aspect of this a bit. I&rsquo;ve noticed a lot of the tools rapidly gaining popularity and (appear to be) pushing the forefront of human-computing interfaces have a shared trait in common: they&rsquo;re all in essence ways to manipulate metadata.</p>
<p>Metadata and knowledge can sometimes blend together, likely a result of metadata-deficient systems where a majority of the knowledge was spent on cross-labelling itself in lieu of proper metadata. When I reference metadata, I&rsquo;m talking about not the juicy knowledge itself, but the trail of breadcrumbs leading to it - the labels, the categorizations, and the aliases. Things like &lsquo;time last modified&rsquo;, &lsquo;time created&rsquo;<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, and other custom labels all fall under the umbrella of metadata. There&rsquo;re also actions associated with that metadata, like advanced regex-based searching, filtering by tag or label, alternate &lsquo;slices&rsquo; of data. The apps I&rsquo;ve mentioned above all extend or have significantly innovated and built features connected to metadata. Roam, likely one of the more popular examples, has their famous tag and linking system. Click on a little hashtagged bit of context, and you&rsquo;re teleported to a page full of other mentions of the same topic - the very alternate &lsquo;slicing&rsquo; of data I&rsquo;ve just mentioned.</p>
<p>Metadata is the apparent solution to the categorization problem, and what appeals so powerfully to the part of the human brain that craves neat little boxes. The issue with software is that it&rsquo;s generally not <a href="https://kewbi.sh/blog/posts/210124/">hyperpersonalizable</a>. Settings can&rsquo;t be tweaked in every single little way that all the different workflows and people using the app demand - core feature development would stall to a standstill, and devs would spend more time implementing personalizations than concrete tools. But people still want to create their own little classifications, and make the app <em>theirs</em>. Metadata here is the fix - at least, for most people. Some users might feel overwhelmed (look at the hours of &lsquo;get started with Notion&rsquo; videos and the pages of questions about certain tweaks), but on average, I&rsquo;d say that most people generally approve of this ability. Less personalization-focused people can simply overlook the metadata, or implement just the core basics. Power users, on the other hand, can use custom fields and metadata to their heart&rsquo;s content - just look at the magic people pull off with Notion databases.</p>
<p>I&rsquo;ve been thinking a lot recently about tools for thought, and their first principles. What are the majority of lauded apps rooted in? What trends and tendances is society looking for in popular apps? In this post, I&rsquo;d like to share some of my realizations (well, that&rsquo;s a strong word) about the space and the role metadata plays in our knowledge interactions.</p>
<h2 id="manipulating-the-meta">Manipulating the Meta</h2>
<p>Apps do some combination of three key things with metadata: write it, connect it, and allow it to be synthesized and searched for and molded. For example, take something like <a href="http://trello.com/">Trello</a>. You can tag and label your to-dos (writing metadata), link them to one another across boards (connecting it), and have high level overviews and statistics about your project (synthesis). This last bit about super-synthesis is important, as it creates a new level of meta. With that, there&rsquo;s a possibility to invest in linking up metadata about the metadata, and that&rsquo;s where the potentials for new tools and new innovations lies.</p>
<p>In a sense, the true innovation factor of these popular apps lies in the meta-levels that they provide. Roam and Notion and whatnot aren&rsquo;t the power tools they are because of some revolutionary new way to interact with data itself: it&rsquo;s the refreshing levels of interactions they offer with the metadata instead that boosts the quality of life when working with the knowledge and data itself. Most tools offer a good baseline of data management, and some level of interconnectedness and tagging and such, but when software offers a new way to interact with the metadata, that&rsquo;s when you get interesting workflows and environments. Roam, Notion, and other apps with a block or bullet model appeal to people because of their fine-grained connections, something that was lacking in the common sterilized, document-driven approach.</p>
<p>A good example of this is what inspired me to write this whole blog post: the <a href="https://roamjs.com/extensions/discourse-graph">Discourse Graph</a> extension available in Roam. I don&rsquo;t use Roam, nor plan to daily drive it in the near future, but there&rsquo;s something about this extension in particular that really tempted me to switch. It works with your existing Roam graph to provide a formalized note model, composed of questions, evidence, claims, conclusions, and all the connections in between. It&rsquo;s suited well for a research ecosystem, with tools to denote that this note &lsquo;supports&rsquo; or &lsquo;refutes&rsquo; or &lsquo;weakly correlates&rsquo; with another. This in itself is a powerful metadata model - the codified structure takes away decision paralysis, and creates a very regimental and logical order of graphs. However, where this extension goes above and beyond is its playground feature, where you can query your model for &lsquo;all evidence that supports X and refutes Y&rsquo;, for example, and find &lsquo;all claims that connect to such and such question&rsquo;. That&rsquo;s a truly new model of interaction with metadata, and a great example of how having a structure and tools to manipulate metadata can lead to connecting together key insights in your knowledge.</p>
<h2 id="data-dimensions">Data Dimensions</h2>
<p>Besides having tools built into software to analyze metadata, it&rsquo;s also important to allow users to implement their metadata to fit their workflow. People&rsquo;ll always want more dimensions to categorize and subcategorize and fit all their data into - I remember when I was trying to implement Trello into my workflow, I was pretty frustrated at the lack of sub-bullets and sub-tasks, and had to make do with a very scuffed checklist model instead. The same goes with nesting - Workflowy&rsquo;s popular for a lot of reasons, but one is the infinite hierarchy that it provides. That infinity is also something interesting to note: as long as something&rsquo;s not unlimited (to a reasonable depth), a subset of users will feel like they&rsquo;re hitting a wall with what the software can help them do. Whatever depth of metadata is available, unless unlimited, will feel like some construct to at least some people, if not a significant portion. This creates essentially infinite &lsquo;axes of belonging&rsquo;, or categories with which to split data up. Axes of belonging are like possible views and queries into the data, and if the number of axes can be maximized, having all these new variables and possibilities makes software ostensibly more powerful for those power users.</p>
<p>But there&rsquo;s still a fine balance to walk between too complicated with too many dimensions and axes of data, and too few. Excel, arguably perhaps one of the original tools for thought and innovators in the metadata space, does this quite well. The spreadsheet and table interface is immediately intuitive for many, but hidden deep into menus and tabs that the average user will never explore, are the hidden gems that probably makes someone&rsquo;s workflow click. There are infinite ways to associate metadata to a cell through other cells or formatting or conditional formulas, and an infinite canvas full of columns and rows to stack all your data in. This is, I think, how people think connections work best - through categories, expressed here in table associations. Maybe it&rsquo;s not the best and most efficient way to work, because sometimes constraints are what you need, after all. But with its many metadata dimensions and built-in ways to explore data, Excel feels so open, and that&rsquo;s a trait in software that I think people are almost universally drawn to.</p>
<h2 id="standardizing-might-will-fail">Standardizing Might (Will?) Fail</h2>
<p>So far, I&rsquo;ve discussed the two main elements of what makes metadata integration so appealing. However, to get multiple people on the same page, all benefiting from the same metadata innovations, tools will need to have some shared standard, or some sort of schema. Schemas are inherently limiting though, unless they&rsquo;re explicitly <em>un</em>-limiting. But in that case, the point of standardization and extension is a bit moot. To some extent, I think you can get schemas to be flexible and agree, but there&rsquo;s a fine line between too much structure and the sort of spec that goes &lsquo;literally any field can be literally anything, go have fun&rsquo;. How are new features proposed and added across so many apps? Will a central standard have to be patched? How can we make it backwards compatible without &lsquo;de-dimensionalizing&rsquo; or flattening metadata?</p>
<p>There&rsquo;s a <a href="https://xkcd.com/927/">relevant XKCD</a>, as there always is, but there&rsquo;s also a couple relevant tools that might work to bridge the gap between different tools. <a href="https://www.inkandswitch.com/cambria/">Cambria</a> by Geoffrey Litt (and Peter Van Hardenberg and Orion Henry) is a tool to move data between schemas. In essence, it&rsquo;s a Google Translate for tools for thought, where &lsquo;lens&rsquo; can be defined to rename fields, convert between datatypes, and extract certain labels. It partially solves the issue of differing standards, as apps can define ways to translate and transmute metadata between each other. This does assume that software companies are willing to cooperate with each other (a stretch), or that there&rsquo;ll be dedicated users who drive this system forward (definitely more likely). Something like this doesn&rsquo;t solve the issue of how rich interactions and media based on metadata that&rsquo;s not quite supported should resolve, but it&rsquo;s a great step to linking all these tools and towards a more metadata-friendly future<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>For software being developed today, I think there are some decently clear trends in users becoming more tech-savvy, and in power users craving even more functionality. In the new field of knowledge work, maximum efficiency is glamorized and lauded. While that has its own caveats that I won&rsquo;t get into now, it&rsquo;s key to consider that, in general, people seem to be trending towards wanting more options and more connectivity through the meta. It&rsquo;s taken me this long to realize that I&rsquo;ve essentially written a SEO boost for the company-that-must-not-be-named, but oh well. We&rsquo;ll roll with it, because that appears to be what the zeitgeist is moving towards: a future of connectivity and linking<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>. Maybe in this case, I&rsquo;m thinking of it more in terms of knowledge management than magical VR metaverses, but the case in point holds.</p>
<p>In other news, I&rsquo;ve been up to more work with <a href="https://fullstackopen.com/">Full Stack Open</a>, and I&rsquo;ve also tried to start the <a href="https://cses.fi/problemset/">CSES problem set</a> while bodging my way through C++. It&rsquo;s been a while since I&rsquo;ve felt this beginner - it took me a solid hour and half to write a basic <a href="https://en.wikipedia.org/wiki/Collatz_conjecture">Collatz sequence</a> simulator. Granted most of that was looking up syntax and tweaking a basic Vim setup, but it was certainly a knock to my Python tendencies. CSES is kind of one of those things that&rsquo;s good for you, and somewhat fun, but only in small doses, not when trying to grind certain amounts of problems per session or whatever. It&rsquo;s been a good brainteaser so far, so I think I might enjoy (very) small amounts of it in the future. I also feel like I&rsquo;m starting to spread myself too thin - I&rsquo;ve started doing some stuff at the <a href="https://ubccsss.org/">UBC CSSS</a> as well. I&rsquo;m halfway certain it&rsquo;s something to do with being immersed in an entirely new world of uni, and surrounding myself with people who all seem much more experienced and cooler than I am. It&rsquo;s a good ego check, but it&rsquo;s also been inspiring me to explore and look into a lot of new things. Halfway a good thing (exploring new areas of CS, doing fun things), halfway a not-so-great thing (occasionally self-overwhelm and loads of imposter syndrome), but I think I&rsquo;ll be able to manage, so we&rsquo;ll see what happens.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>There&rsquo;s also a lot to say about the fact that the most common, and most baseline metadata is often that of time. It&rsquo;s something that&rsquo;s easy to connect to a physical moment, a decently useful bit of information for most contexts, and straightforward to record in server logs. It&rsquo;s also an universal constant - people across different cultures can&rsquo;t interpret time differently, nor can users argue over the best way to tweak it. It&rsquo;s just time. (More on this maybe in another post soon - I&rsquo;ve got some ideas brewing that I&rsquo;d like to investigate further.)&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>It&rsquo;d be interesting if something like this got centralized / listed into some graph. It&rsquo;d then be a link full of linked ways to link (and manipulate) links in linking software! (Infinite metadata recursion, and it&rsquo;s turtles all the way down.)&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>Besides the unintentional reference to Facebook, the title of this post is a cute nod to <a href="https://thesephist.com">Thesephist&rsquo;s</a> project <a href="https://thesephist.com/you/">&lsquo;a piano and you&rsquo;</a>.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>Starting Anki</title>
      <link>https://kewbi.sh/blog/posts/211031/</link>
      <pubDate>31 Oct 2021</pubDate>
      <author>Emilie Ma ◦ Kewbish</author>
      <description>On proper SRS, GTK hacks, and the Leitner system.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Something that I&rsquo;ve realized throughout my first month and a half at university, is the sheer volume of information and responsibility placed on a student&rsquo;s shoulders. I love it. Being able to manage myself and have full(-ish) control of my courses, my performance, and the rest of my life has been great. I like being immersed in content that I truly don&rsquo;t understand, and that challenges me a bit to actually understand and make sense of the material. However, there&rsquo;s a balance: I like that there&rsquo;s exciting and decently interesting information, but it&rsquo;s, of course, annoying that there&rsquo;s a lot of it. I&rsquo;ve had to, and am still in the process of, figure out how to get through all of this material, and get through it decently well. My courses are very spread out in terms of specialization, and some are quite memorization focused. Improving and optimizing my recall and comprehension are now starting to become interests and priorities of mine.</p>
<p>Well, it&rsquo;s Halloween, and I don&rsquo;t know how spooky flashcards and memory management are, but here I am to discuss <a href="https://en.wikipedia.org/wiki/Spaced_repetition">spaced repetition software</a> and <a href="https://apps.ankiweb.net/">Anki</a> in particular. (I won&rsquo;t go into what these are right now, but go ahead and take a look at those resources if you&rsquo;re interested.) I&rsquo;ve been dabbling with <a href="https://kewbi.sh/blog/posts/201025/">a variation of SRS</a> for a while now, and have recently even been working on a <a href="https://github.com/kewbish/liberty">free-response version of the philosophy</a>. I&rsquo;ve tried both <a href="https://quizlet.com">Quizlet</a> and terminal UI versions of flashcard apps, like <a href="https://github.com/proycon/vocage">vocage</a> and <a href="https://github.com/Yvee1/hascard">hascard</a>. I&rsquo;ve known about Anki for a long while now, but I&rsquo;ve never really looked into it. I&rsquo;d always discounted their SuperMemo2 algorithm, and thought its applications didn&rsquo;t overlap with my needs.</p>
<p>However, what finally pushed me over the edge was taking ATSC113 at UBC. It&rsquo;s a course about atmospheric sciences, and goes into the weather in relation to flying, snow sports, and sailing. It&rsquo;s a course with lots of vocabulary and concepts that I&rsquo;d never thought about or learned about before: plenty of memorization heavy work in areas that I&rsquo;m completely unfamiliar with. I&rsquo;d tried to review notes on a regular basis, and made my own flashcards in an attempt to test myself. However, I kept needing to schedule review sessions and assess my level of comprehension myself, which introduced a lot of mental friction. I knew that I was probably going to start looking for something new to try, so I decided to be proactive and take a look at Anki.</p>
<p>When I started looking into Anki, I was initially a bit turned away by the aesthetic. It&rsquo;s very utilitarian, and I hadn&rsquo;t really considered it as it looked so archaic and decidedly unaesthetic. Eventually, the power outweighed the cons. Anki abstracts away all the meta-work that I have to do, so I don&rsquo;t have to worry about balancing my cards, or about the Leitner system. I figured out how to theme and make Anki look pretty and shiny anyways, so that&rsquo;s fine. What matters is that I&rsquo;ve decided that Anki is a good experiment to try, at least for the time being, and that it&rsquo;s been quite comfortable and helpful to use.</p>
<p>In this post, I&rsquo;d like to talk about a couple SRS-related things I&rsquo;ve been thinking about at the moment. This might continue into a series as I continue to learn my way around Anki, but for now, here&rsquo;re my thoughts.</p>
<h2 id="the-glamourization-of-srs">The Glamourization of SRS</h2>
<p>I&rsquo;d like to inject a short interlude about SRS and the SRS community in general here - I think there&rsquo;s a lot of comparisons to be drawn here between Anki and #roamcult, and maybe the knowledge management community too. There&rsquo;s a lot of similarly passionate people, and people who&rsquo;ve kind of attached a large part of their identity to the app. There&rsquo;s absolutely nothing wrong with it - I guess people have an intrinsic desire to know and particularly magically know all the things they want to do. Anki is a bit of a stopgap to the be-all and end-all of understanding, and I think it has something to do with the idealization and romanticization of knowledge in general. Maybe this is because I&rsquo;ve been spending a decent amount of time in circles where discussing knowledge management is a normal and interesting thing to do, but I see that people keep trying to reinvent themselves and keep searching for the one silver bullet to their knowledge needs. And I suppose I&rsquo;ve succumbed to that a bit as well - look at my Zettelkasten series and the amount of time I spend tweaking my various configs in an attempt to become that student. However, I guess I&rsquo;ll just leave this in here - SRS is lightly glamourized. There&rsquo;s nothing wrong with that, but in my opinion, it is. Perhaps my opinion as to the magnitude of glorification will change as time goes on, and I, too, become An Anki User, but we&rsquo;ll see.</p>
<h2 id="a-diy-night-mode">A DIY Night Mode</h2>
<p>Something interesting I&rsquo;d like to also touch on is getting themes to work properly in Anki. One of the main issues I ran into when trying to set Anki up was getting my GTK theme to work with Anki night mode. I currently use <a href="https://github.com/ddnexus/equilux-theme">Equilux</a> as my GTK theme, which I really like for its flat grey design and nice integration with my boring, monochrome aesthetic. Anki, however, works on QT, which I&rsquo;m not entirely familiar with, but it&rsquo;s a different theming and development engine than GTK. Unfortunately, Anki night mode by default doesn&rsquo;t take the GTK theme as a QT theme, so I apparently had to do some <code>/etc/environment</code> magic to set <code>QT_QPA_PLATFORMTHEME</code> to <code>qt5ct</code> and within that, <code>gtk2</code>. Spoiler alert: Don&rsquo;t bother looking into that, because if your GTK theme is already a dark mode and you&rsquo;d prefer a night mode within Anki, it won&rsquo;t work out. It <em>does</em> work with light mode, but then the entire reviewing interface is by default light and blinding.</p>
<p>For example, below, that&rsquo;s Anki with night mode enabled, and with the ‘wrong’ theme. Interface elements are light on dark as desired.
<figure><img src="https://aws1.discourse-cdn.com/standard11/uploads/anki2/optimized/2X/5/53dcf9695c4f8ab399d2434d8b1c491f0e848dc6_2_690x197.png"
         alt="Figure 1. Anki: wrong GTK theme, right interface."/><figcaption>
            <p>Figure 1. Anki: wrong GTK theme, right interface.</p>
        </figcaption>
</figure>
</p>
<p>With night mode off (ignore that the Deck and New are white, I went and edited the CSS in /usr/lib/python3.9/site-packages/aqt/data/web/css/). Interface elements are dark on dark, but the correct theme applied.
<figure><img src="https://aws1.discourse-cdn.com/standard11/uploads/anki2/optimized/2X/0/05d87b1f60668003cb3c5d861dc3776c756ac58a_2_690x214.png"
         alt="Figure 2. Anki: right GTK theme, wrong interface."/><figcaption>
            <p>Figure 2. Anki: right GTK theme, wrong interface.</p>
        </figcaption>
</figure>
</p>
<p>What happens is that <a href="https://forums.ankiweb.net/t/toggling-night-mode-appears-to-change-qt-gtk-theme/14404">Anki uses their own QT theme</a> when night mode is toggled, since &ldquo;not all themes will work correctly with dark colors&rdquo;. Entirely fair, but that meant I had to do some serious CSS styling edits in order to simulate night mode within &lsquo;light mode&rsquo; Anki. To save you a lot of work, my edits to apply night mode colours (lightly edited to use Equilux colours where appropriate) to light mode Anki are available on my dotfiles, at <a href="https://github.com/kewbish/dotfiles">kewbish/dotfiles</a>. The key directories to look in are <code>/usr/lib/python3.9/site-packages/aqt/data/web/</code>, and <code>~/.local/share/Anki2/addons21</code>, if you want to edit any addons. This might differ due to installation method (I used <code>anki-bin</code> from the AUR), but this is what worked for me.</p>
<p>A more universal fix is creating an addon in the <code>~/.local/share/Anki2/addons21</code> directory, which is as easy as making a directory and creating an <code>__init__.py</code>. Alternatively, edit an existing addon. As long as you include:</p>
<pre tabindex="0"><code>from aqt import mw
from PyQt5.Qt import QStyleFactory

mw.app.setStyle(QStyleFactory.create(&quot;gtk2&quot;))
</code></pre><p>somewhere, you&rsquo;ll correctly force the GTK theme into any theme of Anki. This way, you can switch to dark mode within the Anki settings, as well as using a proper GTK theme that integrates with the rest of your desktop environment.</p>
<h2 id="my-settings">My Settings</h2>
<p>I don&rsquo;t think I really did much research as to what settings were idea for use with Anki - my config at the moment is some mix of <a href="https://chuff.wordpress.com/2018/01/08/article-how-to-use-anki-as-a-leitner-box-game/">this Anki Leitner setup</a> and the <a href="https://refold.la/roadmap/stage-1/a/anki-setup#Low-key-Anki">Lowkey Anki setup</a>. The two things I knew going into configuration was that I somewhat unconventionally wanted to partially integrate the <a href="https://ncase.me/remember/">Leitner system</a> in my learning steps, and that I wanted a Quizlet-like pass / fail option. Yes, people have gone on about how you should just trust the algorithm (à la the natural recursion), and how it&rsquo;s not really that much cognitive friction and that it really helps with the ease settings and how cards are tuned to your level of memory. But I don&rsquo;t like it - I now have to build a mental model of what differentiates hard from good cards, and likewise for good / easy, again / hard. This might be something I revisit later on in my SRS journey, but I&rsquo;d rather keep things simple and close to the softwares I&rsquo;ve used in the past for now.</p>
<p>I have my settings at 20 new cards a day - a bit much for now, but I&rsquo;d like to quickly get back up to pace with some of my class cards. I&rsquo;ve set my learning steps to <code>1d 2d 4d 8d 16d 32d</code>, which might seem inordinately long for the quick <code>5m 25m 1440m</code> people, but I&rsquo;ve found the Leitner system works quite well for me, so I kept it. My graduating and easy intervals are both at 32d, and my insertion order&rsquo;s random. Similarly to the &lsquo;harsh&rsquo; Leitner system, I have my lapses at 1d with a minimum interval of 1d. My leech threshold&rsquo;s at 8, and I&rsquo;ve set this to tag only. It&rsquo;ll be some time before I even get all my cards out of learning, but I hope that this&rsquo;ll work well enough for me. I bury related siblings and review siblings, which reduces redundant review time. My maximum interval&rsquo;s at 100 years, which is a bit long now that I think about it, but oh well. My starting ease is where it starts to get interesting - I&rsquo;ve set it to 2.50, with my easy bonus, interval modifier, and hard interval all at 1.00. This essentially disables the easy and hard buttons, which is nice, since I can&rsquo;t see them visually anyway.</p>
<p>Speaking of the pass / fail setup proposed by Refold&rsquo;s Lowkey Anki, I use this <a href="https://github.com/lambdadog/passfail2">Pass Fail addon</a>, updated for use with Anki 2.1. I resonate with the goals of the addon, and so far, I&rsquo;d say I definitely recommend it. Keep in mind that this all is just a snapshot for future reference, and that I&rsquo;m still very much tweaking everything around.</p>
<h2 id="conclusion">Conclusion</h2>
<p>With Anki, I&rsquo;m looking forward to learning more fluently, and taking away the friction of review. I like that I have one place to return to and one place to manage all the things I should review now, and that that one place is something I can turn to daily. I think this daily habit, while much less focused than specific sprints every other couple days, is more sustainable in maintaining and always brushing up on knowledge. I&rsquo;m still figuring out how to best use Anki to recall and more deeply learn new information. I&rsquo;d like to find, for example, a way to review cards in advance without them piling up in the future. I know I can custom study and toggle off the &rsquo;re-date cards' or whatever, but I think my purpose right now is trying to get ahead of reviews, so I don&rsquo;t think there&rsquo;s really a way to review without pushing more cards together in the future. As well, I&rsquo;d like to learn the card and note management windows better. As of now, I&rsquo;ve just figured out how to do what I need to do (which, prior to <a href="https://ankiweb.net/shared/info/385888438">Edit Field During Review (Cloze)</a> was just editing cards and tagging them), and haven&rsquo;t explored much else. Maybe that&rsquo;s alright - maybe I shouldn&rsquo;t overcomplicate things for myself before I&rsquo;ve even gotten started.</p>
<p>In other news, I&rsquo;m currently in the process of overly studying for midterm wave number two. I&rsquo;m glad that I made it through the first wave, and while I&rsquo;m not too ecstatic about some of what I&rsquo;ve been able to do, I&rsquo;ve learned a couple lessons that I&rsquo;ll try to apply in the future. It is what it is. As well, I&rsquo;ve been meaning to start looking into internships and applying to some, but I feel like I&rsquo;ve hit a wall. The imposter syndrome, particularly with the interview side of things, is definitely kicking in. I don&rsquo;t know how I feel describing myself as a &lsquo;web developer&rsquo; while looking at some of those DSA questions, or even web framework questions, and not really having a clue with how to approach them. But it&rsquo;s something that I&rsquo;ve also decided that I need to work on, so I&rsquo;m looking into that CS handbook<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> and trying to figure out a way to systematically learn and improve.</p>
<p>As well, I&rsquo;ve been working through <a href="https://fullstackopen.com/">Full Stack Open</a>, which is an open source course about web development, and React / Typescript / Express / MongoDB in particular. I&rsquo;ve realized that I&rsquo;ve kind of let my Vue experience go a bit, and that, looking through interviews and such, people tend to look for React more. I&rsquo;ve never really systematically learned any part of web development, and I think FSO has been a good introduction to this whole curriculum thing. It also helps that Typescript and the React design patterns are topics that I&rsquo;ve never really covered before. Part of what makes me demotivated and pushes me to stop working on something is that I feel that I know half of whatever a course is teaching, but I don&rsquo;t know the other half: I end up skimming most of the material, and retain not a lot of new information. I&rsquo;m on the third module at the moment, and while I don&rsquo;t have a lot of time to tackle their exercises, I do really enjoy the examples they&rsquo;ve set up and how the problems apply the material super well. I&rsquo;ve found working through the course really informative and honestly fun, and would recommend the course so far. I&rsquo;m excited to see what the rest of the course ends up being like, and hopefully, I&rsquo;ll report back with more progress soon.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Ironically, I very vividly remember making fun of my friends for printing out their own copy and putting it together into a binder and reading it every chance they got in class. At this point, <em>I&rsquo;ve</em> become that kid, but hey, maybe I should have listened to their CS fanboy ramblings the first time around.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>More Linux Tweaks</title>
      <link>https://kewbi.sh/blog/posts/211003/</link>
      <pubDate>03 Oct 2021</pubDate>
      <author>Emilie Ma ◦ Kewbish</author>
      <description>On troubleshooting many Linux-related issues.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>It&rsquo;s been a while since I had the time to write anything for YK - I&rsquo;ve been getting settled into the quintessential university freshman experience at UBC, and loving it so far. Every upper-year I meet keeps telling me about the rose-coloured glasses apparently all freshmen have, with something along the lines of &lsquo;well, I hope you can keep that mindset up!&rsquo;. It&rsquo;s not particularly encouraging, but to be fair, I&rsquo;ve only been here a month, and haven&rsquo;t had any major quizzes or midterms yet, so maybe I do still have my pink spectacles quite firmly on. More on this some other time: this isn&rsquo;t some university reflection, after all, it&rsquo;s a tech blog!</p>
<p>So, in other news, I got a new laptop, and have been juggling close readings and annotations with setting it up. I&rsquo;ve finally got everything installed and configured to my liking, however, so I thought I&rsquo;d write a bit about the process of getting everything together, similar to my <a href="https://kewbi.sh/blog/posts/210711/">previous one about my monitor and Bluetooth setup</a>. While I was able to follow my past notes for display and Bluetooth configuration, I encountered my fair share of struggles along the way. It&rsquo;s just mostly stuff I&rsquo;d set up on my old laptop but without writing notes about how I got myself through the messes in the first place, I had no idea where to go this time round. However, I managed to work things out, very slowly and steadily, and I&rsquo;m now writing this very post with my new setup.</p>
<p>Some specs:</p>
<ul>
<li>It&rsquo;s the Lenovo Yoga 7 14ITL5 - got it off Best Buy for a half decent deal.</li>
<li>It&rsquo;s got a 11th Gen Intel i7-1165G7, with 8 cores, Intel Iris Xe graphics, a very nice 16GB of RAM that I didn&rsquo;t even have to dismantle the chassis for, and 1TB of NVMe SSD. It&rsquo;s currently running 5.13.19-2MANJARO, and everything (minus fingerprint reader and sound) works really well.</li>
<li>One of the immediate improvements over my old laptop (well, besides weight) is how quickly it boots and runs things. My old laptop had to go for at least half a minute to boot up, which was certainly an annoyance when it&rsquo;d suddenly crash in the middle of Zoom class. Granted, it had to go through Grub and a shabbily patched together Windows dual boot configuration, but this laptop is so much quicker. It boots from completely shut down in what I can perceive to be a second or two, which is crazy fast compared to my past habits of staring blankly at a HP loading circle for ages.</li>
<li>Speaking of weight, the laptop&rsquo;s quite thin and light, something I appreciate when I have other binders and things to shove in my bag. It&rsquo;s about half a kg lighter than my old laptop, which isn&rsquo;t entirely much, but it makes a nice difference that I value.</li>
<li>The battery life&rsquo;s also pretty amazing - the first time I took this laptop to school, I hadn&rsquo;t yet ordered a second charger cable, and my packaged one was still at home. It managed to churn through three hours of Zoom meetings, and three hours of a physics lab, all while still having a good 30% left. It&rsquo;s amazing what this 71Wh battery can do - it can definitely hold tonnes more than my old 38Wh.</li>
<li>Something else I really like about the laptop so far is that I have one (1!) cable to plug in when I get home. I have my power, monitor, printer, webcam and various other little cables all hooked into a singular USB-C hub, which then plugs right into my laptop. I used to have to plug each individual cable in, and because each port was on different sides of my old HP, it was a bit of a mess, visually. This does present the problem of always having to be charging the laptop if I want to use my monitor, but it&rsquo;s somehow configured itself to only charge when not full, and then run off what I assume is AC after that.</li>
<li>And it looks amazingly cute - I&rsquo;m not usually one to fuss over the colour of laptops, but it&rsquo;s just such a <em>nice</em> slate grey.</li>
</ul>
<p>Overall, definitely a big improvement over my old HP, and very grateful I&rsquo;m able to have a better machine.</p>
<p>Similarly to my other Linux-setup-tweaks post, this article will cover a bunch of my troubleshooting, thought processes, and eventual solutions to my various issues: getting my printer drivers working, fixing screen tearing, duplicating Chrome history and passwords, tweaking fonts, and more. This is mostly to keep a record for myself of all the little problems that I&rsquo;ve had, just in case I have to reinstall or do this all over again for some other machine. I don&rsquo;t think this post&rsquo;ll be of much use if you don&rsquo;t have the exact same model of laptop, but maybe some of the more general tweaks, like for fonts and such, will help someone out there. Throughout this guide, I assume you&rsquo;ll be running Manjaro or some Arch relative, and have a basic knowledge of how to run commands and install packages - I&rsquo;ll only be going into what I did to fix my issues, so you&rsquo;ll have to look at more general advice elsewhere.</p>
<h2 id="cups-and-printing">CUPS and Printing</h2>
<p>I&rsquo;m going go start with CUPS troubleshooting first, because I went through a whole struggle to set up my printer. I specifically have the Brother-MFC7340 laser printer, which is a rather old black and white model that comes without any of the fancy modern QoL features like double sided printing or wireless connections. It even has a fax - that&rsquo;s how old it is. But Brother does a pretty decent job of keeping their drivers backward compatible and up to date, even for older models like mine, so I thought I&rsquo;d have a pretty easy time at it here. I installed <a href="https://github.com/OpenPrinting/cups">cups</a>, and trawled the internet a bit for the Brother driver I thought would work, which ended up being <a href="https://aur.archlinux.org/packages/brother-mfc7340/">this one (brother-mfc7340)</a> on the AUR. Spoiler alert: it doesn&rsquo;t work.</p>
<p>I tried uninstalling sane, disabling usblp, and manually editing PPD files, all things listed in the <a href="https://wiki.archlinux.org/title/CUPS">Arch Wiki</a> troubleshooting page. Long story short - the driver doesn&rsquo;t work, wasn&rsquo;t the one I thought I had installed on my old laptop, and you shouldn&rsquo;t bother trying any of the above. Instead, install <a href="https://github.com/pdewacht/brlaser">brlaser</a> from the AUR, and set up your printers to use that driver instead. I&rsquo;m not going to go into the specifics of how to set printers up, but know that you&rsquo;ll have to select something like &lsquo;Brother MFC7360N&rsquo; instead of MFC7340. It&rsquo;s not an exact model match, but it works perfectly fine for me, so I&rsquo;m not going to ask questions.</p>
<p>An aside: to configure scanning properly, you&rsquo;ll have to install <a href="https://aur.archlinux.org/packages/brscan3/">brscan3</a>, or install brother-mfc7340 as above. Then, install <code>simple-scan</code> or another scanning tool, which should automatically register your printer / scanner combo.</p>
<h2 id="screen-tearing">Screen Tearing</h2>
<p>When madly scrolling through tonnes of forum pages in an attempt to resolve the above CUPS issue, I also encountered a bunch of screen tearing issues. I&rsquo;m running Chrome<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, and found that without hardware acceleration on (which for some reason, didn&rsquo;t work properly in Chromium) and another fix I&rsquo;ll detail below, I had pretty significant screen tearing while scrolling. It wasn&rsquo;t anything too severe, but annoying to notice when trying to read pages and scroll nicely.</p>
<p>What got my screen to stop tearing was, for one, enabling hardware acceleration in Chrome settings (see chrome://settings), and messing around with Intel graphics files.
I created <code>/usr/share/X11/xorg.conf.d/20-intel.conf</code>, and put the following in it:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">Section &#34;Device&#34;
  Identifier  &#34;Intel Graphics&#34;
  Driver      &#34;intel&#34;
  Option      &#34;AccelMethod&#34;  &#34;sna&#34;
  Option      &#34;TearFree&#34;     &#34;true&#34;
EndSection
</code></pre></div><p>When I rebooted, the boot was getting stuck at &lsquo;/dev/[something] clean, &hellip; files, &hellip; blocks&rsquo;, so I thought I&rsquo;d have to start over and reinstall my system again. But don&rsquo;t panic - hit <!-- raw HTML omitted -->CTRL<!-- raw HTML omitted -->-<!-- raw HTML omitted -->ALT<!-- raw HTML omitted -->-<!-- raw HTML omitted -->F2<!-- raw HTML omitted --> to get into a recovery terminal. From here, you can either <code>pacman -Syu</code> and see if that fixes it; or, as that didn&rsquo;t work in my case, run <code>sudo mhwd -f -i pci video-linux</code>, which did some scary things for a while and then popped me back into my login screen. The above command is the equivalent of <code>sudo mhwd -r pci video-linux</code> followed by <code>sudo mhwd -i pci video-linux</code>, if that helps.</p>
<h2 id="retracing-history">Retracing History</h2>
<p>It turns out Chrome conveniently stores all of its data in <code>~/.config/google-chrome/</code>. Most of what you&rsquo;ll want will be in the <code>~/.config/google-chrome/Default/</code> directory, which is home to the History, Cookies, Extension Cookies, and Shortcuts databases. I&rsquo;m going to be honest - I don&rsquo;t entirely know which have carryover effects and which don&rsquo;t, but I essentially copy-pasted all the databases I could find to my new laptop. This let me retain my history, but I still had to log into each website and refresh cookies where necessary on my own. Note that the Extensions directories don&rsquo;t appear to do anything - I thought that this would copy over all of my extensions, but alas, I had to do that manually as well, which is surprising, since the directory contains what appears to be the raw extension files.</p>
<p>Speaking of logins, I&rsquo;ve saved most of my passwords into the Chrome password manager (not very secure, I know), and wanted to transfer those over as well<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>. On my origin / old laptop, I went into <code>chrome://settings/passwords</code>, and clicked the hamburger menu near Saved Passwords. This let me export all my passwords into a very dangerous, unencrypted CSV. Try not to let anyone get access to that. On my new installation, I went to <code>chrome://flags</code>, and searched for and enabled Password Import. Navigate back to the <code>chrome://settings/passwords</code> page, and it&rsquo;ll let you import a whole bunch of passwords in the same menu.</p>
<p>Also, a cute tip if you, like me, enable login to Gmail without login to Chrome but still want a custom profile pic in Chrome: click on your profile, click edit, and select some other profile pic. This&rsquo;ll spit out the photo in <code>~/.config/google-chrome/Avatars/</code>. Take whatever photo you want to use as a profile pic, rename it to whatever&rsquo;s in the Avatars directory, and replace the Chrome avatar with your custom pic.</p>
<h2 id="font-tweaking">Font Tweaking</h2>
<p>I had two major font tweaks to do - one with my preferred emoji font, and one with my type hinting in LibreOffice.</p>
<p>First, the emojis. I prefer to use <a href="https://twemoji.twitter.com/">Twemoji</a>, which is Twitter&rsquo;s custom emoji font - also the same one used in Discord. I like how round and flat and cohesive it is, but maybe that&rsquo;s just an acquired taste from spending much too long on Discord. Regardless, to make Twemoji work at a baseline level, you&rsquo;ll have to install <a href="https://aur.archlinux.org/packages/ttf-twemoji/">ttf-twemoji</a>. There&rsquo;s another package, <a href="https://aur.archlinux.org/packages/ttf-twemoji-color">ttf-twemoji-color</a>, that provides the colour version of the font, as well as the B&amp;W files. However, Chrome apparently doesn&rsquo;t have full support for SVG colour by default, and the colour version wasn&rsquo;t appearing in other apps like my terminal. So, I had to do some finagling, and install <a href="https://archlinux.org/packages/ttf-bitstream-vera">ttf-bitstream-vera</a>, <em>then</em> ttf-twemoji-color. Finally, I had to create <code>~/.config/fontconfig/fonts.conf</code>, and put the following inside:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">&lt;fontconfig&gt;
  &lt;alias&gt;
    &lt;family&gt;serif&lt;/family&gt;
    &lt;prefer&gt;
      &lt;family&gt;Twemoji Color&lt;/family&gt;
    &lt;/prefer&gt;
  &lt;/alias&gt;
  &lt;alias&gt;
    &lt;family&gt;sans-serif&lt;/family&gt;
    &lt;prefer&gt;
      &lt;family&gt;Twemoji Color&lt;/family&gt;
    &lt;/prefer&gt;
  &lt;/alias&gt;
  &lt;alias&gt;
    &lt;family&gt;monospace&lt;/family&gt;
    &lt;prefer&gt;
      &lt;family&gt;Twemoji Color&lt;/family&gt;
    &lt;/prefer&gt;
  &lt;/alias&gt;
  &lt;alias&gt;
    &lt;family&gt;Apple Color Emoji&lt;/family&gt;
    &lt;prefer&gt;
      &lt;family&gt;Twemoji Color&lt;/family&gt;
    &lt;/prefer&gt;
  &lt;/alias&gt;
&lt;/fontconfig&gt;
</code></pre></div><p>Run <code>fc-cache -f -v</code> to clear the font cache, log out and back in for good measure, and you should be graced with some very quirky, iconic emojis.</p>
<p>I also had a small problem with <a href="https://aur.archlinux.org/packages/ttf-ms-fonts">ttf-ms-fonts</a>, which is a package that includes all the default Windows fonts, like Times New Roman. I&rsquo;m required to use it for school, so I&rsquo;d have to be staring at it quite regularly. A pity then, that LibreOffice wasn&rsquo;t displaying it properly - it was a bit too short and compressed, and there were some spacing issues that came up occasionally. So, I had to further edit my <code>fonts.conf</code>, and add some bitmap edits:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">&lt;match target=&#34;font&#34;&gt;
	&lt;edit name=&#34;embeddedbitmap&#34; mode=&#34;assign&#34;&gt;
		&lt;bool&gt;false&lt;/bool&gt;
	&lt;/edit&gt;
&lt;/match&gt;
</code></pre></div><p>Put this inside the <code>&lt;fontconfig&gt;</code> tag, and run <code>fc-cache -f -v</code> again.</p>
<p>The final <code>~/.config/fontconfig/fonts.conf</code>:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">&lt;fontconfig&gt;
  &lt;alias&gt;
    &lt;family&gt;serif&lt;/family&gt;
    &lt;prefer&gt;
      &lt;family&gt;Twemoji Color&lt;/family&gt;
    &lt;/prefer&gt;
  &lt;/alias&gt;
  &lt;alias&gt;
    &lt;family&gt;sans-serif&lt;/family&gt;
    &lt;prefer&gt;
      &lt;family&gt;Twemoji Color&lt;/family&gt;
    &lt;/prefer&gt;
  &lt;/alias&gt;
  &lt;alias&gt;
    &lt;family&gt;monospace&lt;/family&gt;
    &lt;prefer&gt;
      &lt;family&gt;Twemoji Color&lt;/family&gt;
    &lt;/prefer&gt;
  &lt;/alias&gt;
  &lt;alias&gt;
    &lt;family&gt;Apple Color Emoji&lt;/family&gt;
    &lt;prefer&gt;
      &lt;family&gt;Twemoji Color&lt;/family&gt;
    &lt;/prefer&gt;
  &lt;/alias&gt;
    &lt;match target=&#34;font&#34;&gt;
        &lt;edit name=&#34;embeddedbitmap&#34; mode=&#34;assign&#34;&gt;
            &lt;bool&gt;false&lt;/bool&gt;
        &lt;/edit&gt;
    &lt;/match&gt;
&lt;/fontconfig&gt;
</code></pre></div><h2 id="and-finally-sync">And, Finally, Sync</h2>
<p>No actual problems here - I&rsquo;d just like to keep a note of the rsync command I use to back things up for further reference:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">rsync -r --info=progress2 --exclude=.git --exclude=node_modules --exclude=archive --exclude=&#34;*.mp4&#34; /home/kewbish/Downloads/dev/* /media/kewbish/Seagate\ Basic/dev/
</code></pre></div><h2 id="conclusion">Conclusion</h2>
<p>Every time I set up a laptop, or break something and need to fix it, I&rsquo;ve realized that even though there&rsquo;ll inevitably be trials and tribulations, I end up learning a lot - not just about how to fix said bugs, but in general how computers work. The first time I installed Linux, I had to learn about dual booting, what partitions even were, and how to make partition schemes, and port all my hacky Windows experience over into a whole new world of Unix. When I was trying to troubleshoot my monitor last time, I learned a whole lot about displays and profiles, and likewise when I sorted out my Bluetooth connections. These processes of constantly breaking, then fixing and learning, are what&rsquo;s kind of fun about Linux. Sure, you won&rsquo;t ever have to run into major issues on Windows (as long as you don&rsquo;t do anything too crazy), but it ends up abstracting all the interesting system files and configurations away from the user. Sometimes diving into the <code>/etc/</code> or <code>/usr/</code> directories can lead to a whole lot of research and fun findings - that&rsquo;s why I still bodge my way through Linux, even though I&rsquo;ve been &lsquo;haha linux kid&rsquo;ed so many times.</p>
<p>There&rsquo;s still some things that refuse to work - the fingerprint scanner, and the speakers, for some reason, are either not supported on Linux, or require some <a href="https://bugzilla.kernel.org/show_bug.cgi?id=208555">complicated kernel patches</a> that for the sake of my sanity I don&rsquo;t think I&rsquo;ll attempt. As well, now comes the process of wiping my old HP and figuring out how to reinstall Windows, and then handing it off to a family member. I also need to sort out some small little config problems here and there, but I don&rsquo;t run into them enough to bother. For the most part, what I need to work works fine: I wasn&rsquo;t planning on using the scanner, I have headphones or earbuds for when I need audio, and my programming environment works pretty much identically to my HP anyways. It&rsquo;s good that I managed to set everything up so quickly - I don&rsquo;t have to tote around such a bulky laptop anymore, and the extra battery life&rsquo;s definitely a boon for uni.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>The Googled one, as I found Chromium was a bit buggy in some respects, such as not letting me sign into my Gmail because the &lsquo;browser was insecure&rsquo;, and also not letting me save my passwords properly. I haven&rsquo;t found any performance differences, and to be honest, I&rsquo;m okay with not crusading the whole privacy narrative if I&rsquo;ll be able to check my bloody email.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>I never got around to enabling and really using Google Account sync, which apparently takes all your locally saved passwords and associates them with your Google Account instead. This has the added benefit of syncing extensions as well - something that would have been nice to maintain my preferences from. Having sync enabled makes switching installations and machines a lot easier, but I don&rsquo;t know if I want to bother.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>The Process Matters</title>
      <link>https://kewbi.sh/blog/posts/210905/</link>
      <pubDate>05 Sep 2021</pubDate>
      <author>Emilie Ma ◦ Kewbish</author>
      <description>On the journey as an end, not a means.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>I feel like I start a lot of these blog posts with stories from when I was little, but here&rsquo;s another: when I was in elementary school, I used to be fascinated by stop-motion animation<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. A very niche thing to be into - but then again, aren&rsquo;t all my hobbies? I watched hours of <a href="https://en.wikipedia.org/wiki/Shaun_the_Sheep">Shawn the Sheep</a>, some of the <a href="https://en.wikipedia.org/wiki/Wallace_and_Gromit">Wallace and Gromit</a> shorts, and tonnes of the little claymation (stop-animations created with clay) shorts on YouTube. I didn&rsquo;t have the access to, or the patience for, the extensive sets and equipment used by professional studios, so I settled for tinkering with my little Lego Friends sets. There was a book at my favourite library branch called <a href="https://www.amazon.ca/Brick-Flicks-Comprehensive-Making-Stop-Motion/dp/1629146498">Brick Flicks</a> that I must have read and reread cover to cover at least a couple times. I made some half decent animations in Windows Movie Maker (the old version packaged with Windows 7, if that means anything to you) just by importing hundreds of photos taken on the family point and shoot, and setting the duration of the slideshow as something like 0.05 seconds. All of a sudden, I could weave together stories about whatever took place in my imagination and act them out with little plastic people - it was nothing short of magical.</p>
<p>Stop motion&rsquo;s a pretty labour-intensive undertaking: each picture has to be lined up almost perfectly with the next, and each tiny movement has to be painstakingly planned. But that&rsquo;s if you&rsquo;re going for a good quality animation - and to be honest, grade-school-me was just looking for hours of free endless entertainment and maybe even a half-decent product at the end. I enjoyed the process of bodging together a camera mount and kneeling at the coffee table fiddling with arms and heads more than the end result, though my &lsquo;movies&rsquo; weren&rsquo;t that terrible either. Interestingly enough, there&rsquo;s a whole genre of behind-the-scenes videos for these stop-motion productions, especially from larger firms who not only film the actual series but also film the making-of. Just Google &lsquo;behind the scenes of [x show]&rsquo; - you&rsquo;ll get tonnes of results. I remember Wallace and Gromit had some interesting ones, as well as the franchise that did Coraline and Kubo - I think it was <a href="https://www.laika.com/">Laika</a>. I was enthralled by hours of BTS footage: I found it incredibly interesting how artists pieced minute movements into full-on action sequences into the final product.</p>
<p>This interest in behind-the-scenes continued throughout the rest of my phases: when I got into electronics and went through my pseudo-engineer stage, I binged <a href="https://www.youtube.com/user/jimmydiresta">Diresta</a>, <a href="https://www.youtube.com/c/Iliketomakestuff">ILTMS</a>, and <a href="https://www.youtube.com/channel/UCiDJtJKMICpb9B1qf7qjEOA">Tested</a>, among other channels. When I got into game development, I loved watching devlogs, getting way too interested in the technical details of whatever new features my favourite developers were working on. These devlogs were posted on a semi-regular schedule, so I had solid chunks of weekly entertainment, and a consistent stream of content. With my more creative interests - like bullet journalling - I turned to the numerous &lsquo;with me&rsquo;s on the Internet. There were &lsquo;plan with me&rsquo;s, &lsquo;paint with me&rsquo;s, &lsquo;Notion with me&rsquo;s, &lsquo;organize with me&rsquo;s, &lsquo;study with me&rsquo;s, &lsquo;bookbind with me&rsquo;s, and a whole other set of para-collaborative videos.</p>
<p>What ties all these things together - what ties all these &lsquo;with me&rsquo;s, behind-the-scenes cuts, and b/v/dev-logs together? Well, the process - the process of creation, development, and innovation. For little me, being able to watch the evolution of amazing large-scale projects I&rsquo;d never have the time, resources, or patience to carry out was like living vicariously through others. It was a sort of motivation and companionship as I tinkered away at my own work. As I look back, it&rsquo;s kind of interesting to note that I always preferred to watch the behind-the-scenes footage and to observe the journey, rather than to watch and marvel the end product. I think there&rsquo;s a reason for that, and I&rsquo;ve been trying to figure out what that reason exactly is.</p>
<p>I haven&rsquo;t quite got all the way there yet, but this is a thought-chain of untangling intrinsic motivations, justifying things I probably don&rsquo;t need to justify, and, most of all: trusting the process.</p>
<h2 id="from-consumption-to-creation">From Consumption To Creation</h2>
<p>I&rsquo;ve set my bio on pretty much all my social media as some variation of &lsquo;work in progress, trust the process&rsquo;. The &lsquo;process&rsquo;, to me, is the doing of things for the sole purpose of doing them, and maybe focusing a bit less on the end result. Maybe I find more enjoyment in just doing things for the sake of doing them, or in watching the development of something instead of taking an interest in what exactly they&rsquo;re making. It&rsquo;s true for a lot of the more conventionally &lsquo;less practical&rsquo; things like sketching in a bullet journal or trying a new recipe - hobbies or pursuits whose pursuits fulfill you more than what you end up creating.</p>
<p>On the topic of creation - I&rsquo;ve realized that I&rsquo;ve gone more from watching stuff about the process (spending hours scrolling through the latest devlogs - I don&rsquo;t want to talk about the amount of YouTube I watched as a kid) into participating in it myself (some of the more creative hobbies I&rsquo;ve been trying to explore this past summer). Even as I write this blog - I think I enjoy the process of writing these thought-chains down, than the end result, which I simply leave for future me to cringe at a couple months down the line.</p>
<p>Maybe some people&rsquo;s creations are fueled more by the goal, but for me it&rsquo;s always been more or less about the process - but I feel like this summer, and this past year, I&rsquo;ve been tending towards it even more. It&rsquo;s not always true for aspects of my life like academics, but maybe I should take some of my own advice and shift towards a more process-focused mindset for that as well. I&rsquo;ve been finding joy in just making stuff - I generally have no idea what I&rsquo;m ever going to do with the end products of my diversions, but I like that hobbies, and things beside tech, take my mind off what I&rsquo;m normally thinking about. When I bake or bookbind or obsessively doodle in my journal, the end product isn&rsquo;t really the goal - yet it also is, in a way, since it&rsquo;s a by-product of the process.</p>
<h2 id="software-for-its-own-sake">Software For Its Own Sake</h2>
<p>Tying all this back into development, I guess I&rsquo;d like to think more about developing software for its own sake. This goes back into a bunch of the ideas I&rsquo;ve had regarding <a href="https://kewbi.sh/blog/posts/210124/">hyperpersonalized</a> software, and what I want to end up creating, maybe even as a career. Often, the more whimsical, what-the-hell, why-not projcets are those that are explored for the journey and the process itself, not just practicality. Those projects are the ones that draw me in - I don&rsquo;t think figuring out web monetization and musing about the metadata possibilities of the web are going to cure cancer or figure into some magical, big-bucks data analysis, and that&rsquo;s fine. I want to build software and tools that I can personally learn from the development of, and enjoy the process of creating. If I&rsquo;m going to be honest, I don&rsquo;t think that those projects&rsquo;ll end up being another pixel-perfect Instagram clone complete with a well-documented REST API to pad my GitHub with.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Still, I don&rsquo;t think I&rsquo;ll ever be able to completely reject the slightly cynical and more pragmatic viewpoint that I&rsquo;ve been working with all this time. This post ended up being me trying to convince myself that accepting some things won&rsquo;t end up being all that practical is natural - and I think that&rsquo;s something I&rsquo;ll be working on for the next while. I&rsquo;d like to tend towards, yes, specifically targetting certain goals, but also enjoying the process. That takes trust in yourself, since you&rsquo;ll be building that process while also striving towards whatever you&rsquo;ve set as an aim. Right now, the more &lsquo;for the process&rsquo;y things I&rsquo;m doing, or have been thinking about, are developing some little TUI tools for personal productivity, and messing with my digital workflows. There&rsquo;s also been a lot of yak-shaving as well - I&rsquo;ve been writing a bunch of small wrapper scripts to automate tiny parts of my workflow - stuff that&rsquo;s not particularly impressive or typically &lsquo;useful&rsquo;, but that I find fun.</p>
<p>This&rsquo;ll be the last article I publish before I properly start UBC. I&rsquo;m honestly quite excited for this whole new fresh start, and most of the worries and concerns I have about the transition, is, I think, a result of having too much time and reflection on starting UBC, and not enough actually <em>starting</em> UBC. The anticipation&rsquo;ll be over soon - at the time of publishing, it&rsquo;ll be a couple days before I have my orientation right before all classes start. I hope to still be able to post somewhat frequently here, especially as I gain new perspectives and consider new ideas from whatever I&rsquo;ll be learning and diving into then. It&rsquo;s been nice to have this space to share my thoughts and work out what I genuinely think about some ideas in tech (see the Zettelkasten mentions and hyperpersonalization threads) - and hey, productive procrastination between assignments is always welcome.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>For a primer on what stop-motion is, individual pictures of various subjects are stitched together with a short frame-rate to create an illusion of movement. It operates on the same principle as the little flipbooks you might&rsquo;ve made or heard of as a kid - each picture contains small differences from the previous shot, thereby making it seem like whatever&rsquo;s in the photos is moving. A bunch of different mediums are used: clay is popular as it&rsquo;s sculptible and very tactile, and so are action figures (including Lego). Anything can really be used, including actual people, everyday objects, and creative paintings, textile art, and more.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>Summer Research School</title>
      <link>https://kewbi.sh/blog/posts/210822/</link>
      <pubDate>22 Aug 2021</pubDate>
      <author>Emilie Ma ◦ Kewbish</author>
      <description>On determinism and delightful doner.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>I&rsquo;ve mentioned it a couple times in the footnotes and conclusions of previous posts, but I recently wrapped up a wonderful time at the <a href="http://www.math.bas.bg/srs/newsite/srs/">Summer Research School</a>. Hosted by the Bulgarian High School Student Institute for Mathematics and Informatics, the program takes in about forty Bulgarian and international students to pursue an intensive research program over summer break. For three weeks, each student works with their mentor on a topic of inquiry of their choosing, and end up both writing a paper and creating a presentation to defend against mentors' questions. In past years, all students, including international ones, gathered in Bulgaria for the camp, but COVID restrictions meant that only the Bulgarian students were able to do so this year. Even though I participated virtually with a ten-hour time difference (I&rsquo;ve always been an early bird, but I will confess I dropped a couple of the 6AM lectures for the sake of my sanity), I had an amazing time, and I&rsquo;ve gained many valuable experiences: learning to write academically, creating my own research program, and hanging out with other like-minded youth.</p>
<p>I&rsquo;d heard about SRS from a friend a couple years ago (thanks Umang!) over the summer, just when the program was starting up. I thought it sounded enticing, what with the opportunity to be mentored through a proper research article, and getting exposed to an abridged and compressed version of the typical academic. To be honest, I didn&rsquo;t think my limited research experience - restricted to a very scuffed audio-visual random number generator at a district science fair and maybe playing up whatever I did during Google Code-in - was sufficient to be accepted. But when I got the acceptance email, I was super excited: I&rsquo;d been hoping to participate for a while, so it was a pleasant suprise.</p>
<p>SRS was a great opportunity for me, both to explore the fields of theoretical mathematics and computer science, and to meet other students passionate about their interests. I&rsquo;ve made fantastic memories here, and I’m very happy I attended.</p>
<h2 id="probabilistic-primality-testing">Probabilistic Primality Testing</h2>
<p>On my application, I listed cryptography, random number generation, and programming language theory as my main interests - three things that I have very insubstantial experience with. Going into SRS, I had no concrete project ideas, so when the coordinators sent out the list of proposed topics, I was happy to find something that sort of fell into the crypto bucket and seemed to combine CS with maths. That something was a project on primality testing, and all the interesting theory and algorithms behind it. While I had absolutely no idea about the field before (except perhaps a cursory glance at the Sieve of Eratosthenes), I&rsquo;m pretty proud of what I was able to do in my three weeks here.</p>
<p>My project specifically centered around probabilistic primality testing. In layman&rsquo;s terms, they&rsquo;re tests that differentiate prime numbers from non-prime, or composite, ones and that do this differentiating with some element of randomness. These primality tests are essential in modern cryptography, ensuring the security and reversibility of encryption and decryption in most systems. For the number-theory inclined, I analyzed the Fermat, Euler (Solovay-Strassen), and Miller-Rabin tests, specifically. I looked at the accuracy, or the number of composite numbers marked as prime (in essence, wrong results), and the efficiency, or the wall time elapsed to test the given numbers, for each test.</p>
<p>There also exist deterministic primality tests, or tests that verify the primality of a number with none of the randomness, and with 100% accuracy. For example, the Agarwal-Kayal-Saxena (AKS) test is notable for being a deterministic primality test, and one that runs in polynomial-bounded (more efficient than other options) time, at that. However, though deterministic tests are perfectly accurate and return no incorrect results, they&rsquo;re very slow compared to the probabilistic tests. This is why probabilistic primality tests are usually used instead - they&rsquo;re just more practical.</p>
<p>My research also included a proposal for a new variant of AKS, which I called probabilistic AKS. It replaced the computationally expensive and extensive checks needed to verify primality with fewer ones, at the cost of returning some incorrect results (as with all probabilistic tests). This test ran significantly faster than the deterministic algorithm, reducing the bounds from <code>soft-O((log n)^15/2)</code> to <code>soft-O(k(log n)^5)</code>, further dropping to <code>soft-O(k(log n)^4)</code> with the best case scenario.</p>
<p>All this analysis was done through Python (more on the technical implementations later) and a bunch of data conversion scripts that pulled the results out to a CSV file. I then collected all the data into a couple central Excel sheets for graphing. All the pretty figures and results are available in <a href="https://github.com/kewbish/srs/blob/master/Primality.pdf">the actual paper</a> and in the <a href="https://github.com/kewbish/srs/">project repository</a>.</p>
<p>I chose this project as I wanted to work on something related to my existing interests of CS and crypto, but I also wished to explore something new. That something new ended up being a whole bunch of modular arithmetic and the world of number theory - a decent challenge, given that I&rsquo;d never really looked at these concepts systematically before. I was also looking forward to having a mentor with me, which made me feel more confident to step outside my knowledge comfort zone and engage in something that&rsquo;d really let me learn something new.</p>
<h2 id="my-saviour-numba">My Saviour, Numba</h2>
<p>Even with my mentor, Pressiana Marinova, and her consistent support and guidance, there were a couple obstacles throughout this whole experience. One of which, and also the title of this section (you&rsquo;ll see why in a bit), was optimization. I initially had written my primality test implementations in <a href="https://www.sagemath.org/">Sage</a>, a Python-like mathematics system that I&rsquo;d heard of previously. I knew its more advanced capabilities for maths were quite powerful, so I thought I&rsquo;d try that. I also thought it&rsquo;d be faster than raw Python - but I was incredibly wrong. Once I got to writing the Miller-Rabin tests (read, the primality tests with more computations), testing even 10000 integers was becoming frustratingly slow. I tried switching to pure Python, which delivered a slight speed increase, but it was my friends (thanks Pranav and Sayam!) who suggested I take a look at <a href="https://numpy.org/">Numpy</a> and, the saving grave of my entire project, <a href="http://numba.pydata.org/">Numba</a>. These compile Python code down to lower-level languages, which, after a brief but difficult struggle with decorators and external functions, sped up my code from an average runtime of five minutes to five seconds. Pretty significant, and incredibly liberating (especially when I started implementing deterministic AKS - I don&rsquo;t think I could have gotten reasonable data for even a hundred integers without Numba).</p>
<p>Learning the background material itself was also a challenge. I had a vague understanding of some of the modular arithmetic and group theory from my past forays into crypto with <a href="https://cryptohack.org/">Cryptohack</a>. However, trying to wrap my head around all this new notation in the context of primality testing and the papers I had to read was a challenge. The first couple days of SRS were spent speedrunning modular arithmetic on Khan Academy and binge-watching Fermat&rsquo;s Little Theorem proofs off YouTube. Still, trying to comprehend all the theory was pretty difficult, especially since primality testing is a complex topic with a decent amount of prerequisite knowledge, so there wasn&rsquo;t a lot of easily accessible explanations of proofs or the tests. Then again, the project was an amazing crash course in number theory and modular arithmetic, and I&rsquo;d like to extend endless thanks to my amazing mentor and the resources she provided - without them, I couldn&rsquo;t have cracked even the first couple days' worth of material.</p>
<p>The last major struggle I had was dealing with the program deadlines. I kept up a pretty reasonable working pace throughout the entire camp, but I still ended up speedrunning the paper and presentation last minute. I wrote a good chunk (pretty much the entire analysis of results and discussion) on the day before the deadline day. To my credit, it was still a decent amount of time in advance, since I was behind Bulgarian time by ten hours. I also started the presentation completely from scratch (and with absolutely no knowledge of <a href="https://www.overleaf.com/learn/latex/Beamer">Beamer</a>) the day before I was scheduled to present my paper - not something I&rsquo;m most proud of. I ended up not having a ton of prep time, but I managed to muddle my way through satisfactorily. I remember planning to have finished my paper by the beginning of the last week, and having an entire week to prep my presentation, but that was certainly not the case. I don&rsquo;t even think it was due to time management - the program just crams a lot of material into a short period of time.</p>
<h2 id="the-cult-of-doner">The Cult of Doner</h2>
<p>But it wasn&rsquo;t all work - there was an appropriate amount of fun and games as well, even if I was an entire 9271km away from the Bulgarian students. There were a couple social nights and weekend activities over the course of the program, especially in the first week. Our online quiz night and extraordinarily cursed Cards Against Humanity game stand out as my favourite memories. I also enjoyed receiving a very thorough Bulgarian education on everything from Bulgarian music, food, innovations, and culture in our SRS Discord, which I <del>un</del>fortunately started.</p>
<p>Speaking of starting the Discord, I&rsquo;m quite glad we had that community as well, since I would have never been graced with the Bulgarian sensation of doner (or duner, apparently). I don&rsquo;t think it even originated in Bulgaria (at least, the places I found in Vancouver were either advertising &lsquo;Berlin-style&rsquo; or &lsquo;authentic Middle-Eastern&rsquo;, so take that as you will), but regardless: doner is a pita-style wrap-sandwich-burrito-esque concoction. And it&rsquo;s apparently really popular among the Bulgarian students of SRS: the literal second day the server had been running, I woke up to a deluge of doner pictures and discussion. Over the course of the week, I&rsquo;d come to learn what doner was, as well as agree to trying it. I eventually stopped by <a href="https://www.google.com/maps/dir//robson+street+doner/data=!4m6!4m5!1m1!4e2!1m2!1m1!1s0x548671883df1ec17:0xa031e83d87de69cf?sa=X&amp;ved=2ahUKEwjNmMvyjsbyAhVSJzQIHVoTC34Q9RcwAHoECAsQBA">this little</a> place in Vancouver to try it, thereby fulfilling my SRS doner bet duties.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Overall, I really, really liked SRS. As my first research experience, I gained valuable skills and insights regarding the whole academic procedure, things I&rsquo;m sure to apply in my future studies. However, I wish the program were longer, since it felt a bit like I was cramming an entire thesis process into three weeks. I didn&rsquo;t find that as enough time for the theory to really sink in, as well as not enough time to finish up my analysis to my standards. I also wish I&rsquo;d have been able to see what SRS was like in person - the photos and updates the Bulgarian students were posting were very enticing. Unfortunately, COVID was a major obstacle (and apparently they had a slightly scuffed location), but it would have been nice to get to know fellow participants more. As well, I would have been able to have closer feedback loops with my mentor - but that&rsquo;s besides the point. All in all, it was still an amazing experience, and has left me with incredible memories.</p>
<p>I&rsquo;d like to thank my mentor for her hard work and support throughout this entire rollercoaster ride of a program. Her clear explanations and daily checkins helped me get through even the worst obstacles. As well, much gratitude to the HSSIMI and SRS coordination team - I really appreciate all the work the team&rsquo;s put in to make the experience enriching and fulfilling, even for international students half a world away.</p>
<p>In the future, I plan to continue tinkering with my analysis, and finish editing my paper for potential publishing - I&rsquo;ve been looking at a couple youth journals in Canada. I&rsquo;d like to adjust my testing bounds, as well as iron out a couple inconsistencies in the amount of data collected due to time constraints during SRS. I also plan on diving deeper into the theory and underlying system of the AKS test to see if I can improve the probabilistic version more. I&rsquo;m decently proud of what I&rsquo;ve managed to produce given three weeks' time, but I can&rsquo;t help but focus on the tiny things I&rsquo;d like to fix. SRS has inspired me to put more time into considering research opportunities like this, but we&rsquo;ll see how that all pans out as school starts.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>A Plaintext Zettelkasten</title>
      <link>https://kewbi.sh/blog/posts/210815/</link>
      <pubDate>15 Aug 2021</pubDate>
      <author>Emilie Ma ◦ Kewbish</author>
      <description>On speaking at Augment Minds 2021 and my notetaking system.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>With my notetaking workflow, I enjoy working on the meta-flow, building tools, integrations, and new features for myself, just as much as I enjoy actually writing and filling out the content there. I&rsquo;ve recently been fiddling a bit more with my system, integrating additional principles of the wildly popular Zettelkasten system, and having tonnes of fun messing around with command-line tools and Vimscript. In fact, a couple weeks ago, I sat down and worked through my existing notetaking system wishlist: searching within files, jumping to files from outside of Vim, finally integrating tags and intra-note navigation, and more. I&rsquo;ve wanted to implement these for a while now, so finally getting them integrated with my Vim setup was a very satisfying weekend accomplishment.</p>
<p>As I finished up my setup, I also learned about <a href="https://kewbi.sh/blog/posts/210801/">Augmented Minds 2021</a>, a short unconference that took place a couple weeks ago. Prominent speakers in the HCI space (well, in layman&rsquo;s terms, cool people on Twitter) and a morning of discussion about tools for thought? That sounded like a dream come true - so I spontaneously registered for a ticket. While scanning the OpenCollective page, I noted that they were taking proposals for shorter talks throughout the conference: in fact, the entire unconference was built around these smaller breakout sessions. It seemed like a casual, fun way to share on a topic I&rsquo;m passionate about, and giving lightning talks at other conferences was something I was considering in the future anyways. Long story short, I impulsively signed up to deliver a talk on my Zettelkasten-in-progress, the first topic I could think of off the top of my head. So, among much more qualified speakers and more engaging presentation topics:</p>
<blockquote>
<p><em>Vim + FZF + RipGrep = A Plaintext Zettelkasten*</em><br>
A demo of my notetaking system, built around Vim, FZF (and FZF.vim), and rg, followed by an open discussion on building your own Zettelkasten systems.</p>
</blockquote>
<p>popped up in the schedule of events. I was decently nervous, but the opportunity to give a talk, and especially one in such a welcoming, open space, was something I was definitely excited and grateful for.</p>
<p>This post is a standalone discussion (and a bit about the experience of actually delivering the talk) on my current pseudo-Zettelkasten system adapted directly from my talk, but is the second part of my series on <a href="https://opencollective.com/psionica/events/augment-minds-7d13842a">Augment Minds 2021</a> that I started with <a href="https://kewbi.sh/blog/posts/210801/">this post</a>. If you&rsquo;re here to nerd out with me about personal knowledge management, this&rsquo;ll likely be the more attractive post, but feel free to check that one out as well - I go a bit more in depth on some of the amazing talks from the unconference.</p>
<h2 id="heres-a-video">Here&rsquo;s a Video</h2>
<p><em>&hellip; well, soon, anyways. I&rsquo;ll update this section with the talk recording as soon as it comes out.</em></p>
<h2 id="my-notetaking-system">My Notetaking System</h2>
<p>My Zettelkasten (or, really, pseudo-Zettelkasten) is entirely local and entirely Markdown, and my workflow with it involves a combination of <a href="https://github.com/vim/vim">Vim</a>, <a href="https://github.com/junegunn/fzf">FZF</a>, and <a href="https://github.com/BurntSushi/ripgrep">rg</a>. If you&rsquo;re not familiar with the concept of Zettelkasten, most people&rsquo;ll point you to <a href="https://zettelkasten.de">Zettelkasten.de</a>, and maybe <a href="https://reddit.com/r/Zettelkasten">r/Zettelkasten</a>. Look through a couple posts, and you&rsquo;ll be sure to get the gist of Niklas Luhmann, the creator of the system, and what he proposed, the central concept of atomic notes, and all the hyped-up software that people tend to use with it. My Zettelkasten&rsquo;s not much of a &lsquo;proper&rsquo; Zettelkasten besides in that it borrows some of the concepts of stages of notes, and some of the concepts of interlinking, but I think it&rsquo;s still interesting in terms of possible ways that it can be modified and expanded, even if you&rsquo;re striving for a by-the-books Zettelkasten approach.</p>
<p>First, let&rsquo;s look at the file structure of my system. Zettelkasten purists generally advocate a flat-file approach, with the usual argument being that your links should serve to connect and group files, instead of imposing a decision. As well, what if something belongs in two categories? Extra mental overhead, and even if you manage to subcategorize, you&rsquo;re increasing the sprawl and unmaintainability of your notes - or so people tend to say. Even with all these apparent cons, in my system, I work with a bunch of folders instead. I opted for this approach mainly because I take notes over several rather disparate categories, and because it makes things easier to navigate visually in a file manager. With just my first term at university, I&rsquo;ll be taking six classes, all in different topics. I have quite a bit of range with the notes, and to my brain, it makes more sense to group them in a folder. As well, with my linking system, which I&rsquo;ll touch on in a bit, I can still achieve the same knowledge-connecting ability.</p>
<p>Something else that&rsquo;s a plus with having an entirely plaintext productivity system is that everything can be backed up through Git or another system. I keep a repository on GitHub, and just run a sync script through cron to commit the changes in the root of my notebook.</p>
<h2 id="source-fleeting--literature-notes">Source (Fleeting / Literature) Notes</h2>
<p>What the Zettelkasten system calls fleeting, or literature, notes, I group into one big category of source notes. These are generally going to be the notes that I take from something I need to study, be it a paper, a video course on Khan Academy, or a textbook. I tend to jot quick thoughts down as I&rsquo;m going through the source material, and then return to take more detailed notes in my own words either with a second pass, or pausing between sections. Notes here are almost always linear, or linear-like, where I just go through the material again in the order it was presented in the source. I find that I don&rsquo;t really have time when I&rsquo;m taking notes in class to go through and network and piece things together. I&rsquo;m also a strong believer in the whole &lsquo;have something ready at each stage&rsquo; methodology - I don&rsquo;t want to neglect material just to add a couple linking notes. The format of these notes are also very non-atomic at this stage, since I&rsquo;m generally trying to collect all the information in one place with a bit more context.</p>
<h2 id="evergreen-notes">Evergreen Notes</h2>
<p>In terms of evergreen notes, I don&rsquo;t have many of them either - I&rsquo;ve just gotten the linking working not that long ago, and I haven&rsquo;t really been &lsquo;tending&rsquo; this digital garden for too long. However, I think my idea of these evergreen notes is more in line with the main Zettelkasten workflow. They&rsquo;re drawn either from source notes, though that&rsquo;s a bit rarer since I don&rsquo;t really see myself having marvellous interdisciplinary connections between, say, cold fronts and public-key cryptography (yes, those are real examples - you can thank ATSC113 and my vague interest in crypto). Otherwise, they&rsquo;re just collections of my own thoughts, which is usually more often where the evergreen notes stem from. Anything and everything goes here, from my thoughts on random posts I see on Twitter, to some of my life goals, as long as they have sufficient linkage surface area and context.</p>
<p>Here&rsquo;s an example: I played with Web Monetization not too long ago, and I found a bunch of posts and talk describing why it was super great and the next big thing, which I do appreciate and support, but I came up with a couple thoughts about why it&rsquo;s not quite working yet, and then I just wrote about it. Eventually, evergreen notes sometimes get promoted to their own blog post, like this web monetization one, and sometimes I translate blog posts into evergreen notes as well for older content, but let&rsquo;s finally get into the components that make my Zettelkasten more unique.</p>
<h2 id="my-tools-of-choice">My Tools of Choice</h2>
<p>My notetaking toolkit currently includes:</p>
<ul>
<li>Vim =&gt; I&rsquo;d been trying Vim out ever since I was on Windows, because I kept hearing my friends rave about how efficient, customizable, and smooth everything was, so I wanted to see what all the fuss was about. Long story short, I took to the idea of modal editing, and stuck to using it as my main code editor ever since. It makes sense that I want my notes to be as easily editable as possible, so I went with what I was familiar with.
<ul>
<li>This also brings up the nice bonus that I can interact with code right beside my notes, and add to my notes when I&rsquo;m thinking of something even when coding.</li>
</ul>
</li>
<li>FZF =&gt; FZF is a fuzzy-finder tool, where you can pass in a bunch of sources, and it&rsquo;ll search through all of them for you. It&rsquo;s useful outside of vim for searching through files and processes, but I mostly use it in conjunction with FZF.vim, a Vim plugin that wraps a bunch of commands and everything into a very nice interface.</li>
<li>RG =&gt; Ripgrep is a search tool, written in Rust, and it&rsquo;s extremely quick when searching through regexes and files. Honestly, I could have just gone with normal find, but as ripgrep integrates so well with FZF and FZF.vim, I thought I may as well integrate it.</li>
<li>CTags =&gt; CTags, or more specifically, Universal CTags, is a tagging utility that was built to be used to index code files and implement &lsquo;jump to definition&rsquo; features and the like. In my system, I abuse its ability to define custom languages and its existing mappings within Vim to make my notes linkable and navigatable.</li>
</ul>
<h2 id="search">Search</h2>
<p>Everything so far has been pretty vanilla - just modified Zettelkasten workflows. Well, here begins the spicy parts: I&rsquo;m first going to touch on notebook search, and how I&rsquo;ve integrated ripgrep and FZF.vim with shortcuts and aliases for editing, and then linking things together in a bit. I think search and linking are two of the big features why people generally turn to things like Notion, Obsidian, or Roam instead for their personal knowledge base, since it comes with those things built in, and you don&rsquo;t have to spend hours toying with Vim configs - but that&rsquo;s what makes me happy.</p>
<p>There are a couple different things I search in my workflow: files to open, files containing specific notes, or searching through my links. The first one, files to open, is done through Bash instead of within Vim. I alias <code>evb</code> to<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>:</p>
<pre tabindex="0"><code>cd /home/kewbish/EVB/;vim -o &quot;$(rg --files $evb | fzf)&quot;; ctags -R .
</code></pre><p>Ignore the <code>ctags</code>, but for now, but what this does is change directory into my notebook, look for all files, and open the FZF fuzzy searching window. I usually know what file I&rsquo;m going to work on when I&rsquo;m going to take notes - like, for example, my course notes or lecture notes, so I can just open them with this.</p>
<p>The second mini workflow is integrated within Vim, and is a remap of a FZF command. I use</p>
<pre tabindex="0"><code>command! -bang -nargs=* Sevb 
  \ call fzf#vim#grep(&quot;rg --column --line-number --no-heading --color=always --smart-case &quot;.shellescape(&lt;q-args&gt;), 1, {'dir': '/home/kewbish/EVB/'}, &lt;bang&gt;0)
</code></pre><p>this big blob of Vimscript to run ripgrep in my notebook folder. It looks a lot more complicated than it is, but I need to use the custom FZF.vim call because I need to a) search within file contents, as well as b) search all files within my notebook. I&rsquo;ve remapped this to <code>nnoremap &lt;leader&gt;se :Sevb&lt;CR&gt;</code>, so a quick <code>\se</code> gets me what I&rsquo;m looking for.</p>
<h2 id="linking">Linking</h2>
<p>The third searching command involves tags, which was what the earlier <code>ctags -R .</code> was for in my bash alias. Inspired by <a href="https://www.edwinwenink.xyz/posts/48-vim_fast_creating_and_linking_notes/">Edwin Wenink&rsquo;s plaintext Zettelkasten</a>, I use these tags instead to link between notes. I denote a link with <code>(#: link contents here)</code>, mostly because I&rsquo;d never type <code>(#:)</code> in normal notetaking. It&rsquo;s a bit clunky, but it also stands out visually, so I&rsquo;ve stuck with it. I&rsquo;ve defined this as a custom tag pattern in my <code>~/.ctags.d/</code> folder</p>
<pre tabindex="0"><code>--langdef=markdowntags
--languages=markdowntags
--langmap=markdowntags:.md
--kinddef-markdowntags=l,link,links
--mline-regex-markdowntags=/(^|[[:space:]])\(\#: ([^\)]*)/\2/l/{mgroup=1}
</code></pre><p>Every time I open my notebook with <code>evb</code>, the tags are generated, and I can then use the FZF.vim <code>:Tags</code> mapping, which I have as \st, to search through my links. While on a link, I can also use this mapping:</p>
<pre tabindex="0"><code>nnoremap &lt;leader&gt;ln va)y:exe &quot;:Sevb &quot; . substitute(substitute(getreg('&quot;'), &quot;\(#:&quot;, &quot;&quot;, &quot;/g&quot;), &quot;\)&quot;, &quot;&quot;, &quot;/g&quot;)&lt;CR&gt;
</code></pre><p>to search through my tags, and insert it somewhere. The first block here yanks my link to a register so I can paste it, then searches my notebook for similar topics as the content of the link. I can always change what I search for, and then quickly jump to the file position and paste the link. I can also use Vim&rsquo;s inbuilt :ts and g] commands to search through my links and jump to them, but I use that a bit less frequently. I think this linking system&rsquo;s pretty unique, and one of the biggest features that admittedly, most other software implements out of the box, but that I finally have, in my little plaintext notebook.</p>
<h2 id="the-experience">The Experience</h2>
<p>Admittedly, the decision to give the above talk was completely spontaneous, so I can&rsquo;t go on about some impressive intrinsic motivation. Yes, I wanted to talk, but I&rsquo;d like to think that it was more about sharing what my Zettelkasten was like. I also wanted to push myself out of my lurker-by-default existence at bigger events, and force myself to do something slightly outside my comfort zone. People talk about stretching yourself - giving this lightning talk, I think, is a great example of that. I&rsquo;m not afraid of public speaking per se, but it&rsquo;s one of those things I&rsquo;ll have to mentally steel myself for. Being able to share on something I&rsquo;ve been very into lately meant that I essentially could talk forever without a script anyways, so I didn&rsquo;t have to worry about not knowing what to say. Preparing for the talk wasn&rsquo;t an arduous process: mostly just piecing together past thoughts I&rsquo;d jotted down or thinking through the best order to present my notebook subsections. As well, with the small number of attendees for Augment Minds in general, there&rsquo;d be a minimal audience to, in the worst-case scenario, mess up in front of. Doing one slightly scary thing, but combining it with a bunch of mostly-familiar topics, is a recipe that I&rsquo;ll continue to apply in other places - it brings you more positive experiences than if I&rsquo;d, say, done a talk on a foreign topic with an audience of tonnes of people.</p>
<p>Not many people showed up to the talk, which I&rsquo;ll be positive about and call a good thing. With just a few people in the room, the little discussion session we had at the end was a lot more close-knit and meaningful. Getting to talk to other people at the end was honestly the best part of the entire Augment Minds 2021 experience - I really enjoyed getting to have these small group chitchats, and talk about alternative Zettelkasten systems, so thanks to everyone who engaged in that! Here&rsquo;s a brief, slightly abridged, list of the followup points that I took away:</p>
<ul>
<li>I&rsquo;d like to check out <a href="https://github.com/wookayin/fzf-ripgrep.vim">fzf-ripgrep.vim</a>
<ul>
<li>It appears to have more builtin rg bindings, and I wonder if I can pass the directory to search more easily (to avoid the mess of Vimscript everything currently is)</li>
</ul>
</li>
<li>Someone asked if I&rsquo;ve considered NLP, and how can I make fancy AI tools work for my thought
<ul>
<li>One of the projects by the hosting organization, <a href="https://psionica.org/tools/autocards/">Autocards by Psionica</a>, looks really interesting, especially since I&rsquo;ve been looking into flashcard and spaced-repetition models recently</li>
<li>Integrating notes directly into my calendar, or being able to pull between sources, would be interesting to consider</li>
<li>Tools like <a href="https://elicit.org/">Elicit</a> for coming up with a general scheme of things and terms to dive into - sort of like mapping a field - are also very appealing</li>
<li>A &lsquo;fancy AI&rsquo; idea: can I get some NLP tool (i.e. GPT{2, 3}) to distill information while I&rsquo;m researching? Coming up with plain layman&rsquo;s explanations of common things to look into would help me know what to look into first, and help me build a personal curriculum</li>
</ul>
</li>
<li>Another person asked if I use other old-school Linux utilities (the examples given for &lsquo;old-school Linux&rsquo; were sed and awk, so do with that what you will) and if they were powerful enough for me
<ul>
<li>I find my current toolkit powerful enough for me (right now), and I don&rsquo;t plan to switch anytime soon</li>
<li>Why have I stuck to such a minimal set? It&rsquo;s definitely enough for my use case, but there&rsquo;s also a config barrier that prevents a lot of people from taking this route, which is 100% valid logic</li>
</ul>
</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>Part of the reason why I like having my notetaking system in Vim, and stitched together with all these open source tools is because I feel that Vim&rsquo;s kind of become my Notion, or become my Roam. Or not specifically Vim, after all, but mainly the terminal. It feels like a kind of plaintext home to me, since I spend a lot of time programming and hacking away in the terminal anyways. There&rsquo;s something about being able to create a workflow that I fully understand, and that fits me perfectly, rather than have to try to slot myself into something that an external tool recommends. And I know, it&rsquo;s probably a lot easier and a massive waste of time in a lot of people&rsquo;s opinions for very small optimizations, but hey, it&rsquo;s my notetaking system, so I don&rsquo;t really have to explain myself, do I? Open source and plain text as general philosophies are some of the lesser points of my system, but I think they still matter. A lot of general purpose notetaking ecosystems like Roam cover a lot of the same features, but being able to have full control over something so integral to my learning and life is pretty important to me.</p>
<p>Since I gave the talk, I&rsquo;ve been able to experiment with, and really put, my system to test - I&rsquo;ve been working on a <a href="https://github.com/kewbish/srs">research project</a> on probablistic primality testing with the <a href="http://www.math.bas.bg/srs/newsite/srs/">Summer Research School</a> (which was an amazing experience and program, by the way - more on it in an upcoming post). It&rsquo;s a pretty number-theory-heavy field, and the first couple weeks of the program especially involved a lot of reading through the basics of modular math, theorem proofs, and processing jargon-filled papers. I&rsquo;ve been taking quite a number of notes, and I&rsquo;ve seen that having these improved searching and linking capabilities has significantly improved my workflow. I&rsquo;m happy that I took the time to finally get the features I&rsquo;d been longing for for ages finally into my system, but I think I won&rsquo;t be touching new Zettelkasten ideas for a while. I try not to mess with my system too often, or else I tend to get more tweaking done than actual work - I also try to limit myself to a couple indulgences of Vimscripting and diving into other people&rsquo;s systems a year. I&rsquo;ll see if I need any major changes to happen in my system once September rolls around and school starts, but we&rsquo;ll see - customizing my workflows is something I enjoy doing anyways.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>By the way, all my Vim commands can be found in my <a href="https://github.com/kewbish/dotfiles/blob/master/.vimrc"><code>.vimrc</code></a> - take a look there for my reference implementations if you want to replicate anything.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>Augment Minds 2021</title>
      <link>https://kewbi.sh/blog/posts/210801/</link>
      <pubDate>01 Aug 2021</pubDate>
      <author>Emilie Ma ◦ Kewbish</author>
      <description>On my first unconference and tools for thought.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Last weekend, absentmindedly scrolling through r/Zettelkasten, I stumbled upon a post for <a href="https://opencollective.com/psionica/events/augment-minds-7d13842a">Augment Minds 2021</a>, an unconference dedicated to discussing the development and design of tools for thought. Taking a quick look through the listed speakers - names like Maggie Appleton, Adam Wiggins, and Linus Lee, along with Slim Lim, Regina Ponciano, and Jungwon Byun (also known as a significant subset of the people I like to keep up with on Twitter) - I decided to attend. It was a spontaneous decision, but one that I&rsquo;m happy with - that Sunday was absolutely amazing<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>Augment Minds was an unconference that focused directly on these facets of tools for thought, which was something that I hadn&rsquo;t heard of or personally participated in before. Running for a few hours early Sunday morning, it was organized by <a href="https://psionica.org/">Psionica</a>, an indie collective striving to innovate on tools for extending and facilitating thought. Psionica has some incredible projects around the ideas of accelerating and expanding thinking with NLP and other technologies, so go check those out. There were a couple scheduled lightning speakers - all of whom are pretty prominent and well-known in the tools-for-thought space. As well, a bunch of other tools-for-thought enthusiasts, creators, and developers led breakout rooms later in the event, which was facilitated via a virtual <a href="http://gather.town/">gather.town</a> room. It was equal parts chatty, casual, and insightful, with a couple heaping servings of inspiration and wonder added with some demos and talks. This style of &ldquo;unconference&rdquo;, or less formal gathering, suited itself well to the vibe of Augment Minds, and I&rsquo;m very happy to have attended.</p>
<p>If you couldn&rsquo;t tell by the <a href="https://kewbi.sh/blog/posts/201206/">myriad</a> <a href="https://kewbi.sh/blog/posts/201220/">of</a> <a href="https://kewbi.sh/blog/posts/210425/">related</a> <a href="https://kewbi.sh/blog/posts/210516/">blog</a> <a href="https://kewbi.sh/blog/posts/210124/">posts</a>, tools for thinking, especially through the lens of CS and human-computer interactions, is something I&rsquo;m pretty passionate about. Maybe it&rsquo;s just the part of me that wants to relentlessly optimize my workflows, without, well, putting any actual work through them, but tweaking and exploring the online ecosystems for transformative tech like this has been something I&rsquo;ve started to enjoy more and more over the past couple months. One of the reasons I wanted to attend Augment Minds was, yes, to say hi personally to people I&rsquo;ve been following online for a while, but mainly to gain new perspectives and see what these influential people were thinking and working on. Tools for thought is a decently small and new field, so maybe it&rsquo;s easier to become known, but it also feels like a close indie community, which is something I really appreciate. Getting to talk to other people who were similarly oddly interested in notetaking or mediums for thought was an enjoyable experience, and I&rsquo;m glad that the cute audio-spatial format of Gather Town worked well here.</p>
<p>The other, smaller, reason I wanted to attend was to deliver a short talk of my own. I&rsquo;ll talk more about this in another post, perhaps, but I thought the combination of a low-pressure, chill environment and a topic that I&rsquo;m deeply into was too good to pass up. I&rsquo;d also just started working on polishing and connecting my fresh new iteration of my <a href="https://kewbi.sh/blog/posts/200607/">Zettelkasten</a> system, which was something I was already planning to share as a blog post. Writing a talk and a blog post are two entirely separate endeavours, but I managed to turn the rough outline for a post I had into a decently serviceable talk on how I use Vim, RipGrep, FZF, and Universal Ctags to maintain my plaintext notebook. It was a fun experience, and I got to discuss a bit with the participants about their thoughts on a terminal-only system like the one I have.</p>
<p>I&rsquo;m glad I had the chance to attend such a striking conference - this post will detail more of my thoughts about it, while my next post will be a recap of my talk as well as a bit on that experience as a whole.</p>
<h2 id="lightning-talks">Lightning Talks</h2>
<p>The only pre-scheduled part of the event was the lightning talks, which ran for maybe seven minutes each and were all grouped together at the beginning of the conference. Each talk was quite unique in subject material, and each definitely has key takeaways that I found novel.</p>
<p>In order of presentation:</p>
<ul>
<li><a href="https://maggieappleton.com/">Maggie Appleton</a> - on tools for thought from a cultural perspective
<ul>
<li>As an anthropologist, she explored some of the more traditional mediums for thought (pencil and paper, counting, etc) as cultural icons. I&rsquo;d never really considered the analog side of tools for thought, let alone the historical and societal implications, so this was an interesting discussion.</li>
</ul>
</li>
<li><a href="http://slim.computer/">Slim Lim</a> - on programming languages as tools for thought
<ul>
<li>I agree with what she points out with the different paradigms and &lsquo;mindsets&rsquo; that programming languages encourage, and how their workflows change how someone as a programmer thinks. I&rsquo;ve felt similarly when learning Racket, coming from Python, and how they&rsquo;re often neglected in explaining how to mentally migrate between languages.</li>
</ul>
</li>
<li><a href="https://martinezponciano.es/">Regina Ponciano</a> - on the limitations of a Zettelkasten
<ul>
<li>Considering the origins and personalities behind the rise of the Zettelkasten system was an interesting perspective, especially with connecting race and gender to Zettelkasten usage. I hadn&rsquo;t thought about the lack of citations and context in common systems, certainly inspiring.</li>
</ul>
</li>
<li><a href="https://adamwiggins.com/">Adam Wiggins</a> - on researchers in the HCI space
<ul>
<li>It was really fun to see the graphs and breakdowns of people in this tools for thought space, and trying to look through handles to see if I could recognize anyone. The analysis really does show that tools for thought is a very diverse (at least, job- and career-wise) field, and it&rsquo;s cool to see how many different walks of life people come from.</li>
</ul>
</li>
<li><a href="https://twitter.com/jungofthewon">Jungwon Byun</a> - on <a href="https://elicit.org">Elicit.org</a>, a GPT-3 backed thought engine
<ul>
<li>This was one of the demos that stood out to me most, since Elicit&rsquo;s obviously very feature rich and I can see some applications where it&rsquo;d make a nice addition to my workflow. For example, I found the exploration-of-a-field search tool really intriguing - it&rsquo;s something I&rsquo;ve been looking for myself when trying to dive into new areas of study. Right now, there&rsquo;s <a href="https://learn-anything.xyz">learnanything</a>, but this only has user-submitted and user-curated paths. It&rsquo;s a great application of NLP and GPT-3, and I hope to see more of these &lsquo;brain assistant&rsquo; type things around in the future.</li>
</ul>
</li>
<li><a href="https://thesephist.com">Linus Lee</a> - crashed out, will fill in later</li>
</ul>
<p>I stopped by some other talks, such as Flancian&rsquo;s <a href="https://www.youtube.com/watch?v=zPPdFvMJDgQ">demonstration</a> of <a href="https://anagora.org">Agora</a>, which I thought was really innovative - both technically or structurally with the pulling, pushing, and stoa features, and socially, with the collective knowledge base system. I&rsquo;ve spent a bit of time clicking around, and it seems full-featured and very well designed. I also popped into <a href="https://www.youtube.com/watch?v=xP93UiFQU7k">Adam Wiggin&rsquo;s discussion on a research mindset</a> - I found centering the discussion on mindset and attitude interesting, since most of the time &lsquo;research&rsquo; gets put more into the materialistic or accomplishment-heavy point of view. With Paul Bricman&rsquo;s talk on what&rsquo;s beyond knowledge graphs, I found a lot of similarities to Linus&rsquo;s recent posts about <a href="https://thesephist.com/posts/inc/">append-only notetaking</a>, which is a philosophy I agree with. I haven&rsquo;t really found the use-case to implement completely append-only notes (I can view enough history over time with Git), but Paul&rsquo;s points about timestamps, addressing, and linking are all parts of my notetaking system that I still want to explore and improve on. I haven&rsquo;t had the opportunity to go through any recordings (if available) at the moment, but I&rsquo;m sure the other talks were just as insightful as the ones I attended in Gather.</p>
<p><em>Note: I&rsquo;ll update this section with links to the recordings as soon as they&rsquo;re made available, and fill in or add to my thoughts on a couple of the lightning talks that I missed, so check back in a bit. In the meantime, <a href="https://www.youtube.com/watch?v=zPPdFvMJDgQ&amp;list=PLNl3dTYSs4b7hWt1AT7O5p_MuU3tFtWjb">here&rsquo;s a link</a> to the currently uploaded recordings. If something&rsquo;s updated recently and I haven&rsquo;t added a link yet, let me know.</em></p>
<h2 id="vibes-and-energy">Vibes and Energy</h2>
<p>Another thing I really liked about the conference was the buzz, almost, that filled the main rooms. In a way, it was technically audio buzz - Gather has a spatial audio feature that lets you listen in on muffled nearby conversations - but it was also a very bright atmosphere. It was exciting to see all the innovative and explorative ways people were thinking about how to express their own thinking. With software demos like the Agora I mentioned above, and people sharing their own digital gardens, I got to investigate several new ways of managing thought. Talking with others about creating our own Zettelkasten systems and notetaking workflows was an eye-opening experience, and even though I generally tend away from socializing, I found it pretty fun to meet all these new people. There&rsquo;s a certain aesthetic, I guess, that comes form having so many like-minded people interested in a topic all crammed into a space chatting. The choice of Gather as a meeting platform really helped to amplify this casual, collaborative environment, and I think more conferences and meetings should consider similar platforms for their own events.</p>
<h2 id="conclusion">Conclusion</h2>
<p>If I had to pick a favourite part of the entire event, I&rsquo;d probably say getting to meet all these people in a very chill, casual space. It was a great opportunity to finally say hi and speak to people in the space that I&rsquo;d been quietly following along with for a while, and collecting handfuls of new handles to follow was also fun. On the other hand, a small thing I&rsquo;d maybe give as feedback to the organizers would be to structure, or at least label, the downtime between scheduling and organizing people into rooms and the actual meetings. Between events, there was some awkward quiet small talk and mingling, but that transition period could have been more clearly defined. But that&rsquo;s a small thing - the event was well-organized and streamlined, and I&rsquo;d definitely recommend it to friends.</p>
<p>In terms of takeaways and inspirations, I saw the entire unconference as a clear sign that personal knowledge management and interfaces for thought are growing and thriving fields. I saw a very widespread list of topics in the breakout schedule, and there&rsquo;s an aspect of the space for everyone to explore. I&rsquo;d like to look more into the open source ecosystems and networks or collectives of people around tools for thought - I saw the Flancia Collective mentioned, as well as <a href="https://www.inkandswitch.com/">Ink and Switch</a>, and of course, the organizing Psionica group. In the future, I&rsquo;d like to also give more lightning talks and attend more conferences in general. Speaking really isn&rsquo;t all that scary, and I genuinely like the process of coming up with a presentation and sharing knowledge with others (even if it&rsquo;s spedran the day before the conference, but oh well). As well, I was very pleasantly surprised with how many new ideas were sparked from this unconference, so I&rsquo;d like to go attend more in the future - I have my eye on a couple further in the future.</p>
<p>I&rsquo;m just waiting for recordings to come out before I write up a text version of my talk, and share the video of my actual session. Near the end of my presentation, I was talking with someone about my tools and why I chose them, and I got a great RG x FZF plugin recommendation, which is something I&rsquo;d like to look into before I finalize the post. As well, I realized after the fact that several of the commands I shared in my presentation could be cleaned up quite a bit, so I&rsquo;ll be taking the time to do that. Some ways I&rsquo;m implementing notebook functionality aren&rsquo;t actually best practices, but oh well - you live and you learn. I&rsquo;m excited to finally show off my system in a post - working on it has been a goal of mine for a while now, and I&rsquo;m happy I finally got to it. If you&rsquo;re also into nerding out about knowledge management, check back in a week or two - hopefully, I&rsquo;ll have posted that article by then.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Sunday was also the kickoff event for the <a href="http://www.math.bas.bg/srs/newsite/srs/">Summer Research School</a> in Bulgaria, though I&rsquo;m participating virtually, 10 hours away. It&rsquo;s been a super fun program so far with plenty of challenging maths and CS to wrap my head around. The mentors, counsellors, and other students have been absolutely iconic so far, and I&rsquo;m looking forward to getting to know them and my research topic better.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>Software as Containers</title>
      <link>https://kewbi.sh/blog/posts/210725/</link>
      <pubDate>26 Jul 2021</pubDate>
      <author>Emilie Ma ◦ Kewbish</author>
      <description>On browsers, terminals, and the boxing principle.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>When I was little, I had a thing for lists. Yes, lists - of next year&rsquo;s required school supplies, of things to bring to summer school, and of groceries that I&rsquo;d try to optimize a path through the store for whenever I&rsquo;d tag along shopping. Regardless of the list&rsquo;s contents, something about its bullet points and orderly collections of information was captivating, and without realizing it, I&rsquo;d end up structuring my own systems around lists for a while to come<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. Even now, most of my notetaking and organization still <a href="https://kewbi.sh/blog/posts/210516/">revolves around list-like methods</a>, though I&rsquo;ve since drifted from my original requirement for intensely managed structure.</p>
<p>Lists were a way I could distill knowledge down to its core essence, and have it all in one place. Forms of structure and organization like this have become things I value - they drop information I&rsquo;m interested in into a central location, where I can process them and have an overall picture of everything. Lists serve as containers for information, and easily ordered, edited, and accessed ones at that.</p>
<p>In a way, everything I&rsquo;ve discussed about lists also relates to certain other organized structures, albeit digital ones. I&rsquo;ve noticed that I tend towards two specific realms of cyberspace: the Internet, through web development and browsers, and the command-line, with its wealth of terminal user interfaces. In this post, I&rsquo;d like to think about these platforms as intermediaries for work of all sorts, and explore why I&rsquo;m so drawn to them.</p>
<h2 id="containers-for-centralization">Containers for Centralization</h2>
<p>Web browsers, the terminal, and many apps all aim to be containers: an encompassing solution for their given niche. They&rsquo;re collections of information, where everything about something in your life can be found. With a web browser environment, for example, that&rsquo;s likely where you&rsquo;ll find all of your browsing history, your tabs, and your Wikipedia rabbit holes. Containers range from widely ranging (your computer) to specific applications (consolidating all your social media inboxes into one app, or an all-in-one fitness buddy). Most platforms, I&rsquo;d say, are striving to be containers - what I want to investigate probably also applies if you architect your life around other systems instead of the web or the command-line, like mobile apps, an e-ink tablet, or plain old paper.</p>
<p>As I discussed in the introduction, containers are nice. I know that if I want to check my calendar, I can trigger a shortcut to open my terminal, where I can see my meetings and todos blocked out. Instead of jumping between a bunch of different apps, one for todos, one for meetings, and an internal one for communications, it&rsquo;s all in one place. There&rsquo;s something about containers that makes them so satisfying to use, and so tempting in terms of wholly trusting them with a portion of your life.</p>
<h2 id="the-boxing-principle">The Boxing Principle</h2>
<p>I&rsquo;m not sure if there&rsquo;s a name for that phenomenon, but I&rsquo;ll nickname it the boxing principle. It&rsquo;s the comforting feeling of being able to collect things in one place, and even if it&rsquo;s at times redundant or not the best place for information, it still feels grounding. It&rsquo;s the feeling about having the power to draw from a central repository of anything - something I think that&rsquo;s only become more desired as apps and services become increasingly niche and targeted. And it&rsquo;s also what I think proponents of platforms like Notion and Roam seek, especially as they characterize their app of choice as the be-all-and-end-all of their productivity needs.</p>
<p>Notion&rsquo;s premise, right smack on their front page in 74px font, is that they&rsquo;re the &lsquo;All-in-one workspace&rsquo;. Users can &lsquo;write, plan, and get organized&rsquo; with it, and it&rsquo;ll be the &lsquo;one tool&rsquo;. Implied, of course, is the &lsquo;you&rsquo;ll ever need&rsquo; - and if you&rsquo;re someone who&rsquo;s filled out entire life dashboards in the app, why would you ever need anything else? For members of the #roamcult, the same follows, and I&rsquo;m sure everyone&rsquo;d agree if you switched out the appropriate slogans for the taglines of their apps of choice. These companies actively want you to centralize your life in their products and make use of all of its features, becoming your &lsquo;second brain&rsquo;, because that&rsquo;s their business - and to be fair, there&rsquo;s nothing wrong with that.</p>
<p>I&rsquo;m not saying the boxing principle or companies that exploit it to entice you into their services are bad. However, I think they&rsquo;re something to consider as you build your own &lsquo;life stack&rsquo;, or choose the apps that&rsquo;ll bear the brunt of your digital life. For me, my calendar, notetaking, learning, and (software) development are all terminal-based, and my social media and communications are mainly in the browser. It&rsquo;d be interesting to build my own set of tools that cover all of these use cases, but for now, I&rsquo;m trying to keep my tools either easily customizable, or migratable. I&rsquo;m not worried about Gmail, Discord, or Slack drastically changing - if that happens, I&rsquo;m sure a more global migration will take place - since I don&rsquo;t depend on a more customized workflow with those. With my terminal apps, however, they&rsquo;re all ones that I&rsquo;ve either heavily configured, built at least partly myself, or decided that fit my needs well. I don&rsquo;t really see the point of investing so much in a container, and &lsquo;filling it up&rsquo;, to continue the metaphor, while it doesn&rsquo;t match the workflow I need.</p>
<p>There&rsquo;s also the question of if an application for your container is the best fit for the job. Continuing with the Notion / Roam thread, common examples I&rsquo;ve seen come up when I discuss the topic are things like custom timeblocking views, spaced repetition, and grade calculators. I&rsquo;ve seen people come up with gorgeous implementations in many different apps, and while there&rsquo;s the voice in the back of my head going &lsquo;they could have just used Google Calendar / Anki / Excel&rsquo;, I&rsquo;m suitably impressed. I&rsquo;m guilty (if this is really something to lay shame to) of this myself. It&rsquo;s arguably easier to use an existing notetaking app than to rig one that has spaced repetition, linking, search, and more all in Vim - this, I concede. But that&rsquo;s the draw, and the temptation of existing containers - I have an existing system set up, how difficult can it be to shape it and add new features so I can have everything in one place? It&rsquo;s a difficult balance, and while I&rsquo;ll ask myself over and over why I bother to create custom scripts to have things in the terminal or browser, I&rsquo;m not likely to give up my workflows anytime soon.</p>
<h2 id="easy-customization">Easy Customization</h2>
<p>There&rsquo;s also something to be said for the ability to customize, however. Many apps, including the examples I touched on above (Notion, Roam, and Vim), have infinite, or nearly infinite, ways to add plugins and develop new functionality. With the browser, for example, it&rsquo;s <a href="https://kewbi.sh/blog/posts/210124/">relatively easy to create your own extension</a> to scrape, manipulate, or connect whatever data across pages as you see fit. I think having the ability to extend and customize itself is almost a core principle of being a container - otherwise, why would people bother investing more into your app if it doesn&rsquo;t fit their specific use cases?</p>
<p>As well, since containers contain all the information you&rsquo;d ever need in a specific domain in your life, operating on what&rsquo;s inside can provide larger insights and innovative ways to work. If a container&rsquo;s especially large (like a browser or command-line environment), even more can be done to create pipelines and connections. Having these abilities to customize and extend containers is another part of why they&rsquo;re so attractive. It&rsquo;s workflow inertia, where people don&rsquo;t see a point in switching apps or creating a whole new profile if their needs can be addressed with just a couple tweaks or configurations.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I&rsquo;ve been working on revamping my <a href="https://kewbi.sh/blog/posts/200607/">notetaking system</a> and personal productivity flows recently, so I guess this post is a more in-depth reflection on (and justification of) the choices I&rsquo;ve made - namely, to stick with a obscure custom-built approach. In the end, it&rsquo;s my workflow, so there&rsquo;s no one really to explain or report to, but it&rsquo;s been nice to expand my ideas on why I&rsquo;ve stuck to my cobbled-together systems of web extensions and local bash scripts. The containers I&rsquo;ll use might, and will, change, but I hope the principles of how I use them will stay the same.</p>
<p>Speaking of my notetaking system, I&rsquo;m very excited about a new addition or two that I&rsquo;ve managed to work in, mainly centering around linking, searching, and navigating my digital notebook. In typical Kewbish fashion, it consists of misusing an existing tool, as well as some difficult-to-parse regex, so I&rsquo;m looking forward to creating a writeup on that, also touching on a talk I gave earlier (I&rsquo;ll discuss both in a bit). I&rsquo;ve been reading a bit more on the Zettelkasten methodology, and while I&rsquo;ve changed several key parts of it, I like what I have so far. The system&rsquo;s likely to adapt and evolve over the next few months, but as with all slightly unnecessary deep-dives on productivity, I&rsquo;m happy with it.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>I&rsquo;m fully aware I sound insanely obsessive over literal lists, but I promise I&rsquo;m fine, and that this whole introduction is meant to be a segue into the main post.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
