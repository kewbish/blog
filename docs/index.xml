<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Yours, Kewbish</title>
    <link>https://kewbi.sh/blog/</link>
    <description>Latest Yours, Kewbish posts</description>
    <generator>Hugo + Yours, Kewbish</generator>
    <lastBuildDate>Sun, 10 Jan 2021 17:01:42 -0800</lastBuildDate>
    
	<atom:link href="https://kewbi.sh/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>RSS, bookmarks, &amp; Nitter</title>
      <link>https://kewbi.sh/blog/posts/210110/</link>
      <pubDate>10 Jan 2021</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/210110/</guid>
      <description>On centralizing media consumption.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Over the past maybe two months, I&rsquo;ve been hoarding a list of nearly all the people I follow around the internet in a text file. It started out as a list of handles and websites for a small group of people, but quickly <a href="https://kewbi.sh/blog/posts/201220/">branched</a> out as I found new &lsquo;layers&rsquo; of interesting individuals. Through the power of The Algorithm™️ (and some branching), the list briefly expanded to a concerning length before I pruned it down to active, regular creators. Some of these people are on Twitter, others have a short writing project each week, and others put out long-form essays every so often that I find engaging. Whenever I was in need of something to productively procrastinate with, I&rsquo;d pop open the file, simply named <code>cool.md</code>, and go check in on what people had done in the last few days or so.</p>
<p>With this new content regularly coming in, I&rsquo;d also developed a need to bookmark articles that I wanted to read either later, or keep in mind to revisit sometime in the future. This sort of thing would usually be from a site that had one or two pieces I wanted to keep an eye on, but not a site that I&rsquo;d want to consume content from regularly. To give you a sense of what fills this category, stuff like tutorials and productivity advice appears regularly. At the moment, I have a <a href="https://andymatuschak.org/prompts/">long essay</a> by Andy Matuschak I&rsquo;ve been meaning to read for the last week but haven&rsquo;t gotten the time to yet there. Apparently, people call files of this sort their &lsquo;attics&rsquo;.</p>
<p>I&rsquo;ve been meaning to collate the websites and RSS feeds of the aforementioned people for a while, but hadn&rsquo;t bothered to set up an RSS reader yet. Most of the ones I&rsquo;ve seen have a reader view, folders, and favouriting - while that&rsquo;s certainly a must-have for some people, I was looking for something much simpler. Yet after scouring the Internet, I&rsquo;ve found that the intersection of my rather specific criteria seem to be the odd Chrome extension or Android app, instead of any established site. I&rsquo;d been searching for something small to work on over winter break, so I decided I may as well try to gain some insights into my content consumption<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> and do a bit of programming<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> as well.</p>
<p>This is a log of what I&rsquo;ve done to build <a href="https://github.com/kewbish/matter">Matter</a>, my personal (very minimalistic) RSS reader, and also keep track of all the other feeds and bookmarks as well.</p>
<h2 id="rss">RSS</h2>
<p>I broke the contents of the <code>cool.md</code> up into three subsections: people (on Twitter), articles (personal websites, most with RSS feeds), and bookmarks (things I wanted to get around to reading someday). I decided to tackle the RSS reader first - I&rsquo;d live without checking Twitter, and keeping a list of bookmarks in a text file was not optimal, but fine for now.</p>
<p>As mentioned in the introduction, I spent a while looking for RSS readers. I was leaning towards Feedly, but I also kind of wanted to work on a small project. (At least, that&rsquo;s my justification for it, I really have no idea why I decided this was a good idea either.)</p>
<p>I wanted it to feel sort of like <a href="https://lobste.rs">lobste.rs</a> or <a href="https://news.ycombinator.com/">HackerNews</a> - just a simple collection of links. Most RSS readers were a bit overcomplicated, in my opinion, for what I wanted it to do: collect links so I could later <del>waste time</del> develop my personal knowledge with them. I wasn&rsquo;t very interested in a reading pane or annotations - those I could do in my notes repository, just to keep everything in one place. This way, I&rsquo;d avoid having to make more glue scripts to import and export and shuffle data around.</p>
<p>I ended up with something like this:</p>
<figure>
    <img src="https://i.imgur.com/PB8bVVL.png"
         alt="Figure 1. Matter, my personal RSS reader."/> <figcaption>
            <p><em>Matter, my personal RSS reader.</em></p>
        </figcaption>
</figure>

<p>It&rsquo;s basically a reskin of my blog&rsquo;s archive page, but I think that the simplicity makes it feel less addicting and less complicated-for-the-sake-of-marketing-and-features. I wanted to keep the same minimalist atmosphere I get from Lobsters and HN with Matter, and while the execution (read: code) was perhaps not very clean, it works nicely.</p>
<p>I now find that it&rsquo;s a lot easier to remember what I&rsquo;ve read and where I&rsquo;ve read it - I have fewer sources to scour before I find the one post I was trying to think about. It&rsquo;s also nice that I can finally have one feed for everything. Reading now feels more engaging, rather than something I do purely out of boredom (which biases towards short articles and quick posts), though boredom still factors into when I read. Matter solves a lot of the annoyances I&rsquo;ve had with reading blogs: it felt like too much work to go around and click through all the links in the <code>cool.md</code> file, and I&rsquo;d often miss or re-find articles since I didn&rsquo;t have a central place to keep track of them. I like it so far, and we&rsquo;ll see how my usage of it changes in the future.</p>
<p>I&rsquo;m also doing a little experiment with tracking articles over the month of January - I plan on writing a bit more about it at the end of the month.</p>
<h2 id="bookmarking">Bookmarking</h2>
<p>After I&rsquo;d gotten the RSS parsing done and dusted (somewhat less difficult than expected), I was also looking for a place to keep my temporary bookmarks. These are usually longer articles I don&rsquo;t have the time to read right this second, but that I&rsquo;d like to read in the near future. I try to group reading these over the weekend whenever I have a break (which is rather infrequently, but we&rsquo;re trying our best). With the <code>cool.md</code> file, I&rsquo;d usually reach for the shortest article, and often left longer articles, and those added earlier, for ages.</p>
<p>I already keep a private Git repo with all my school and personal notes, and I thought this might be a good place to use it. Yes, I could have used Pocket, Evernote, or even the Chrome bookmarks bar (oh the horrors), but I wanted to sort of keep my bookmarks and my notes in the same place. The rationale was that I&rsquo;d be more inclined to take notes and track things down, but more about this at the end of January. I also sort of wanted Matter to be my singular feed and source that I could check regularly, sort of like an <a href="https://jetgirl.art/2019/07/21/rss-is-better-than-reddit-twitter-and-email-subscriptions-for-updates/">all-encompassing life thread</a>.</p>
<p>So, I slapped together a simple function to pull in the list of comments from a GitHub issue. (Note, if you&rsquo;re going to do this, maybe remember to disable email notifications.) Through Matter, I can add new bookmarks (with or without a short note about its purpose), and delete ones I&rsquo;ve just read. As for technical details, the GitHub API is actually surprisingly painfree with comments and issues - I just had to feed it a repo, an issue number, and a PAT.</p>
<p>With this, I notice that while I still kind of bias towards first reading shorter articles, I&rsquo;ve also been sort of encouraged to go in a vaguely chronological order (in terms of adding said article to Matter). I definitely also remember to refer to these more, especially as they display on the top of all my other RSS feeds and articles. I also perceive it as easier to add items, even though technically opening Matter and pasting in a link takes about the same time as opening a Markdown file and editing one in.</p>
<h2 id="twitter">Twitter</h2>
<p>I&rsquo;ve realized that, for someone who doesn&rsquo;t even have a Twitter account, I spend a relatively disproportionate amount of time on Twitter. It&rsquo;s mostly to keep up with a couple people whose work gets posted to Twitter first, as well as explore some of those branching threads that seem to come up every now and then. In the <code>cool.md</code> file, I kept the list of Twitter handles mixed with a list of blogs as well, and would go manually decide to check in on one whenever I was bored.</p>
<p>However, this was a bit annoying - for all the supposed shortcomings of the Twitter feed, I&rsquo;d still say that having one place to catch up on the latest whatever is still markedly better than having to manually go through a bunch of profiles. I briefly toyed with the idea of actually creating an account and making a Twitter List for myself. However, I also realized that this would incentivize spending <em>more</em> time on Twitter, not streamlining the reading process, and end up not solving the problem.</p>
<p>I looked around for some way to make an RSS feed out of certain Twitter handles without an account - after all, I now had an RSS reader, and I thought I might as well also use that for Twitter. There were some seemingly defunct projects available - <a href="http://twitrss.me/">twitrss.me</a> was one of the free ones I checked out. (It&rsquo;ll throw an internal server error if you try anything; I assume the project&rsquo;s a bit dead.) However, after enough searching, I found that <a href="https://nitter.net/">nitter.net</a> has an RSS feature.</p>
<p>Upon a cursory search, I then found out that I could generate a <a href="https://github.com/zedeus/nitter/issues/83">single RSS feed for multiple users</a>. This was great - I&rsquo;d managed to create my own pseudofeed. However, upon loading it into Matter, I realized that the formatting of the RSS feed was a bit awkward. This was to no fault of Nitter&rsquo;s - what else would an expected title be besides, well, the tweet itself? The description also displayed the tweet, though, and because most tweets are longer than I&rsquo;d like for a single box in Matter, it ended up being a bit clunky<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>.</p>
<p>It was at the moment I realized that Nitter was, well, an alternative Twitter interface. The same link I was using to aggregate RSS feeds could also be used to simply browse Nitter (after I removed the <code>/rss</code> bit). So far, it&rsquo;s been pretty great - I don&rsquo;t need to create an account of any sort, and I can&rsquo;t really comment or try to interact with things either. I scroll through the last dayIs tweets in the morning, mark down anything worth bookmarking in Matter, and then just go about the rest of my day. With this setup, I manage to limit my &lsquo;oh wait have I checked if xyz person&rsquo;s done anything&rsquo; moments.</p>
<p>As I see it, Nitters&rsquo;s a bit of a read-only interface, which fits my purposes well. It&rsquo;s really easy to &lsquo;follow&rsquo; and &lsquo;unfollow&rsquo; users by removing them from the URL, and Nitter&rsquo;s also pretty good for going into individual tweets and such. The only issue I&rsquo;ve ever had with it is rate limiting, but that&rsquo;s to be expected without requiring any sort of API key from a user. Luckily, there are tonnes of <a href="https://github.com/zedeus/nitter/wiki/Instances">other Nitter instances</a>, so I can just swap out the URL and continue my doomscrolling.</p>
<h2 id="conclusion">Conclusion</h2>
<p>There&rsquo;s a constant inflow of information that has to pass through my brain for processing: the internet, school, people, and all the other miscellaneous work I have to do. Matter, and the methods I use to read through content that I&rsquo;ve written about above, are my attempts to distill things down to something that&rsquo;s more manageable. I don&rsquo;t want to spend ages scrolling through infinite feeds, but honestly, if I don&rsquo;t have anything else to fill the time with, I&rsquo;m probably going to revert to that. Matter reduces the friction that comes with reading things that actually interest me more - as a website (that I don&rsquo;t have to log in to), I can access it on my phone as well. This leads me to go read things I have in my Matter backlog, instead of scrolling Reddit, for example.</p>
<p>I like building small things for myself (and releasing them and then realizing this fits absolutely no one except me, but that&rsquo;s alright) - it&rsquo;s more fun than trying to make things for people, I guess. This sort of ties into making your own tools - <a href="https://thesephist.com/posts/tools/">thesephist&rsquo;s post on the topic</a>, and <a href="https://www.robinsloan.com/notes/home-cooked-app/">Robin Sloan&rsquo;s</a> are both pretty great posts that I think encapsulate what I tried to do with Matter nicely.</p>
<p>Matter&rsquo;s source is available at <a href="https://github.com/kewbish/matter">kewbish/matter</a> on GitHub, and it&rsquo;s also available at <a href="https://kewbi.sh/matter">kewbi.sh/matter</a>. Everything is client-side (I don&rsquo;t have a way to, or wish to, keep any of your RSS feeds), so feel free to try it out. I&rsquo;d like to clean up the code a bit more (probably unlikely given I have rather scuffed JS skills), and maybe tweak some of the bookmarking stuff. But for now, I&rsquo;m happy with it, and hey - for something I made for myself anyhow, that&rsquo;s enough.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>I used to really hate the phrase media consumption. It reminded me of that disease that novel characters always seemed to come down with, and also implied that we were being spoonfed content by a mysterious algorithm with no real choice in the matter. But really - that&rsquo;s exactly what&rsquo;s going on, isn&rsquo;t it? The Twitter recommended box comes up with three contacts of a given person, and nudges the user to go see what those people are up to as well. You don&rsquo;t have any influence over who comes up, so I suppose the only thing you can control is how you respond to that. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>Admittedly somewhat unnecessary programming, since using a pre-existing reader would have worked just fine and saved a bit of winter break time, but I was looking for something to do anyhow. The experience of building this was a bit of a complementing contrast to the rest of the work I had to do. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>This did lead me to add a nice truncation feature for other websites' links that would overflow though, so I suppose it wasn&rsquo;t all bad. <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>CPSC 110: 1b</title>
      <link>https://kewbi.sh/blog/posts/201227/</link>
      <pubDate>27 Dec 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/201227/</guid>
      <description>On designing functions with HtDF.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Why I felt the need to <del>ruin</del> augment my Christmas week with some Racket, I don&rsquo;t know. It was fun to go through some HtDF material with CPSC 110 this week, however - surprisingly, it wasn&rsquo;t as tedious or repetitive as it seemed.</p>
<p>For non-Racketers (Racketeers?), the HtDF recipe, or guide, I suppose, is a method essentially detailing <strong>H</strong>ow <strong>T</strong>o <strong>D</strong>esign <strong>F</strong>unctions. You write a signature (the types expected), the stub (the minimal function needed to get the function to run), the <code>check-expect</code>s (unit tests, basically), the template (the stub, but a little bit more), and the final function. While it does get slightly boring to do the same things for each function (and a bit annoying for small, one-line functions), Kiczales does remind people that it&rsquo;s not a must-follow for everything, but it&rsquo;s good guidelines.</p>
<p>I also finally acquiesced and have started using DrRacket - I needed the stepper for the problem set checking. Besides, some of the distribution files that contain images are in some vaguely newline-filled format that doesn&rsquo;t read nicely in Vim. However, I managed to get vi-like keybindings via <a href="https://github.com/takikawa/drracket-vim-tool">this package</a>, which still works nicely. It&rsquo;s a lot easier to try things out in the REPL, and I can run check-expects aside.</p>
<p>There wasn&rsquo;t much besides the actual recipe covered this week, so we&rsquo;ll see if this post might be a bit shorter. Also, see the <a href="https://kewbi.sh/blog/posts/201213/">CPSC 110 module 1a</a> post I wrote a couple weeks ago.</p>
<h2 id="notes">Notes</h2>
<ul>
<li>htdf recipe is a non-waterfall set of instructions to write and easily debug functions</li>
<li>begin with writing a signature, listing the two types
<ul>
<li>forex, <code>Integer -&gt; String</code></li>
<li>ensure this starts with two semicolons - Kiczales mentions that this is tested for (two semicolons start a line of comments, a single one goes at the end)</li>
<li>sources conflict regarding whether to put the function name first, but for CPSC 110 don&rsquo;t</li>
</ul>
</li>
<li>purpose statement =&gt; one line statement regarding the purpose of function
<ul>
<li>should be as specific regarding return paths as possible</li>
<li>should specify what conditions should be met for a boolean function</li>
</ul>
</li>
<li>function stub =&gt; define the function with its arguments
<ul>
<li>return an empty value for the function</li>
<li>0 for integers, &quot;&quot; for strings, etc</li>
</ul>
</li>
<li>write examples and wrap in <code>check-expect</code>s, which will function as unit tests
<ul>
<li>need to test each code path for example behaviour</li>
<li>ideally number of tests should be around 3 (for boolean), one for each case</li>
<li>DrRacket will highlight unchecked paths in orange</li>
</ul>
</li>
<li>if tests fail on first run =&gt; expected, no functionality has run yet
<ul>
<li>just checking if well-formed</li>
<li>if test fail later, consider the test itself if correct</li>
<li>otherwise, check function definition</li>
<li>however, both can also be incorrect, as Kiczales points out in the video</li>
</ul>
</li>
<li>add a template, which is the stub but with a <code>...</code> and returning the argument
<ul>
<li>keeps track of all variables and what to do</li>
</ul>
</li>
<li>finally, can copy paste and implement function
<ul>
<li>remember to test intermittently to catch problems as they come up</li>
</ul>
</li>
<li>isn&rsquo;t a hard and fast rule, can use different steps along way
<ul>
<li>however, don&rsquo;t jump right into function definitions, which will lead to problems in future</li>
</ul>
</li>
<li>if a problem is poorly formed, clarify all constraints and possible corner cases first</li>
<li>(regarding problem sets and labs) keep htdf and htdd signatures, used by autograder</li>
</ul>
<h2 id="problem-set-and-lab">Problem Set and Lab</h2>
<p>I still have no idea how the problem set to module timing system for CPSC 110 works. While in module 1a, the first problem set contained material about functions that was covered in module 1b and that I had, at the time, not done yet, so I left it for the next week. However, the first lab was entirely of material covered in module 1a. I&rsquo;m sure there&rsquo;s a schedule somewhere<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>The problem set this week was actually quite interesting, and a good challenge level, I feel. I like that it&rsquo;s in a self contained starter file, and that you get to edit and make changes to each part. It reminds me a lot of CS50&rsquo;s distributions each week. Having each question target a specific area of knowledge and material taught in the module while giving everyone an even starting ground is beneficial, I feel, for my learning process. It makes everything feel a lot more manageable.</p>
<p>Lab 1, the intro lab, was also very straightforward. I wasn&rsquo;t able to get access to the quiz, but it was simple material covered in the lectures. I like that each subpart is very short, and that it&rsquo;s sort of like a problem set. It was definitely good practise.</p>
<p>I&rsquo;m not submitting anything for grading - I&rsquo;m still very unsure if I&rsquo;m <em>allowed</em> to be in this edx course at all. I figured that grading might be a bit of an issue, especially as I started the course later, but theoretically I might be able to properly do the course next semester?</p>
<h2 id="conclusion">Conclusion</h2>
<p>I&rsquo;ve recently found out I do have a possible chance at changing my student status to properly enroll in the course, but it&rsquo;s a bit late to do that for second semester. I&rsquo;d ideally like to challenge in the summer, but I also have several other plans. We&rsquo;ll see. In the meantime, I&rsquo;ve realized that CPSC 110 has a lot more modules than I&rsquo;ve expected, so I think finishing the course will take a lot longer, especially with work after winter break. Hopefully I&rsquo;ll be able to still preview before the April close date, and finish preparing for the summer.</p>
<p>Happy holidays, and we&rsquo;ll see what I decide to write about in the new year. I&rsquo;ve got a lot more HCI topics to think through before I write about them, but I think they&rsquo;re interesting enough.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>[later edit]: Upon further inspection, I&rsquo;m pretty sure each week number corresponds to one complete module number. It probably makes more sense that (the hypothetical) week 1, problem set 1, lab 1, and module 1 (containing both module 1a and 1b) are supposed to be done together. I&rsquo;ll probably leave 1a and 1b as separate posts, but combine them in the future. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>Branching</title>
      <link>https://kewbi.sh/blog/posts/201220/</link>
      <pubDate>20 Dec 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/201220/</guid>
      <description>On Wikipedia rabbit holes and clickchains.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>I&rsquo;m currently trying to plod my way through <a href="https://kewbi.sh/blog/posts/201213/">designing functions</a>, so I thought I&rsquo;d write about a new thought-chain<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>: branching. I&rsquo;ve not read a lot of posts or threads regarding branching, but maybe I just can&rsquo;t manage to find the right search terms yet.</p>
<p>I&rsquo;d define branching as the feeling (though it&rsquo;s more of a concept) that you get when you find a thread (perhaps on Twitter, perhaps elsewhere) that&rsquo;s linking to tonnes of different places and new articles that you also find interesting. I&rsquo;ve mostly seen branching in the form of Twitter threads or link-dense blog posts, but I&rsquo;m sure there&rsquo;s also forms of branching in scientific journal papers and many other facets of long-form (and shorter, I suppose) content. The idea is prevalent in <a href="https://twitter.com/Conaw/status/1129806786477772801">this thread</a> by Conor White-Sullivan, which I inadvertently stumbled upon from <a href="https://twitter.com/geoffreylitt/status/1338212261282897921">Geoffrey Litt&rsquo;s Twitter memex</a>. (Look, a branch within the concept of branching!) White-Sullivan&rsquo;s thread is full of quotes and new links: a great example of branching in its natural habitat. I will exert a considerable amount of self control not to open it right now and go down an entire rabbit hole. Anyways.</p>
<p>Branching seems to be at least one of the reasons that Wikipedia rabbit holes are a thing. There&rsquo;s just so much to explore, and especially if the subject of a thread is something you&rsquo;re passionate about and interested in, it&rsquo;s quite possible to accidentally go two or three &lsquo;levels&rsquo; deep. The clickchain is never ending, and it&rsquo;s probably quite possible to end up in recursive loops of branching as well.</p>
<p>Branching is present not just in casual social media interactions, but is also a significant part of how popular notetaking and productivity apps function now. There&rsquo;s the classic Roam or Obsidian graph, and the nearly infinitely nesting tasks lists that Todoist users seem to love. I find that, when exploring new fields and getting into new areas of study, there&rsquo;s an inherent branching model present. Information links to information links to information, and so on. The intrinsic hyperlinking of the web makes branching even more obvious - it&rsquo;s immediately clear what next steps to research are, after I&rsquo;ve read a post. This leads to the chains of deep Wikipedia / information surfing that essentially form branching.</p>
<p>This post is intended as a collection of my current thoughts on branching, and the kind of infinite exploration canvas that it presents. There are some slightly unrelated examples of things that are relevant to branching here, but I may as well also categorize those thoughts for later. Perhaps this branching post will be the branching point for any readers to also metacognize about branching. Winter break just started, so what better time to spend ages writing an essay on branching and then going on tonnes of clickchains in the process?</p>
<h2 id="exploring-areas">Exploring Areas</h2>
<p>A prominent example of how branching happens in my life is when I try to branch into (pun intended) and explore a new area of knowledge. No matter what the topic is, I tend to first find some piece of information, be extremely confused about all the terms in it, and then try to decipher things one definition at a time. In some ways, this reflects how we used to be taught in elementary school: be force-fed  a central topic, with a handy box of definitions on the side. However, most blog posts, papers, or even Wikipedia definitions don&rsquo;t explain each individual term in detail - they assume some knowledge of the topic, or else the page would be endless. (In order to define term A, it must explain in terms of B, which relies on C, and so on.) When I finally map out all the things I don&rsquo;t know, I find that there&rsquo;s a huge tree that&rsquo;s out there to explore, and would you look at it: it&rsquo;s all branched out into separate categories. Usually, there <em>is</em> some end to the information graph, but the tree gets several layers deep.</p>
<p>One example of this is when I recently read <a href="https://en.wikipedia.org/wiki/G%C3%B6del,_Escher,_Bach">Gödel, Escher, Bach</a> by Douglas Hofstadter<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>. It is admittedly extremely academic, and some of the concepts still go over my head. My opinions on the book are currently in their formation phase - that&rsquo;s a topic for another blog post, not now. One of the things I <em>will</em> discuss is how the entire book is formed around, and basically encourages, branching. Perhaps it&rsquo;s a bit of my fault that I started with the preface, which discusses concepts better explained in the body of the book, but immediately there were a bunch of terms and areas that were extremely confusing. These terms and concepts all linked to each other, but explained separate facets of the point. (This is the part where I tell you to probably go at least read a summary of the book or something. It&rsquo;s an experience and a half.)</p>
<p>Reading GEB is when I started really thinking about branching. Hofstadter approaches topics from many different lenses: music (you can spend hours in the YouTube recommendations after watching a couple of the related pieces), art (Escher is extremely talented), computer science (my passion, and cause of the longest clickchains), and life sciences (many flashbacks to organic chemistry and biology were had). Yet they all converge at the central point of the novel - which you should go find out about by reading said novel. With this diverse array of topics, however, I spent ages going off on side tangents reading about what a recursive transition network was, or how Gödel numbering worked. I&rsquo;m still working on mapping out a way to start looking into each of the topics more, because they&rsquo;re definitely things I&rsquo;d like to look into for the future.</p>
<h2 id="tracking-branches">Tracking Branches</h2>
<p>Speaking of thinking about the meta-possibilities of branching, I&rsquo;d also like to track my thoughts about how I can use branching to study a topic, or reflect on the overall experience of each clickchain. With GEB, for example, I&rsquo;ve been trying to map out a guide of all the areas, linking them all together. In this linking process, I see the appeal of a more connected notetaking technique, but I think just being mindful about how concepts link together provides a lot of insight into how information flows.</p>
<p>Sometimes, branching can feel a bit overwhelming. Having an essentially infinite number of links to follow next makes keeping track of time and the actual convergence point behind all of the branches difficult, but also crucial. There&rsquo;s no point in reading about a random topic if you&rsquo;re not going to connect it to something else to use, unless it&rsquo;s unrelated trivia or a new branching origin point. With most topics, I feel that I need a way to keep track of these branches, and look into how to manipulate context to remember or draw out additional branches for further exploration.</p>
<p>Among all the content and information that flows in, there will inevitably be some threads that have provided key branching value. Perhaps a Twitter thread that&rsquo;s been extra insightful about something, or a blog post that has linked to several more that you greatly enjoy. I obviously want to keep things like this somewhere for future reference, but I&rsquo;m not entirely sure how to reflect this in my overall notetaking / knowledge base system. I link content where relevant, but there&rsquo;s points and levels within the branching that I&rsquo;d really like to extract. I think that this keeping track of &lsquo;good&rsquo; branches is a topic that I want to think about more, and perhaps make a personal tool for. Others have made similar things regarding branching: the <a href="https://twitter.com/szymon_k/status/1289942401318977537">paned and tree-style browser history</a>, and the memexing threads I discussed above are both great examples that served as branching origins for my own thoughts about branching.</p>
<h2 id="conclusion">Conclusion</h2>
<p>When I think about one of these HCI topics, I tend to also envision some personal solution to the problem. For the branching problem, I had the idea of a CLI to add and remove branches, and have an overview. I&rsquo;ve since realized that because it&rsquo;s so disconnected from the rest of my systems, I&rsquo;m probably going to update it infrequently, and it&rsquo;s going to end up just as another archived GitHub repo. For now, I&rsquo;m just using a text file with interesting branch origins, and keeping folders of notes as I go. This approach has worked pretty well so far. I&rsquo;ve realized that while some of the branch origins are truly notable, others are just interesting content that don&rsquo;t really fit in anywhere.</p>
<p>These HCI posts are actually a lot of fun to write, and I think I&rsquo;ve found a nice area to explore in the future. I have lots of topics on the mind at the moment, and I&rsquo;ll have many more thought-chains over the holidays, I&rsquo;m sure. Speaking of the holidays, there are only two weeks left in 2020, and one blog post after this one. I&rsquo;ve kept a weekly posting schedule for a good half of this past year, but I think I might switch my writing schedule a bit with the new year. I&rsquo;m not sure yet about that - we&rsquo;ll find out when we get there.</p>
<p>I hope that I&rsquo;ll be able to finish another section of CPSC 110 by next week, though it is the holidays now. It might be a tad premature, but happy holidays, and good luck on the remaining five days of <a href="https://adventofcode.com/">Advent of Code</a> if you&rsquo;re doing it. In the beginning, it was pretty fun, but now it&rsquo;s getting a bit tedious and difficult. It takes a lot more time than I have, but I only have a couple days left. Hopefully after that&rsquo;s all done and finished I&rsquo;ll devote more time to CPSC 110, but for now, I&rsquo;ll return to puzzling my way through the Jurassic (day 20)<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>I don&rsquo;t have anything else to call them - I see them kind of like Twitter threads, but with less of the quote retweets and tendency to inspire long chains of clicking through old threads. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>I did manage to finish the book, and have copious notes for it. I am still a bit confused on some areas, and I think I&rsquo;d like to explore RTNs and some of the other automata and formal grammar ideas in it. Coincidentally, I stumbled upon another branch while trying to research RTNs - first finding about the context free grammar relation, then finding out about the Chomsky hierarchy, then about regex and how those connect to automata, and then finally down a bunch of rabbit holes involving <a href="https://twitter.com/happyautomata">this cute automata bot</a>. Go check that out - it&rsquo;s extremely nerdy but it&rsquo;s also extremely amusing and fun. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>I will admit, I did reference another person&rsquo;s code for this. It was a difficult day. <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>CPSC 110: 1a</title>
      <link>https://kewbi.sh/blog/posts/201213/</link>
      <pubDate>13 Dec 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/201213/</guid>
      <description>On finding my way into CPSC 110.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Racket, so far, has been an interesting language - lots of parentheses matching and prefix notation mistakes. It&rsquo;s unlike what I&rsquo;m used to (which is rather cobbled-together Python) but it&rsquo;s also quite fun to use. Also, because people keep asking: no, I didn&rsquo;t just decide to learn Racket for my own amusement, though I&rsquo;ve certainly got a lot out of the few short weeks I&rsquo;ve used it. I&rsquo;m planning on taking CPSC 110<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, which uses Racket extensively, and I&rsquo;d like to do the course first. (Why does it feel like I&rsquo;ve said this before? I don&rsquo;t know.)</p>
<p>I&rsquo;d initially tried to take the <a href="https://www.edx.org/course/how-to-code-simple-data">open edX version</a> of it, but I got a bit sidetracked with rack8, my Chip-8 emulator, and ended up letting it time out. It wouldn&rsquo;t let me into the course after a month, which was rather unfortunate.</p>
<p>However, I managed to finagle myself into the <em>actual</em> CPSC Edge (private edX platform, I think?) that&rsquo;s used. This contains the current problem sets and labs, as well as having a lot more final exam practises than on the public version. Fun! (Also, this won&rsquo;t time out until the end of the semester in late April, so I&rsquo;ll definitely be good on time.)</p>
<p>In this sort-of-series, I&rsquo;d like to document my progress through CPSC 110 (which should be the same as if on the public version anyhow). I did something similar last summer with <a href="https://kewbi.sh/blog/posts/200621/">CS50</a>, so hopefully I&rsquo;ll be more motivated to complete everything in a timely manner. Here&rsquo;s the first post: notes and thoughts on part 1a, in which Kiczales guides us on a scenic tour of BSL (Beginning Student Language).</p>
<h2 id="notes">Notes</h2>
<p>Like my CS50 posts, I&rsquo;m generally going to put my personal notes here. Skip to the <a href="#a-short-reflection">reflection</a> if you wish.</p>
<ul>
<li>Racket works with expressions (each statement in parentheses, essentially) to form programs
<ul>
<li>each exp is an element that is evaluated (Racket is compiled and then run from the bytecode)</li>
<li>functions go first, parameters later, so <code>(+ 3 4)</code> (which would be 7) (prefix notation)</li>
<li>have a very specific style guide w/ where they want spaces, refer to expressions section</li>
</ul>
</li>
<li>examples of primitives =&gt; strings, numbers
<ul>
<li>basic data structure provided by BSL (and later basically Racket)</li>
</ul>
</li>
<li>follows order of operations =&gt; evaluates innermost first, from left to right
<ul>
<li>each step of the evaluation plugs in results to the next one</li>
<li>frequently in the embedded questions</li>
</ul>
</li>
<li>Racket substring indices work like Python =&gt; range but excludes last one</li>
<li>using <code>(require 2htdp/image)</code> brings in image primitives
<ul>
<li>can draw with <code>(above)</code> and <code>(overlay)</code>, etc</li>
<li>stack <code>(circle)</code>s and other primitives inside =&gt; refer to docs</li>
<li>(# interesting that they choose to use images in their first examples, probably makes things a bit more intuitive?)</li>
</ul>
</li>
<li>definitions with <code>(define)</code> =&gt; Kiczales says these are generally capitalized
<ul>
<li>also can define functions as long as fn name and parameters in sep set of parentheses</li>
<li>fn is evaluated first by evaluting arguments and plugging those into main fn expressions</li>
<li>then the same rules of evaluation follow throughout</li>
<li>can use Stepper to see step-by-step evaluation of entire program in DrRacket</li>
</ul>
</li>
<li>booleans are <code>true</code> and <code>false</code>, instead of the <code>#t</code> and <code>#f</code> I used in rack8
<ul>
<li>are actually equivalent but I suppose for CPSC 110 use true/false</li>
<li>use <code>(and)</code>, <code>(or)</code>, and <code>(not)</code> to evaluate multiple (see conditionals section)</li>
<li>and only evaluates until it finds one that isn&rsquo;t true, or evalutes only until it finds an expression that is true</li>
</ul>
</li>
<li>Racket doesn&rsquo;t have a single expression if =&gt; must have an else clause
<ul>
<li>in rack8 just used a void expression, haven&rsquo;t gone through what to do in the recommended CPSC 110 style</li>
<li>the expression must go as a second argument in parentheses</li>
</ul>
</li>
<li>if evaluation, and other conditional expressions first evaluate the &lsquo;question expression&rsquo;s
<ul>
<li>then replaces the body of the if with either the true or false expression and evaluate the entire final expression</li>
<li>if neither, then produce an error</li>
</ul>
</li>
</ul>
<h2 id="a-short-reflection">A Short Reflection</h2>
<p>As an aside, it feels kind of weird to take notes on this, especially as some of it&rsquo;s stuff I&rsquo;ve muddled my way through via experience with rack8. However, I have a feeling I&rsquo;m going to forget the specifics if I don&rsquo;t at least try to record it, and perhaps this will serve as some sort of guide for others who are also investigating CPSC 110 or Racket.</p>
<p>Also, a brief note on setup. It&rsquo;s entirely possible to do Racket and most of what&rsquo;s done by Kiczales in a different IDE than DrRacket. Is it recommended to use Vim just because one feels like it? Probably not, but I couldn&rsquo;t be bothered to set it up while doing rack8, and now also cannot be bothered to set it up, since everything already works fine(ish) in Vim. I won&rsquo;t get the image functionality, or the REPL (though I <em>could</em> do that in VimScript or an extension), but I&rsquo;m alright with that.</p>
<p>I think I prefer Kiczales&rsquo;s teaching style to Malan&rsquo;s (see CS50 posts), or at least the course organization overall. CS50 lectures were very long chunks of information, and I find CPSC 110 is sort of like watching all of the CS50 shorts with questions in between.</p>
<p>That shorter cycle has been a lot more helpful, especially with the way the Edge course sticks a bunch of questions in some very innovative formats<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> in between each video. Kiczales&rsquo;s videos are nicely clear and concise, and theywork even when not using DrRacket or listening fully. Also, kudos to whoever had to edit and put in those arrows and annotation diagrams - they&rsquo;re super helpful, but were probably extremely painful to animate and put in.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Section 1a of the course has mostly been basic material that I&rsquo;ve covered on my own, but I think it&rsquo;s still valuable to review, especially the finer minutiae of evaluation ordering and what exactly is expected style-wise in autograder submissions. I&rsquo;m looking forward to section 1b, which is more on &lsquo;how to design functions&rsquo;. From what I&rsquo;ve researched on my own, there seems to be a pattern recipe of some kind involved, but we&rsquo;ll see more about that in the next CPSC 110 post.</p>
<p>On the more logistics side of things, I don&rsquo;t think I&rsquo;ll be able to churn through a section a week (or maybe I will - who knows? Winter break <em>is</em> coming up-), so I&rsquo;ll try to break things up with some thought-chain posts. Those will be the HCI ones, like the one I made recently regarding <a href="https://kewbi.sh/blog/posts/201206/">persisting context in annotations</a>. Hopefully that&rsquo;ll give me some more time to absorb and process the CPSC 110 material, as well as explore some of the thinking I&rsquo;ve been doing on my own regarding HCI. I&rsquo;m looking to finish this course sometime before the summer, hopefully so I can challenge the course right after I graduate, or sometime in the first term. We&rsquo;ll see, but for now, I&rsquo;ll be going back to BSL, and more Racket.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>UBC&rsquo;s introductory course on designing programs that all students pursuing some form of CS will have to take some form of. I <em>could</em> take 103 + 107, but that&rsquo;d be 2x more courses for roughly the same material, according to certain sources. Also, I can challenge the exam, which will save me a good amount of time and effort. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>I was not aware the question could see what part of the screen you were clicking on, which enabled some interesting question formats. Think along the lines of &lsquo;identify a parameter in this function call code block, put this green dot over it.&rsquo; <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>Morse Code Context</title>
      <link>https://kewbi.sh/blog/posts/201206/</link>
      <pubDate>06 Dec 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/201206/</guid>
      <description>On dots, dashes, and annotations.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Hello, and welcome to another episode of <em>Kewbish talks about notes and knowledge for no reason whatsoever</em>. I&rsquo;ve somehow fallen into the corner of the interwebs vaguely describable as &lsquo;knowledge twt&rsquo;<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. Reading papers, especially CS-ish design (read: not entirely incomprehensible) ones, is kind of nice. Perhaps this habit stems from the lab reports we constantly have to write, but I find reading through them therapeutic, in a way.</p>
<p>These papers have a host of ideas spanning many disciplines and areas of thought. That&rsquo;s something I kind of like, as someone very inexperienced in the field. HCI, as I think it&rsquo;s properly called, spans a large breadth of thought. Luckily, most of it is the sort of thing that balances yet complements the science-focused learning I do for school. I find it fun to read papers (yes, I&rsquo;m a massive nerd), especially these, where I don&rsquo;t have to constantly do math or think about theory (though that can also be fun).</p>
<p>One of the ideas I&rsquo;ve seen over the last couple weeks was the concept of context, and either persisting or deleting it. How does one encapsulate the context of a moment, be it <a href="https://twitter.com/szymon_k/status/1289942401318977537">branching browser history</a> or <a href="https://zettelkasten.de/posts/bookmark-breadcrumbs/">leaving a trail of thoughts between processing sessions</a>? The concept is striking: when looking through things I&rsquo;ve written even just a year ago, there&rsquo;s often a question of why I even thought it was a good idea. Re-entering, or even getting a glimpse into, the frame of mind I was in then would be very interesting for reflection<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</p>
<p>I&rsquo;d like to bookmark my thoughts and keep a giant log of posts that have sparked a rabbit hole of thought, but I also think it&rsquo;s kind of charming to rediscover posts on their own. It&rsquo;s a slow, perhaps luck-based, process, and I&rsquo;m not guaranteed to recover a key article, but it&rsquo;s more organic. Increasing serendipity or something.</p>
<p>I&rsquo;m vaguely free from school at the moment, so I might write a bit about some thought-chains I&rsquo;ve had surrounding HCI topics. Maybe these posts&rsquo;ll get published, maybe they won&rsquo;t. Please don&rsquo;t take these seriously; I wanted to record random things I was thinking about and I thought I may as well publish them.</p>
<h2 id="dots-and-dashes">Dots and Dashes</h2>
<p>The first inspiration for this chain of thought was a tweet involving Cal Newport&rsquo;s <a href="https://www.calnewport.com/blog/2008/02/18/monday-master-class-rapid-note-taking-with-the-morse-code-method/">Morse Code Method</a>. It&rsquo;s from a while ago, but it has some interesting points regarding contexts, and context switching.</p>
<p>In the article, Newport touches on a efficient style of notetaking: the Morse Code Method. The only two symbols are, aptly, a dot and a dash. While skimming through and processing content a first time, mark each main point with a dot. Supporting ideas are denoted instead with a dash. It&rsquo;s important to maintain momentum while processing the literature, which makes the entire process a lot quicker than the typical &lsquo;read and annotate at the same time&rsquo; technique. Not breaking the reading flow also would definitely reduce the amount of <a href="https://kewbi.sh/blog/posts/201018/">context switching</a> required.</p>
<p>Newport then suggests annotating and pulling together additional notes <em>after</em> the process of reading, making it a distinct second step. I see this as playing into active recall somewhat, albeit in a very short-term, very non-spaced repetition way. Dots are reviewed for their striking-ness, and discarded if now irrelevant. This process of reviewing and redoing notes after having a different view on the paper definitely helps with filtering. I find that notes <em>before</em> or <em>while</em> learning a topic are a lot less polished and full of (usually unanswered) questions instead of actual new thought. After taking the time to understand and condense information<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>, the third step to this strategy-of-sorts, notes are usually more direct and dense.</p>
<h2 id="a-search-for-serendipity">A Search for Serendipity</h2>
<p>Sometime when I was supposed to be doing work, I had a thought. I haven&rsquo;t tried it myself, nor have I had the idea long enough to evaluate it, but I think it might be interesting. What would happen if the second and third steps of the above method were eliminated? There might be something intriguing there if the need to paraphrase and keep annotations was gone, and we just had dots and dashes scrawled in page margins.</p>
<p>Obviously, if a line inspires a groundbreaking idea, that might warrant more permanent storage. While there&rsquo;s some use to writing everything I take out of a given text or chunk of information, I feel like it makes things a lot more rigid. Rigid, as in, I now have one interpretation (hopefully mostly thoughts that are original and add to the material) in front of me. If I never looked at the text itself again, I might never try to reinterpret and rethink the ideas with my current worldview. After all, I&rsquo;ve read it once, and I now have these very comprehensive notes, so why should I? Perhaps a book isn&rsquo;t quite good enough to warrant a second reading, and maybe the notes are good enough™.</p>
<p>But I feel like there&rsquo;s a lost possible serendipity. Sure, finding ideas anew without rereading is certainly possible, especially if you&rsquo;ve densely interwoven your notes with other thoughts, as in a <a href="https://zettelkasten.de/posts/overview/">Zettelkasten</a>. There&rsquo;s the chance that you might stumble upon an orphaned or unlinked markdown file. However, I don&rsquo;t know if there&rsquo;s enough of a reason to revisit and reevaluate thoughts this way.</p>
<p>If I was just presented with a trail of dots and dashes, and perhaps had to filter out information again, I&rsquo;d probably develop a whole new set of ideas. Coming from the possible added perspective of a couple months or years, this might be a bit better than static (evergreen?) notes. There&rsquo;s a sense of wonder and clicking through rabbit holes the first time one finds a particularly well-linked and well-connected thread of thoughts. I&rsquo;m not sure if I can document that all the first time, and I&rsquo;m also not sure if I&rsquo;d be able to remember key points that were most interesting again.</p>
<p>I was thinking of building another personal Chrome extension lately. Instead of keeping more fleshed-out annotations in a bank, simple dots and dashes were placed in the margin of a webpage. (CSS-wise this might be a bit tricky, but let&rsquo;s not discuss the technical details.) I&rsquo;d not keep proper thoughts; just little circles and lines. Perhaps these could be reordered with shortcuts, and maybe even combined in different contexts. It might also provide insight through time by track placement of these pico-annotations.</p>
<p>This, however, does come with the same caveats as footnote 3<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>. While it does increase the possibility to rediscover and readd new ideas, ideas will be filtered out and left in the dust at times. These might not be as &lsquo;big&rsquo; as some of the other points, and not get passed on to the next generation of notes. Context, as well, might well be lost. If a thought from generation 1 of a note only happened due to connections with other similar thoughts in context of mindspace 1, what happens if mindspace 1 is entirely dissimilar from mindspace 2 when taking generation 2 notes?</p>
<h2 id="mapping-context">Mapping Context</h2>
<p>The idea I&rsquo;m trying to explore is the persistence of context. On one hand, a constant, rigid context (if well-written) provides stability at the expense of some additional commitment and friction when trying to add to them. Not only does one have to recomprehend the text or work at hand, but one also has to try to reenter the mental location they were in when first processing information. The ideas surrounding previous ideas may unknowingly invade newer thoughts, tainting them retroactively, in a way.</p>
<p>I don&rsquo;t want to lose my place, or my frame of mind. An ideal situation would be infinite memory, and an equally infinite and expandable notation for my current context. (But that might be a tad overwhelming.) Leaving a breadcrumb trail of similar thoughts that led to a specific thought would increase the amount of notetaking friction at one point in time, but may help in the future. There&rsquo;s no point to do context-heavy notes for a topic that you know won&rsquo;t be referenced in the future, so that might reduce the amount of labour if you&rsquo;re fully aware this for a one-off thing. But how does someone evaluate this &lsquo;one-off&rsquo;ness? You could argue that no notes should be made at all, if it&rsquo;s only to be used in the extremely short term.</p>
<p>On the other hand, completely throwing away trying to recall the context, and focusing on just the current interpretation gives some more flexibility for the future. With a way to remember which points and which areas made you think last time, it might be an interesting balance to investivate. The main points and supporting points you picked out last time would still be available to see, but perhaps the interpretation could be different this time around, or maybe it&rsquo;s largely the same.</p>
<p>I&rsquo;m wondering how I can reflect a context of a moment into my notes without creating too much extra friction force against taking notes. Currently, the persistent pico-annotation idea, combined with perhaps note versioning but with fresh starts every so often, is my best thought on the topic. Perhaps another day of diving into Twitter threads might be in order.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Context, especially wih regards to processing, is an intriguing area of thought. A lack of context forms a certain atmosphere, if I can call it that, and a large amount of it creates an metalayer. The amusing screenshots that fill up my Imgur are generally taken out of context. Notetaking often happens without context - especially if it&rsquo;s just raw information without reflection. Automatically added metadata (file creation time, EXIF data) adds another layer of searching possibilities, and a feeling of meta-organization. I have no idea whether context is absolutely essential or not, but I can see how it (over?)shadows interpretation. Just earlier, I was annotating an act of a play for class again (I did it in a different format that I wasn&rsquo;t satisfied with the first time round), and found myself essentially reframing past thoughts slightly. Maybe it&rsquo;s just me, and the way I work.</p>
<p>Tech Twitter is a very deep rabbit hole, and is very good at leading me into long clickchains. However, I can justify reading papers and being extremely nerdy about this because it&rsquo;s semi-productive, right? It&rsquo;s led me to investigate a lot of literature I wouldn&rsquo;t have without it, and is strangely therapeutic, so that&rsquo;s that.</p>
<p>I suppose this is a nice round place to end off. This was indeed full of tangents and small points, but I think it&rsquo;s a nice way to frame my thoughts for later (look, context!). I have nowhere else to put them, and this essay&rsquo;s vaguely technical, so here it shall stay.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>That being said, I also don&rsquo;t have a Twitter, which makes things slightly less addicting / more difficult to check in on all the content, but here we are. It&rsquo;s also interesting to note how seemingly everyone in HCItwt seems to know, or at least somewhere reference the others. It&rsquo;s a Roam graph of people - which I suppose is the essence of a social network. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>And the same process will happen in two or three years when I return to these posts. It&rsquo;s a cycle, and it&rsquo;s a process - but that doesn&rsquo;t mean I won&rsquo;t cringe. Well, at least the cringe now is several magnitudes less than two years ago: will this pattern continue? <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>It might be interesting to see how this process would play out if intermediary layers were scrapped. Perhaps if they were on scratch paper, intended on being thrown away or (a less harsh approach) filed into a &lsquo;cold&rsquo; archive for very unfrequent retrieval, it might reduce the pressure of making &lsquo;good notes&rsquo;. However, there&rsquo;d come the very real possibility of not recording any new thoughts that might have helped with future iterations of a concept, or losing existing ones in the condensing process. <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>A Continuation of rack8</title>
      <link>https://kewbi.sh/blog/posts/201129/</link>
      <pubDate>29 Nov 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/201129/</guid>
      <description>On Racket and Chip-8, part 2.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>After maybe a month of intermittent work, it works!</p>
<figure>
    <img src="https://i.imgur.com/7n4DQhL.png"
         alt="Figure 1. A singleplayer game of Connect 4."/> <figcaption>
            <p><em>A singleplayer game of Connect 4</em></p>
        </figcaption>
</figure>

<p>If you&rsquo;re not sure what &lsquo;it&rsquo; is, you&rsquo;ll probably want to read the <a href="https://kewbi.sh/blog/posts/201115/">first blog post</a> of this microseries. In it, I touch on the experience of my first couple days with Racket and Chip-8, a game emulator. It turns out that trying to figure out how to piece together the Chip-8 documentation and synthesize it into Racket wasn&rsquo;t too bad, after all. Oh, the joys of what is essentially a glorified set of print statements. I&rsquo;m very happy with how rack8 (the pet name I&rsquo;ve been calling it) has turned out<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>In the above blog post, I left off with working opcode interpreting and somewhat-working internals. Back then, I was on a bit of a hunt for the proper graphics library, as well as how to manage taking keyboard input without hanging. It was a toss-up between <a href="https://docs.racket-lang.org/charterm/index.html">charterm</a> and <a href="https://github.com/dys-bigwig/racket-ncurses">racket-ncurses</a> &ndash; both would do what I wanted.</p>
<p>This is the devlog, of sorts, of the remainder of development, and my next steps.</p>
<h2 id="managing-display">Managing Display</h2>
<p>I initially thought the ncurses binding would be a better fit. ncurses was something I&rsquo;d briefly tried before in a toy Python project, and it didn&rsquo;t seem difficult to learn. It also explicitly stated an option for non-hanging input, which would be a must, and made the library very attractive. It&rsquo;d be impossible to try to rig together a short delay system, at least with my limited experience. So, I <code>raco pkg install</code>ed it, and was on my merry way.</p>
<p>It turned out, however, things were not as straightforward as they were advertised. (Are things ever?) First, the ncurses FFI was something like a year and a half old, and relied on <code>libncurses5</code>. I had <code>libncurses6</code>, and symlinking (not that I knew what to symlink) didn&rsquo;t seem to work. There seemed no way to get the correct library besides manually <code>make pkg</code>ing it from the AUR snapshot, so I also attempted to learn how to do that. Surprisingly, it worked, but that wasn&rsquo;t the end of the issues with the FFI.</p>
<p>It also seemed to escape from the window each time a key was pressed, and spit out some errors that I couldn&rsquo;t manage to trace. I&rsquo;m unsure if this was an issue with my implementation, though I copied directly from the given example, or from the package itself, or from the <code>ncurses5</code> I managed to MacGyver.</p>
<p>I briefly flirted with the idea of just doing things with <code>(printf)</code>s and hanging input, but I figured that wouldn&rsquo;t be very satisfying either. Seeing as the ncurses FFI, which was technically more recent than charterm, was already outdated (or perhaps just not working in its abandoned stage) wasn&rsquo;t quite acting as expected, I was hesistant to try charterm. However, I didn&rsquo;t have any better solution, so one <code>raco pkg install charterm</code> later, I braced myself for the worst.</p>
<p>After some issues with slow, character by character display, I finally had <em>some</em> output. At this point, it was just blocks of seemingly random Ms everywhere. I had two issues at this point: not getting newlines, and not drawing from memory properly</p>
<p>charterm seems to have an issue with printing newlines with its <code>(charterm-display)</code> function. Initially, this was an error on my part (all errors here are errors on my part, to be honest) &ndash; the documentation explicitly stated to&hellip;</p>
<blockquote>
<p>avoid trying to send your own control sequences or using newlines</p>
</blockquote>
<p>&hellip;but clearly this didn&rsquo;t register (Chip-8 pun not intended). I then switched to printing each line (or horizontal row) of the display onto the current charterm display, with a newline in between. I had some issues with the correct placement of the end brackets for for-loops, leading to a lot of time wasted trying to change parentheses around.</p>
<p>Two smaller tips here:</p>
<ul>
<li>one, maybe properly indent your code so parenthesis groupings are properly visible (oops)</li>
<li>and two, don&rsquo;t <code>(with-charterm)</code> every operation. I found that, when I tried this, there&rsquo;d be a visible delay in printing each line / character, as opposed to just one large operation. I&rsquo;m not entirely sure why this is either. Just wrapping the entirety of the inside of the graphics display function in the <code>(with charterm)</code> was much more efficient and effective.</li>
</ul>
<p>With regards to the DRAW opcode itself, I remember adapting much of it from <a href="https://pastebin.com/TtCM6Hh7">this pastebin</a>, which I found off a (now lost to the depths of search history) Reddit post. Before that, I had a very janky solution that was most definitely not up to the technical implementation. It was a rather pleasant surprise to see a little Connect4 counter on my screen, after much work <del>and suffering</del><sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</p>
<h2 id="keyboard-control">Keyboard Control</h2>
<p>In comparison to the display work, keyboard mappings were a lot easier to develop. While charterm doesn&rsquo;t have a completely blocking-less option, I managed to use a delay of 0.001 seconds<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>. My test ROM used was Connect4, which ends up only using the blocking keypress opcode, if I recall correctly, but the delay should be theoretically imperceptible even if a shorter reaction is needed. (On that note, I should probably test with more ROMs. Mental note to add to the todo list.)</p>
<p>Chip-8 itself has a very unique<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> 16-key mapping that I had to figure out how to model. My implementation used a hash-map<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>, which I mapped to (apparently what everyone else used):</p>
<pre><code>+---+---+---+---+
| 0 | 1 | 2 | 3 |
+---------------+
| 4 | 5 | 6 | 7 |
+---------------+
| 8 | 9 | A | B |
+---------------+
| C | D | E | F |
+---+---+---+---+
</code></pre><p>charterm, helpfully (Racket is also to thank for this) returns nice keycodes, so I was able to map these very easily, and even add an extra condition for a global quit key.</p>
<h2 id="conclusion">Conclusion</h2>
<p>So is the state of my journey with Racket. I&rsquo;m probably not going to tinker with rack8 much more, though I plan on loading some more ROMs up and testing if all my opcodes are sound. I&rsquo;ll also make the repo public on GitHub at some point, if anyone is interested in perusing my very badly written Racket. When I become slightly more familiar with Racket, I might write a short guide on how to make a Chip-8 interpreter in it: the only articles I can find for writing Chip-8 emulators in anything remotely similar is &lsquo;Chicken Scheme&rsquo;. I have no idea what that is, but perhaps making a Racket guide may be useful, both for others and for my own learning. (The Feynman technique is a thing, right?)</p>
<p>In making rack8, I&rsquo;ve also managed to steer myself entirely off the track of my original plan for CPSC 110 review. The material&rsquo;s still there on edX, so I should probably take the time to do the course properly. However, I think this little side excursion has been a valuable experience, both in terms of learning Racket, and having some fun with emulators. Overall, I find when I start with a hands-on project, and the higher-level details of a concept, I learn things better. I suppose rack8 can serve as my introduction to Racket syntax (so when I start properly studying, it won&rsquo;t be as jarring) and some of its concepts.</p>
<p>My next steps, in this analogy of projects, would probably to do more theory and &lsquo;dictionary-definition&rsquo; work. I was planning on doing more algorithms (essentially just the coursework of the various CPSC courses UBC has publicly available) anyway, so I think tackling that will be my next step. Racket has been surprisingly not that painful, and rack8&rsquo;s been a charming little project to tinker with. It might be interesting, once I have more time / finish the never-ending list of things I want to program, to investigate more emulator development, but who knows what I&rsquo;ll end up doing.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>The experience of finally getting display to properly work was somewhat akin to getting the Liquid Galaxy system set up: I had no idea what I was doing, no documentation (that I could understand), and there were no clear pointers as to where I was going wrong. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>An interesting story &ndash; I was originally very confused as to why the Chip-8 was printing just blocks of 8 characters, instead of one at a time. I tried everything, including completely rewriting the DRAW opcode implementation, copy-pasting things around. In the end, the issue was that I had <code>bitwise-and</code>ed something I should have <code>bitwise-xor</code>ed. It&rsquo;s interesting how three letters can waste so much time, but I suppose this is the essence of debugging. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>Actually, now that I think about it, it might be possible to set a zero-second blocking timeout. I&rsquo;ll try this and edit the post a bit later with how it&rsquo;s gone. <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4" role="doc-endnote">
<p>Well, unique to us, I suppose. Apparently, these were quite common &lsquo;back in the day&rsquo;, and I see a lot of 16-key keypads around, so they must be useful for something (?) <a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5" role="doc-endnote">
<p>As an aside, Racket hashmaps (or dictionaries, I&rsquo;m unsure of the technically correct description) and their syntax are very unique. I&rsquo;m used to the <code>[key]: [value]</code> representation, but Racket just puts a <code>.</code> in between, and surrounds keys with parentheses. Though I suppose the parentheses are very on-brand for Racket. <a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>Git and iOS</title>
      <link>https://kewbi.sh/blog/posts/201122/</link>
      <pubDate>22 Nov 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/201122/</guid>
      <description>On crossplatform repo editing.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>I&rsquo;ve always tried to take notes as much as possible on paper, just because it was easier (and theoretically also better for me). However, with COVID and spending more time with digital resources, I&rsquo;ve tried to take more notes online. These notes have been, from the beginning, backed up somewhere. First, it was to Google Drive; later, to OneDrive, when I used OneNote. I relatively <a href="https://kewbi.sh/blog/posts/200607/">recently</a> transitioned to Markdown files, but kept them in OneDrive. On Windows, I simply left them in the OneDrive folder, and edited with Vim.</p>
<p>On Linux, however, it&rsquo;s not quite as easy. I originally started off using <a href="https://github.com/abraunegg/onedrive">another OneDrive CLI tool</a>, which served its purpose well. I ran the sync command every so often, and I had access from my phone. However, I found myself not syncing often, and having out of date copies of work on my phone, which wasn&rsquo;t ideal. There was a bit too much friction for syncing - and to be honest, I just forgot. I could, of course, make a script and shove it in the autostart folder, but that didn&rsquo;t occur to me til much later.</p>
<p>In an attempt to reap more of the benefits of version control, I then shunted all my files onto a Git repo. It served the same purpose, but with the same problem. I kept forgetting to sync to GitHub.</p>
<p>As well, with just a mostly out of date version on GitHub, I couldn&rsquo;t access the latest version of my files on my phone. I&rsquo;m trying to make it as easy as possible to have a sync from both ends, so I searched around for a solution.</p>
<p>This whole process would probably be a lot simpler on Android, but I use an iPhone. (Feel free to rant about non-free software here.) I can&rsquo;t mess with folders and edit things as easily, so here is my attempt at describing my system now.</p>
<h2 id="overcomplicated-ascii-art">Overcomplicated ASCII Art</h2>
<p>The system looks something like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">+---------------------+        +-------------+        +----+
|                     |        |             |        |----|
|    git + sync.sh    | +----&gt; |   |\---/|   | &lt;----+ ||  ||
|                     |        |   |     |   |        ||  ||
+---------------------+        |    \___/    |        +----+
         |---|                 |             |        | || |
       +-------+               +-------------+        +----+
</code></pre></div><p><em>Figure 1. An excuse to experiment with ASCII art.</em></p>
<p>On the Git repo, I run a <code>sync.sh</code> script on log-in, which pulls the changes and commits and pushes any local ones. Everything then goes to a private GitHub repo.</p>
<p>But the Git integration from my phone would be tricky. Sure, I could <em>view</em> from my phone with the GitHub app, but I don&rsquo;t think I can write. That&rsquo;d end up not solving the problem, so I looked for something else.</p>
<h2 id="ios-magic">iOS Magic</h2>
<p>Enter <strong>Working Copy</strong> and <strong>Pretext</strong>.</p>
<p>I&rsquo;m not entirely sure if there are other Git clients on iOS, but the one I stumbled upon first was <a href="https://workingcopyapp.com/">Working Copy</a>. It let me set up another Git identity and get into my GitHub easily. I managed to get everything done in a couple minutes - this part was very simple. (Add new repo, choose GitHub source, log in if it&rsquo;s a private repo, clone, profit (?))</p>
<p>Great, I now had my notes on the local filesystem. But where?</p>
<p>Turns out that I had to go back and redownload the Files app (I&rsquo;d uninstalled it in one of my cyclic purges), and enable access from there. Click the three little dots on the top, and switch the slider over for Working Copy.</p>
<figure>
    <img src="https://i.imgur.com/qW2jhPp.png"
         alt="Figure 2. A tricky hidden slider."/> <figcaption>
            <p><em>Figure 2. A tricky hidden slider.</em></p>
        </figcaption>
</figure>

<p>This is where you should get <a href="https://apps.apple.com/us/app/pretext/id1347707000">Pretext</a>, a simple Markdown editor<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. It&rsquo;s plaintext, with HTML preview, and enough tweaking features. It doesn&rsquo;t have ads, though there are some other features that are unlockable with payment.</p>
<p>Inside Pretext, enter the Working Copy folder in Pretext, and select your repo of choice. From there, everything is a simple list view away. While Pretext can&rsquo;t edit anything other than Markdown, that&rsquo;s all my notes are in, so it works wonderfully. If I ever need to present, and don&rsquo;t want Markdown syntax, there&rsquo;s a nice HTML preview available in the <code>Share &gt; Preview as HTML</code> menu.</p>
<h2 id="syncing">Syncing</h2>
<p>Right, so syncing. Syncing was probably the bigger headache of the two here. For some reason, the first time round I tried getting an XFCE Autostart desktop to work, it would refuse to do anything. I assume this is due to an issue that I&rsquo;ll touch on in a few lines.</p>
<p>Under <code>Session and Startup &gt; Application Autostart</code>, I <code>+Add</code>ed a new desktop file. I&rsquo;m pretty sure it&rsquo;s important that this doesn&rsquo;t have a space in its title - that was the only thing different between my two attempts. The command I had it run was simply the bash script I wrote, which, for my later convenience, is below:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#!/bin/bash
</span><span style="color:#75715e"></span>
cd ~/EVB/
<span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> <span style="color:#e6db74">`</span>git status --porcelain<span style="color:#e6db74">`</span> <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
    <span style="color:#66d9ef">for</span> i in <span style="color:#f92672">{</span>1..50<span style="color:#f92672">}</span>; <span style="color:#66d9ef">do</span> ping -c1 www.google.com &amp;&gt; /dev/null <span style="color:#f92672">&amp;&amp;</span> break; <span style="color:#66d9ef">done</span>
    NOW<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span> date <span style="color:#e6db74">&#39;+%F-%H%M&#39;</span> <span style="color:#66d9ef">)</span>
    git add .
    git commit --author<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Emilie Ma &lt;notarealemail@kewbi.sh&gt;&#34;</span> -m <span style="color:#e6db74">&#34;Sync: </span>$NOW<span style="color:#e6db74">&#34;</span>
    git pull
    git push
    echo <span style="color:#e6db74">&#34;Successful!&#34;</span>
<span style="color:#66d9ef">else</span>
    echo <span style="color:#e6db74">&#34;No changes!&#34;</span>
<span style="color:#66d9ef">fi</span>
</code></pre></div><p>Probably change the directory to the one you&rsquo;re using for your Git. Also, probably change the author, unless you&rsquo;ve decided to impersonate me or are also named Emilie Ma.</p>
<p>And there we go - on login (since I do this at the beginning of the day, and I often only edit anything on my phone the afternoon before or at night), all changes will be pulled (and theoretically won&rsquo;t conflict - I&rsquo;m the only one using this, and I don&rsquo;t tend to edit the same note at different times). The changes locally get pushed, and everything is fine and dandy!</p>
<h2 id="conclusion">Conclusion</h2>
<p>Is this incredibly overengineered? Actually, not really. This is the simplest way I&rsquo;ve found to do it, other than to just fire up my laptop every time I want to reference something, which I&rsquo;d rather not do. I&rsquo;m still not entirely sure how Working Copy even works, especially with the sandboxing things that are supposed to happen behind the scenes, but I won&rsquo;t question it too much. It&rsquo;s a nice system, and it works well enough.</p>
<p>This post is mostly for self reference later, but if I&rsquo;ve somehow managed to help, that&rsquo;s cool too.</p>
<h2 id="currently">Currently</h2>
<p>It&rsquo;s been a while since I appended one of these, so apologies if the conclusion was a bit abrupt. I&rsquo;ve been working a decent bit more on my Racket x Chip-8 emulator attempt, and it hasn&rsquo;t been very successful. I chalk this up to the fact I don&rsquo;t know how to use the GUI / something&rsquo;s wrong with the display code - the rest of it worked fine (theoretically) without it.</p>
<p>I have, however, managed to at least get some sort of display working with <a href="https://docs.racket-lang.org/charterm/index.html">charterm</a>, but I need to fix a pesky issue. The width for the display should be 64 pixels, and I can print much more to the terminal, but I need to find a way to linebreak. The display refuses to take newline characters, so that&rsquo;s a bit of a challenge. I&rsquo;m sure I&rsquo;ll manage to work out some janky solution, anyhow.</p>
<p>I&rsquo;ve also found some other amazing Racket games and Chip-8 implementations, so hopefully I can leech a bit off of their approaches. If all goes well, I&rsquo;ll write about my progress next week. If not, I have some other ideas. Well, back to writing lab<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Having attempted to work with Notes before, I didn&rsquo;t want to bother with trying to select and bold text with the WYSIWYG panes again. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>And on another, slightly more quantitative note, I managed to hit 50k words on this blog! Five weeks ahead of schedule, so that&rsquo;s something. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>Racket and Chip-8</title>
      <link>https://kewbi.sh/blog/posts/201115/</link>
      <pubDate>15 Nov 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/201115/</guid>
      <description>On contemplating opcodes.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>If all goes well, I will hopefully be attending the University of British Columbia this coming September - probably for computer science. As a first year, I&rsquo;m going to end up taking <a href="https://sites.google.com/site/ubccpsc110/">CPSC 110</a>. Unfortunately, CPSC 110 happens to be firmly entrenched in the language of Racket. Because I&rsquo;m also plan on challenging (credit by exam, they call it apparently) the course, and was thinking of getting some preliminary practise with Racket. It also seems like an interesting language overall, and I was a bit bored after adding an <a href="https://diveintoht.ml">editor to diveintoht.ml</a>. So, I decided to try something in Racket.</p>
<p>That something is currently the skeleton of a <a href="https://en.wikipedia.org/wiki/CHIP-8">Chip-8 emulator</a>. Chip-8 was apparently historically used on the COSMAC VIP and run on the Chip-8 virtual machine, a sentence which I am not entirely sure I understand myself. I&rsquo;ve had about zero experience with trying to emulate or do anything lower level than <a href="https://kewbi.sh/blog/posts/200712/">CS50&rsquo;s C sections</a>. So, I thought this would be a fun challenge.</p>
<p>Was trying to juggle learning a new programming language, the syntax of which was completely unlike anything I&rsquo;d worked with before, and wrapping my brain around hexadecimal and opcoes at the same time a good idea? Probably not, but I&rsquo;ve managed to do a decent chunk of work, and I thought I&rsquo;d write about it today.</p>
<h2 id="printf-so-racket">(printf &ldquo;So, Racket.&quot;)</h2>
<p>After blundering through some install instructions, I had Racket. And just because I decided to, I didn&rsquo;t install DrRacket either. I originally had the contents of above printf as &lsquo;Hello World&rsquo;. I don&rsquo;t think I&rsquo;ve ever done a proper Hello World program<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, and hey, there was no time like the present. So began my stumbling into Racket.</p>
<p>The Racket language docs are rather complicated for a complete beginner, which I was. I also had the misfortune of only finding <a href="https://cs.uwaterloo.ca/~plragde/flaneries/TYR/">Teach Yourself Racket</a> and <a href="https://docs.racket-lang.org/guide/">The Racket Guide</a> just after muddling my way through too many Stack Overflow pages.</p>
<p>Racket is apparently &lsquo;functional programming&rsquo; (oh look - a buzzword!), so that was another challenge I had to deal with. Most lines are something like <code>([function] a b)</code>. This is extremely different from what I&rsquo;ve worked with before. This means it took me a solid couple minutes while trying my first Pythagorean&rsquo;s project to even realize that I was unconsciously doing <code>(a + b)</code>. The proper <code>(+ a b)</code>. The constant parenthesis matching is something that <a href="https://github.com/neoclide/coc-pairs">coc-pairs</a> really helped with, so I&rsquo;m happy I didn&rsquo;t have to deal with constantly reaching around. Also, something else that was interesting - no semicolons! The whole wrapping expressions and definitions concept wasn&rsquo;t too bad either.</p>
<p>Another unique issue I encountered while trying to grasp the basics was the fact that Racket is a subset of Scheme, which is itself a dialect of Lisp. Racket seems to be a very niche language that seems to only have resources from university course websites. It&rsquo;s therefore sometimes difficult to find the answer to a question. I have to first look for something like &lsquo;print variable in racket&rsquo; (very basic, I know). Then, when that doesn&rsquo;t come up with many results that aren&rsquo;t just the Racket docs (which at that point weren&rsquo;t very comprehensible). I then have to google for Scheme, which seems a little more widely used, so that&rsquo;s something to keep in mind.</p>
<p>I find that having such a unique syntax with the functions and parentheses completely different from something like Python was probably helpful. I didn&rsquo;t end up confusing functions with each other - as I did when doing CS50 with C and constantly forgetting that the print function was actually printf - and that I actually needed semicolons (or when I switched back to Python and found myself accidentally writing C). I&rsquo;m still very much a beginner, and I have very far to go, but Racket is certainly a lot less painful than it was the first few days.</p>
<h2 id="hexadecimal-hindrances">Hexadecimal Hindrances</h2>
<p>I think in decimal, and I can attempt to convert with bytes, but oh boy, dealing with hex and trying to manipulate the data read in for each opcode was a pain.</p>
<p>Part of the problem was simply that I didn&rsquo;t have much (or any, really) experience with hexadecimal or assembly. Most of this was also down to the fact that I forgot that I had to divide by hexadecimal 100 to get the correct digit I wanted, or that I needed to check if the variable was equal to a hex equivalent, instead of a decimal number.</p>
<p>The most challenging part of understanding Chip-8 so far, I find, was definitely masking. All the binary operations that go into decoding just one opcode are rather tricky. It also didn&rsquo;t entirely help that I was unfamiliar with what the Racket syntax was when looking at example emulators. This ended up causing documentation tangents every time I found a new function. Just yesterday, I figured out a problem I&rsquo;d been having for two days where apparently I was reading bytes from out of bounds. The issue? I had masked the value properly and gotten the correct digit, but it was stored in the hundredths place of the entire hex number. That meant that I was reading at the position 768 (or #x300 in hex) instead of at the correct register, 3. This was because I&rsquo;d ignored an implementation&rsquo;s division by #x100 (256 in decimal) and misguidedly tried to use the value itself.</p>
<p>Speaking of registers, I also had to properly learn how to access things from places in memory in a way that I didn&rsquo;t have to do with lists in Python. Well, for one, I didn&rsquo;t make giant byte strings with entire ROMs in Python, but I&rsquo;d have slightly more of a clue what to do in Python as opposed to Racket. Oh well.</p>
<p>In the end, with the help of several resources that I&rsquo;ll acknowledge a bit later so they&rsquo;re all in once place, I managed to figure out what the example was doing. I somehow also figured out why it was doing it<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, and how I could do so in my own program. It got to the point where my parents were questioning why I was trying to divide seemingly random numbers by 16 on pieces of scrap paper while I was taking a break, but hey, I figured it out.</p>
<h2 id="conclusion">Conclusion</h2>
<p>At the moment, I&rsquo;m feeling a bit more acquainted with Racket. Nowhere near the point that I&rsquo;d have needed to challenge CPSC 110, but somewhere, at least. Interestingly enough, I apparently went in the opposite direction that 110 would have gone. While 110&rsquo;s past papers reveal a lot of data structures, I instead focused on some lower level applications. A mental note to review data structures later when I finish this emulator.</p>
<p>I should also point out that most of my emulator has been based, or at least somewhat referenced from <a href="https://github.com/Bourg/chip8">Austin Bourgerie&rsquo;s emulator</a>. It seemed to be the only emulator in Racket I was able to find that wasn&rsquo;t too incomplete. [edit: also found <a href="https://github.com/theo-lw/chip8">theo-lw&rsquo;s</a> recently. Was helpful.] It pointed me in the right direction in several tricky places. My approaches for getting specific bytes and positions for specific opcodes and the general program was heavily inspired by it. I&rsquo;d also like to recommend <a href="http://devernay.free.fr/hacks/chip8/C8TECH10.HTM">Thomas Greene&rsquo;s, aka Cowgod&rsquo;s, reference on Chip-8</a>. Clear and concise, and was helpful when I encountered new concepts.</p>
<p>I&rsquo;m nowhere near done with my emulator. As of writing this, I have the reading of the ROM and the beginnings of the opcode processing for codes starting with characters 0 through 7. I hope to finish the opcodes sometime this week and see where I can get myself with graphics and input. From preliminary research, graphics doesn&rsquo;t seem too bad - I can probably just do those in terminal with half blocks ASCII characters for each row. Input, though, looks a bit tricky. Apparently, Chip-8 itself has a bunch of inconsistencies with how implementations handle input. Besides, I&rsquo;m not entirely sure how to tackle input in the terminal without messing up display at the same time.<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></p>
<p>It&rsquo;s been a fun detour from web and tinkering with NPM though, and while I&rsquo;ve been trying to learn the basics of Racket and Chip-8, I&rsquo;m also learning a lot.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>At this point, I feel like Hello World programs are kind of the baseline of programming one needs to know. Similar to the &lsquo;vast knowledge of web design&rsquo; lines people slap on their resume, maybe Hello Worlds are also part of that extremely limited but perhaps resume-able set of things people first learn to program. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>Instead of just copy-pasting code, which would have been the easiest way to get a working emulator up, but also the most useless. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>Though I <em>was</em> looking at Curses for Python, and that seems relatively painless. Doesn&rsquo;t seem to be a proper Curses library for Racket that I&rsquo;ve found ye. However, I&rsquo;m also entirely unsure how package management in Racket even works. A problem for later. [edit: I found <a href="https://github.com/dys-bigwig/racket-ncurses">racket-ncurses</a>, which looks like it should work!] <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>@everyone</title>
      <link>https://kewbi.sh/blog/posts/201108/</link>
      <pubDate>08 Nov 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/201108/</guid>
      <description>On notifications and muting them.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Backtracking on what I said in the <a href="https://kewbi.sh/blog/posts/201101/">last blog post</a>, I&rsquo;d like to retract my statement that:</p>
<blockquote>
<p>Email, and Teams, I find, tend to be more of those ‘check once or twice a day’ things.</p>
</blockquote>
<p>In fact, they&rsquo;re probably equally as attention sucking, especially since (in my case) we&rsquo;re constantly being reminded to check, and <em>need</em> to check, in order to get the latest information. That information tends to change on a daily and even hourly basis sometimes, so I do understand why we need reminders to check. If something urgent does come up, and it does so between my (past) twice a day check, then I&rsquo;m probably going to miss it.</p>
<p>Notifications are now very embedded into my life, at least. I have the (ir)rational fear that I&rsquo;ll miss one of those properly urgent pings, such as for a same-day assignment or change in plans that goes into effect very soon, and see it too late for me to have handed in whatever was due, or process the new plan. To somewhat offset this fear, I&rsquo;ve turned on notifications for pings from Teams / Slack / whatever, because I tend to not check those very frequently. I keep Discord on only for mentions<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, and opt out of pings or mute specific channels whenever possible.</p>
<p>At this point, I don&rsquo;t think I&rsquo;m going to be free from notifications any time soon, and that&rsquo;s fine - I spend the time to tune my pings so that only what I consider urgent enough gets to appear as a shiny red badge alerting me that I have indeed missed something. I try to be relatively cognizant of the nature of pings (oh no - this is relevant and you should probably open it now!) and avoid pinging people when possible. However, I find that people tend to have a more cavalier attitude regarding pings, and just ping for very small things. I&rsquo;m fine with this from smaller friend servers, but when it&rsquo;s a giant email list with about a hundred-ish people in it, that adds up to a lot of &lsquo;oh, that&rsquo;s just a reply all.&rsquo; moments.</p>
<h2 id="reply-all">Reply All</h2>
<p>A rather recent incident of this<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> was with the aforementioned mailing list problem. An email was sent from an organizer with everyone in the To: field requesting a form. That&rsquo;s all fine and well. But then not once, not twice, but three entire times, people decided to reply, with their form (which had names attached to it, but nothing too personal - though imagine the consequences!), and send that to everyone.</p>
<p>As I mentioned in the previous post, I&rsquo;d like to reduce the amount of things I have to process and sort out, so I was rather annoyed. It&rsquo;s a minor thing, but it adds up in time and effort spent for everyone.</p>
<p>I&rsquo;m not entirely sure if people are aware that they&rsquo;re replying to everyone, or if they&rsquo;re intentionally doing it. Apparently, Gmail has a feature to make replying to all the default, which probably seems like a good idea with smaller chains, but is rather disastrous with giant email lists as in this situation.</p>
<p>A solution, I suppose, is making it more difficult to reply all. A simple &lsquo;are you sure&rsquo;, similar to Discord&rsquo;s preview when pinging over thirty people (I forgot the exact limit), might help. Alternatively, BCCing people might be more efficient, and the people starting the chain may as well be doing it for privacy reasons.</p>
<h2 id="tuning-notifications">Tuning Notifications</h2>
<blockquote>
<p>[xyz]: why are y&rsquo;all so annoyed when getting pings?</p>
</blockquote>
<p>The above is something people touch on often in class, group, and most servers. They have the same reasons as I did in the introduction - they&rsquo;d rather make sure they see everything and deal with more pings than necessary than miss something. I guess the thing is, though, I&rsquo;ve already tried to minimize what is vying for attention, and if I&rsquo;m going to be on whatever platform anyway, it&rsquo;s a bit redundant.</p>
<p>When I get spam pings, the reflex is just to mute the channel or app or conversation or whatever it is that happens to be blowing up my feed. But this comes with the downside of also reducing the focus of it, and I find that I end up ignoring most of the channels that I mute. (I suppose I could also block one individual person, but then I wouldn&rsquo;t see their non spam messages, which is probably worse.)</p>
<h2 id="platforms">Platforms</h2>
<p>Communication, along with the need for quick, efficient communication, has skyrocketed as we work and learn and code from home. We&rsquo;re expected to respond quickly, and especially since for me, my grades are on the line, it&rsquo;s a responsibility. Notifications are starting to feel like an all-or-nothing situation. I either remain with my tab open all day, keep push / badges on, or rely on my schedule and memory to check.</p>
<p>This is all shifting us towards synchronous communication, which, for most things, is probably a must. But to communicate with, and fight for someone&rsquo;s attention amidst a sea of other pings and unreads, we turn more to pings. Originally, a ping meant something was super urgent, but now, sometimes it&rsquo;s just for a quick joke.</p>
<p>Maybe part of the reason for spam pings is that it&rsquo;s so easy to do so. A quick <code>@everyone</code> away, and the entirety of a server or channel is summoned. Most of the time, it&rsquo;s for not super urgent things (ghost <code>@channels</code>, I&rsquo;m looking at you), which makes it frustrating when I resolve to finally turn notifications for something on again.</p>
<p>This all being said, I&rsquo;d like to end with a counterexample: the <code>@notifs-on</code> role, or the selective ping role. By default, everyone can have this applied. That&rsquo;s fine. But it&rsquo;s nice to give people an option to opt out, kind of like email unsubscribe links. By unsubscribing, you <em>know</em> that you&rsquo;re going to lose out on whatever material&rsquo;s in the next newsletter, but you&rsquo;re aware of that, and fine with that. Here, you&rsquo;d know that you&rsquo;re not getting the notification, but you&rsquo;re expected to check anyway. I really appreciate at least giving people the choice - though when that gets abused, and people return to <code>@everyone</code>ing &lsquo;because it&rsquo;s important&rsquo;, the issue still returns.</p>
<h2 id="conclusion">Conclusion</h2>
<p>So how do we reach each other? Do I turn off notifications and have to remember to check manually, or do I just deal with them? For most, I end up just dealing with them. It&rsquo;d have to be part of a larger shift and larger awareness of the effect of a ping. And this debate&rsquo;ll probably never end, because people will always disagree with whether or not something was <code>@everyone</code> worthy, or <code>@notifs-on</code> worthy, or even worthy of a message at all.</p>
<p>For now, I guess, I&rsquo;ll just selectively mute and selectively unmute when I see fit, and perhaps nudge people as a reminder when the reply all problem resurfaces again.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Mentioning this was probably not a good idea, please do not spam me or I will mute you. (I suppose this ties into my points later on.) <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>Yes, this is the reason I was going on about how people don&rsquo;t know how to properly use email or the reply all button. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>Changing communication</title>
      <link>https://kewbi.sh/blog/posts/201101/</link>
      <pubDate>01 Nov 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/201101/</guid>
      <description>On what forms software encourages.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Online school is both a blessing and a curse when dealing with questions I have to ask. Do I email, or use Teams? Do I wait to ask in class, with the thought that class might not touch on the topic at all when we get there? When do I email? Do I ask classmates first, or wait?</p>
<p>Generally, for smaller things like scheduling matters where absolutely no one seems to know what&rsquo;s going on, I end up emailing.</p>
<pre><code>Hello, so and so.
Hope you are doing well.
When is xyz?

-Thanks,
Emilie
</code></pre><p>or something along those lines. After a bit of waiting and internal panic<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, the person will get back to me with a detailed (or not) answer. That&rsquo;s all well and good, but now I have to thank them. Or do I thank them? Do I send an entire email, knowing this person is probably being flooded with other emails, with a one line <em>Thank you! - Emilie</em>?</p>
<p>Sometimes, or most of the time, probably, the answer to that question is indeed yes. But it always feels a mite awkward and unnecessary to initiate a whole email for a thank-you. However, there&rsquo;ll be that nagging voice in my head reminding me that they should be thanked, so I do it anyway.</p>
<p>Perhaps the issue with this is that I&rsquo;m used to more instant, less official forms of contact. Email is not a chat app to me, but I feel like most of my interactions are focused on the model of a chat app, where I ask a questions quickly and get a reply just as casually. I don&rsquo;t have an inbox to comb through, and replies feel less concrete. In Telegram, for example, replies are a swipe away. Each message contains a lot less information than a standard email.</p>
<p>In this post, I&rsquo;d like to share some of my thoughts regarding replies, chatting / information sharing, and threading styles in some of the apps and communication tools that I use regularly.</p>
<h2 id="encouraged-threads">Encouraged Threads</h2>
<p>This post will mainly focus on five apps or services: email, Teams, Discord, Slack and Telegram.</p>
<p>Email is a good starting point, I feel. In email, conversations are usually more long-form and self-contained. One person fleshes out a complete idea or question and then sends it off, and then someone replies. Individual messages are (word count wise) longer than messages in chatting apps. I suppose this reflects the initial model that email was based on: physical mail. It&rsquo;d be horribly inconvenient to send a single word letter all the way to your friend in another province or state.</p>
<p>On the same line of convenience, I find that the form of email works well, especially when people articulate thoughts clearly, and I don&rsquo;t have to send follow up emails to ask for a one-word clarification. I also find that email has started to drift as the focus of where I spend time - instead of sitting with my inbox open all day (which you&rsquo;re recommended not to do anyway), I sit with my chat apps open. (Not all day, but when I&rsquo;m doing less focused things, or in terms of checking frequency, anyway). Perhaps this move towards more instant-gratification, quick-response chat apps is freeing up email inboxes at the expense of having to check multiple apps a day.</p>
<p>Email threads feel more solid, in a way, than Discord chains of replies. Maybe it&rsquo;s because I receive less email than I do pings on Discord, so they appear more sparse and infrequent.</p>
<p>Another application that focuses more on threaded conversations, I find, is Teams<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>. I was originally rather put off by the fact that each individual message appears with such a large margin and such a large message box, but I&rsquo;ve come to realize this is because Teams instead encourages threads, and concrete conversations. It feels like a balance between email and chatting apps, especially with the fact that Teams now has the ability to make message headers and attach things.</p>
<p>In the beginning of the lockdown, when Teams was new to my peers and I, I noticed that people would send messages like they would on Discord or Hangouts: one line at a time. Instead of, as a more email-like format, expanding on their idea or response in one message, they&rsquo;d break it up into three or four. It was a bit confusing to orient ourselves to this new chat-app-like interface with a email-like style of communication.</p>
<p>I found that Teams did clarify this encouragement towards threads when they made the &lsquo;New conversation&rsquo; box a button instead, and hid the response box unless focusing on a reply box. This made it more clear that the mode of usage was to be more focused on longer-form replies.</p>
<h2 id="a-long-scroll">A long scroll</h2>
<p>On the other hand, Discord, and to some extent, Telegram at times, feels more snappy. Not in terms of performance or loading, but in terms of conversation speed. It&rsquo;s more likely that you have multiple people typing at a time, responding to one thing. Individual messages aren&rsquo;t spaced so far apart, making it ambiguous if we&rsquo;re to have long, essay-style responses in a message. I think that my peers and I have grown up at a time where shorter, more line break heavy communication is the standard though, so I never found Discord&rsquo;s intended method of communication confusing. Discord&rsquo;s threading is also not quite threading. It&rsquo;s more apt to term them replies, I think. They incentivize more quick, one sentence replies, which is an interesting model of communication.</p>
<p>Discord&rsquo;s threading and reply system leaves a lot to be desired when compared to other forms like Slack, in my opinion. I can&rsquo;t quickly navigate to replies, especially when replies were made to messages sent ages ago, or after a long interlude with the inevitable flood of unrelated messages. I have to open the search menu to copy paste the message to find context, which is a bit more friction than I&rsquo;d like for looking at messages.</p>
<p>On the other hand, Telegram does an interesting job of putting replies into context. Replying involves fewer clicks (or maybe that&rsquo;s just perceived clicking) than on Discord, especially on mobile, where a simple swipe to reply works. On Discord, instead, I have to long tap and quote. The little scroll to bottom button won&rsquo;t scroll you to the bottom if you click on an original message that was replied to. Instead, it takes you to the reply from which you clicked to the original message. This involves a bit of jumping, but it&rsquo;s infinitely less work than Discord&rsquo;s reply system.</p>
<p>On Telegram, messages are just as short-form as Discord messages, which allows for the same short interactions that occur with Discord. When contrasted with email or other longer-form messaging, it might seem a lot faster without as many reply or threading features, but I think Slack falls quite well in between both realms.</p>
<h2 id="the-in-between">The in between</h2>
<p>Slack is an interesting app that, to me, falls right between the quick, short messages of Discord, and the long replies of email or Teams. Slack is really what you make of it - I&rsquo;ve joined three or four Slacks that all had different styles of communication. Some revolved heavily around the reply system, making it more like Teams but with the ability to have shorter replies as integrated. Others never used threads, instead working just within single messages sent in quick bursts.</p>
<p>Slack also adds the thread message aggregation feature that&rsquo;s not a part of how Discord or Telegram&rsquo;s reply system works. I think that&rsquo;s more of a fundamental, base level difference than a feature parity thing, though. It&rsquo;s interesting how messages within threads can be popped out and viewed together, and threads linked together with message links and the like. It&rsquo;s possible to do this on Discord and Telegram with message links, but it&rsquo;s not possible on email (or Teams, at least as far as I know). This gives a more sprawling view of the conversations happening together, which can be a bit of a clickhole situation at times, but might be useful for tracking histories and finding information. It&rsquo;s also interesting how, in Slack, thread messages can be sent to the channel as well. This kind of blurs the line between single message only Slacks, and heavily threaded Slacks.</p>
<p>I find that single message Slacks tend to be the ones with fewer people and less need to moderate and keep everything organized. Only a few messages are sent each day, if that, so it&rsquo;s easier to find and collect the information you need. Larger, more corporate-y Slacks fall more towards the threading model, which probably makes it easier for people to participate in subconversations and keep the pinging and notification spam to a minimum.</p>
<h2 id="changing-how-we-communicate">Changing how we communicate</h2>
<p>On Discord and Telegram, I find myself breaking up my thoughts into shorter sentences, or even subsentences. I&rsquo;m not entirely sure where I picked up this habit, but maybe it has to do with the fact that I&rsquo;d like to get as much of whatever idea or sentence I&rsquo;m writing out there as soon as possible, or maybe not.</p>
<p>Teams, Slack, and email, as I&rsquo;ve pointed out, facilitate more threading, but nudge the user towards longer threads and longer amounts of information instead. It&rsquo;s increasing the divide between chatting and perceived productivity apps, and it&rsquo;s interesting to see how people are using each app for something that may not entirely be its purpose.</p>
<p>The thing with chat apps is that there&rsquo;s so much chatter happening at any time. I suppose this also relates to Slack, but it&rsquo;s easy to get sucked into spending a little too much time sending emoji combinations rather than doing actual work. There&rsquo;s constantly pinging and activity, and if I hadn&rsquo;t really turned down my notification settings, I&rsquo;d have been bombarded with spam pings and @channel / @everyone&rsquo;s. Chat apps feel a lot less formal, which is sometimes a good thing, but then I think we also don&rsquo;t think as much regarding content and length before we send things. I know I proofread and rethink emails a lot before I send them, but I don&rsquo;t think I&rsquo;d go through and correct for grammar errors (well, perhaps, if they were egregious) with much more than an asterisk correction.</p>
<p>Email, and Teams, I find, tend to be more of those &lsquo;check once or twice a day&rsquo; things. Because more concentrated information settles there, and less of it, I can process it in two or three chunks that don&rsquo;t take up too much time. The rest of the time, I can go focus on other things. Because of how hefty, if I can use that word, email feels, I don&rsquo;t take or use it lightly, I suppose.</p>
<h2 id="if-only">If only</h2>
<p>I wish there was a reaction button on emails, perhaps, or not replying was a common, accepted thing to do. Circling back to the original issue with me emailing someone with a single line thank-you, this interaction would have occurred very differently on Discord, for example.</p>
<pre><code>kewbish: @xyz, what about xyz?
xyz: oh right, [explanation].
</code></pre><p>Then, I can just :+1: react to the message, and the sender knows I&rsquo;ve acknowledged and read it, and found it useful. I can&rsquo;t do this with email, and it feels very odd to not reply. Alternatively, it&rsquo;d be nice to figure out a way to inform everyone that I communicate with semi-regularly that I&rsquo;ll be reading messages, but will try not to reply. Though I still think not replying isn&rsquo;t as culturally accepted, so perhaps that has to be part of a larger shift away.</p>
<p>And as a slightly unrelated hope, I wish people would be a bit more cognizant to how email replies work. I&rsquo;ve gotten reply-all-ed too many times, and when people inevitably just ask &lsquo;it&rsquo;s just a reply all that doesn&rsquo;t even affect you anyway&rsquo;, I&rsquo;d like to point out that I have email notifications set only so that I receive a notification on new mail, so that I can act on it. I&rsquo;d rather keep email as a more structured, less Slack-esque form of communication, where I know everything I receive is relevant in some way, and that I consider as important. Keeping email less spammy and keeping the amount of mail I have to triage lower would be nice.</p>
<h2 id="conclusion">Conclusion</h2>
<p>We&rsquo;ve grown to adapt our communication to each form of content that each platform dictates or encourages, and the style that each app works with is highly dependent, I find, on the threading system and how it works. Replies and conversations happen a certain way in real life, face to face, and I feel like each app we use is further evolving how we work.</p>
<p>To be honest, I perfectly like each platform&rsquo;s style as it is. This wasn&rsquo;t intended to be a rant, though perhaps it turned out a bit like it. The only overarching wish I have is for some sort of unification, though the issue with unification is we lose the uniqueness and individual standout features of each app. Julian Lehr wrote a <a href="https://julian.digital/2020/01/17/superhuman-the-productivity-meta-layer/">great piece on email and its role</a> in productivity, touching on the sprawl and integration problems that we face today, expanding on the idea of email and the purpose it serves in our lives.</p>
<p>It&rsquo;s interesting how I slightly alter my speech and communication on each platform, and how odd it seems when someone doesn&rsquo;t quite speak or communicate the &lsquo;normal&rsquo; way on each platform. I&rsquo;d never have realized that platforms and what features they implement, could have such a large impact on the way we work, communicate, and discuss.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>If I ever get time, I might build a small email tracker pixel generator for personal use. It might be a fun side project, and actually let me know when people open my emails without the disgusting large &lsquo;sender has been notified that you have opened this email&rsquo; that the free Gmail addons seem to plaster all over the footer. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>For clarity&rsquo;s sake, I&rsquo;d like to point out that Teams in this case is whatever version of Teams that&rsquo;s used for school and has all the grading knickknacks. Not entirely sure about corporate Teams, and what that&rsquo;s like. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>Spaced Repetition in Vim</title>
      <link>https://kewbi.sh/blog/posts/201025/</link>
      <pubDate>25 Oct 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/201025/</guid>
      <description>On active learning combined with Vim.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Even though we don&rsquo;t really have midterms, and quizzes and tests flow pretty regularly throughout the year, it&rsquo;s <em>that</em> time of year again - when it all starts sinking in that, no, it&rsquo;s not just an unexpected spike in homework: it&rsquo;s just that this is the baseline of homework, and this is how it&rsquo;ll be for the rest of the year. Fun! In addition to that, I also have to worry about UBC applications and other things, but those aren&rsquo;t strictly academic matters. In essence, it&rsquo;s been a very busy couple of weeks, and it&rsquo;s likely not to be much less busy for a while. That probably also explains why I&rsquo;m focusing on writing a lot more about productivity and studying and general learning things - I&rsquo;m trying to force myself to remember these things as well.</p>
<p>Studying is, admittedly, rather fun for me. (This was probably why people still call me a nerd.) It makes one feel rather productive, even though it&rsquo;s essentially just regurgitating facts and informations, and trying to force your brain to understand. I feel like no one really teaches people how to study - it&rsquo;s one of those things that you figure out as you go along.</p>
<p>However, there&rsquo;s recently (I say &lsquo;recently&rsquo; because that&rsquo;s when it started taking over productivity forums, but it&rsquo;s been around for a whle) been a bit of a focus on the magical thing that seems to be spaced repetition. Though it&rsquo;s not entirely magical either.It&rsquo;s a way to reinforce learning at specific intervals when the information is beginning to sink itself into oblivion in the back of your mind, and keep the material fresh.</p>
<h2 id="flashcards-are-popular-now">Flashcards are popular now</h2>
<p>The most common way people seem to implement spaced repetition is through flashcards, or its digital version, Anki. Both seem to have a bit of a cult following, but it&rsquo;s for a good cause. I&rsquo;m pretty sure everyone knows how to make flashcards. It&rsquo;s not that difficult: one fact or one testing bit on the front, the answer on the back.</p>
<p>Making <em>good</em> flashcards, however, is a bit more difficult. Each tested fact should be one atomic piece of knowledge, and ideally, a concept should be explored from different notecards and linked together. This serves to reinforce the act of producing connections between pieces of knowledge, and understanding how they work together.</p>
<p>The real hidden power that flashcards and spaced repetition tend to bring is the differences and science behind increasing and decreasing the testing interval. This is achieved through splitting the large set of cards into a number of levels based on one&rsquo;s familiarity with the card and its knowledge. When one card is reviewed, it bumps up one level if you&rsquo;ve satisfactorily understood it and got it correct, and goes all the way back to level one if you&rsquo;ve got it wrong. Each level is reviewed depending on how familiar one is with the card. Level one is every testing session, level two is every other testing session, level three is every four testing sessions, and so on. Most people have something like seven levels (I prefer four or five, but that&rsquo;s just because I don&rsquo;t have a lot of things to remember), and once a card in the last category moves on, it&rsquo;s cut from the deck, and your understanding of the topic assumed solid enough.</p>
<p>A bunch of people who can probably explain the science and rationale behind this better than I can have also written about this topic in various forms: <a href="https://ncase.me/remember/">Nicky Case&rsquo;s brilliant web comic</a>, <a href="http://augmentingcognition.com/ltm.html">Michael Nielsen&rsquo;s Augmenting Long Term Memory essay</a>, and <a href="https://numinous.productions/ttft/#memory-systems">this subpart of a research paper by Nielsen and Andy Matuschak</a>.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<h2 id="active-recall">Active Recall</h2>
<p>Before I jump into the actual implementation of spaced repetition in Vim, I&rsquo;d like to briefly touch on one more thing: active recall. This is a bit less finicky and rigid than the spaced repetition systems, and I&rsquo;ve used this for a while. Essentially, active recall is the act of testing yourself on knowledge every testing session. It&rsquo;s been found to increase what you remembered, and while is rather tiring and boring at times, actually works to strengthen your knowledge.</p>
<p>I used to get a whiteboard and just make a short outline of everything I&rsquo;d need to remember for the test (I used to only study for tests - insert gifted student burnout statement.). I&rsquo;d write everything I remembered about those topics, and then I&rsquo;d check everything. I usually rewrote mistakes in another colour, and focused on memorizing those mistakes. Then, rinse and repeat. When focusing on working on the mistakes, as spaced repetition also does, it forces you to actively work to fix those mistakes, which is much better than just rereading a paper and hoping you remember how the exact reaction mechanism works.</p>
<h2 id="now-featuring-vim">Now Featuring Vim</h2>
<p>I really don&rsquo;t know why I feel the need to seemingly constantly write about Vim, but here we are.</p>
<p>To implement spaced repetition in Vim, I didn&rsquo;t want to separate testing from notes. I&rsquo;d have to maintain two files in this case, which would be a bit tricky and annoying if I needed to update something. As well, that&rsquo;d be extra friction in starting to study, which I wanted to reduce, not increase. Starting to study a new topic was supposed to be effortless, after all. Instead, I kept everything in my notes file, and just added an extra level indicator, which looked something like (an actual example, by the way):</p>
<pre><code>- Serbian terrorists [Black Hand + Young Bosnia] =&gt; Gavrilo Princip shot Franz Ferdinand [l2]
</code></pre><p>That little <code>[l2]</code> indicates that that point, and all its subpoints, are at level 2 in the spaced repetition framework. <code>[l2]</code> isn&rsquo;t something I&rsquo;d ever need to write as an identifier for anything else, or write as part of my notes, so it&rsquo;s pretty safe to just use that format and grep for it overall. When I&rsquo;d do a repetition or active recall study session, I&rsquo;d go through each of the top-level points, and try to remember and regurgitate everything from the subpoints. This brings together both active recall and spaced repetition systems, which I found worked really well.</p>
<p>Now, to Vim-ify the testing method, instead of doing things manually, I modified what&rsquo;s in <a href="https://www.edwinwenink.xyz/posts/50-quiz_yourself_in_vim/">Edwin Wenink&rsquo;s article on studying in Vim</a> to get this command, which I added to my .vimrc:</p>
<pre><code>nnoremap &lt;expr&gt; &lt;leader&gt;nq ':vimgrep /\[l' .nr2char(getchar()). '\]/ %&lt;CR&gt;'
</code></pre><p>This remaps the <code>\nq</code> command in Normal mode to look for all occurances of the levels. I originally used a <code>\d</code> regex for just any level, but I found the getchar() bit, which lets me use something like <code>\nq1</code> to start a session for level one. This starts a vimgrep session<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> in the current file, which is fine, as I have all my notes for one topic in the same file. I can move between questions with <code>:cn</code> and <code>:cp</code>, and since the questions show up at the bottom of the screen, I can&rsquo;t look at the subpoints.</p>
<p>To raise and lower levels for each group of subpoints, I&rsquo;ve come up with two commands:</p>
<pre><code>nnoremap &lt;leader&gt;ll :s/\[l\d\]/\[l1\]/ &lt;CR&gt;
nnoremap &lt;leader&gt;rl :s/\[l\zs\d/\=submatch(0)+1/ &lt;CR&gt;
</code></pre><p><code>ll</code> is a mnemonic for lower level, and this complicated regex essentially substitutes any occurances of <code>[l*digit*]</code> with <code>[l1]</code>, since we&rsquo;ll be resetting the card all the way back down to one.</p>
<p><code>rl</code> stands for raise level, and this regex matches all digits preceded by <code>[l</code>, which should be all the card level indicators. This then does a bit of fancy submatch maths to add one to the level. Fun!</p>
<p>Of course, if you plan to have multiple level indicators per line (not entirely sure how that would come into play or how that would work; maybe if you had categories or something?), you might want to do a global search on the line by appending <code>\g</code> to any of these lines.<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></p>
<h2 id="conclusion">Conclusion</h2>
<p>Is this slightly overcomplicated? Could I not have just copy pasted questions from Quizlet or something into a file and just attempted to solve mock tests instead? Should I have just used Anki instead of spending roughly fifteen minutes Googling as to why the remap wasn&rsquo;t working when I accidentally used <code>/nq</code> instead of <code>\nq</code>? Yes, probably wouldn&rsquo;t be as fun, and maybe. Anyway, it&rsquo;s been a fun area of memory work to explore, and in the process of attempting to improve my study work, I&rsquo;ve gone through more papers than I&rsquo;d have expected to, which probably sounds boring, but I promise, it&rsquo;s rather engaging, in fact.</p>
<p>On an extremely unrelated note, I&rsquo;m not far off my goal of 50k words this year on this blog, and this post itself has contributed its weekly total towards that. I hope to be able to properly get everything done and maybe do a bit of editing for the rather cringe posts that may or may not have appeared in the spring of this year when (or if, I should say) I get some time over winter break. It&rsquo;s almost the holidays, and that&rsquo;s probably something nice to look forward to amongst all the work and studying that needs to be done. Well, off to edit a lab.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>They made for fun productive procrastination readings, where I didn&rsquo;t want to properly rework something, so instead, I read these. Yes, I read for fun, and generally, I learn something, so that&rsquo;s that. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>Not entirely sure what to call it, but I&rsquo;ll assume session is the term. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>See, the time I spent playing <a href="https://regexcrossword.com/">Regex Crosswords</a> wasn&rsquo;t wasted. Maybe it was, because without it, I wouldn&rsquo;t have decided to make this complicated remapping scheme, but here we are. <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>Minutiae</title>
      <link>https://kewbi.sh/blog/posts/201018/</link>
      <pubDate>18 Oct 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/201018/</guid>
      <description>On working with the small.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>We are now very comfortably in the middle of the term, and while I&rsquo;m lucky not to have proper midterms, I think enough work has piled up to be counted as sufficiently midterm-studying-feels inducing. As I was going through my todo list<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, I&rsquo;ve realized that school ends up being a lot of small things. We do have longer assignments, but I try to break things up into smaller chunks. That ends up leaving me with a lot of small things to do, which is fine, but it prompted a rather interesting thought chain regarding small things.</p>
<p>School fosters a small, interconnected environment. Everything <em>can</em> be contained in its own box, but I feel I can really get ahead and do well if only if I join them together. For example, I can write the materials and methods section for my lab in a couple minutes, but I&rsquo;m not going to get proper marks if I hand just that in. As well, I&rsquo;ve noticed that we have a lot of classes (4 a day, like most other high schools), and that ends up equating to about four-ish sections of homework a day. If those assignments are due the next day or in the next week, they&rsquo;ll likely be smaller, and I can finish them faster. However, I&rsquo;m still going to have to end up doing a lot of mental context switching, and I&rsquo;m not entirely sure how efficient I am at that.</p>
<p>Perhaps I need to get better at doing small things.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<h2 id="the-workshop-analogy">The Workshop Analogy</h2>
<p>There was a book I read somewhere that I cannot find now, but somewhere buried amidst a sea of rather boring copy, they touched on the fair point that people (in this context, they were discussing manufacturing) are more productive when creating something from beginning to end. It described a workshop, in which several workers had a specified quota to fill each day. Once their quota was done, they were free to leave. Each item had rigid production steps, which had to be repeated for each of the sets of raw materials. Something like building an electronics project: one had to assemble the shell, put in the wiring, solder things together, and then close the entire thing up.</p>
<p>There were two types of workers: one sort that moved sort of like an assembly line, doing each individual step for all the items, and then repeating for each individual step; and the other sort, that completely finished one object from beginning to end. What they found was the completionists (people who completed one object from beginning to end)  worked faster - which makes sense, since they&rsquo;d have to switch contexts less. The efficiency of each step was the same for each person, but the assembly line-style workers did a lot of picking up and putting down and switching tools. That time added up, especially when the high amounts of product made each day were factored in.</p>
<p>The <a href="https://www.apa.org/research/action/multitask">American Psychological Association</a><sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>&rsquo;s done research on this topic as well (and other independent studies as well, of course) and found that context switching, similar to the time spent for the workshop people in switching between objects, is quite detrimental. In the piece linked above, they relate this a bit more to multitasking than task ordering, but the point still stands - context switching and multitasking isn&rsquo;t a superpower, it&rsquo;s something that slows people down.</p>
<h2 id="time-boxing">Time Boxing</h2>
<p>Or task batching, the productivity gurus call it. Essentially, it&rsquo;s the practise of grouping similar tasks together, or working through a series of related projects. Not quite multitasking, but it&rsquo;s apparently supposed to reduce context switching.</p>
<p>The way I attempted to implement this is by cutting my day into small chunks, and assigning those chunks to a backlog of tasks. Each backlog list contains items in one school subject, for example, or one related action, like reading and annotating different papers across subjects. It works well enough, and I <em>do</em> get my work done (slightly ahead of schedule, at the loss of a variety of other things). But still, it doesn&rsquo;t quite feel right.</p>
<p>See, the people who advocate for and sing the praises of time boxing all seem to be proper adults, going about their jobs. While the concept of a &lsquo;job&rsquo; seems rather mundane compared to school, that also likely means that they don&rsquo;t have to switch between seven or eight subjects, and process a set amount of information for each. Their batches are more closely related, and their projects are more overarching.</p>
<p>Perhaps this is an intended effect of the school system, keeping us flexible and on our toes. We jump between English essay to maths problems to chemistry problem set to history documentary to physics derivations. That seems like an awful lot of context switching, doesn&rsquo;t it? I&rsquo;d really like to sit down for a day and dive nicely into a topic. Take a day to fully finish a lab, and not leave a piece or two left for the next work session. And if I properly&rsquo;d finished all my homework, take some time to spend more than a haphazard, rushed hour or two at night to work on programming.</p>
<h2 id="no-one-has-enough-time">No one has enough time</h2>
<p>But no one seems to have enough time, a condition I also suffer (?) from. What ends up happening is I have to split my days into larger and larger chunks if I&rsquo;d like to take advantage of &lsquo;deep work&rsquo;,  and focus on one subject and one project, but then I forget to take breaks. Which aren&rsquo;t entirely necessary, but they&rsquo;re nice. Even if I did spend the entire morning on one task, I&rsquo;d be paying for it in the afternoon, when I&rsquo;d have to speedrun through the rest of my work.</p>
<p>I don&rsquo;t think the amount of work I throughput would be entirely different if I had one or two focuses to work on. Last summer was a fine example - I dedicated a day to one topic, and that was a nice break from flipping through all eight subjects. But the weekend is only two days, and I always seem to have more than two or even three topics to work on.</p>
<p>I also think that constantly switching between contexts and things probably leads me to feeling like I never got much done (even though I am very conscious of the fact that I indeed have). It never really feels like we&rsquo;ve had a proper break. Thanksgiving weekend was supposed to be a nice weekend where I promised myself I could have a day of reading random papers and posts and programming, but I ended up working on a lab. Though not out of necessity, so maybe that&rsquo;s just me being a nerd.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Work hard, play hard, as they say. I don&rsquo;t entirely find I have <em>time</em> or the <em>desire</em> to play hard (mode Minecraft), but that&rsquo;s alright. Having a lot of context switches now keeps me flexible, and used to having to switch things every hour or so. Would I prefer a system where I could focus on one or two subjects a week, and rotate? Probably. Would my education suffer? I don&rsquo;t know yet. Winter break feels like it&rsquo;s just on the horizon, so I&rsquo;m looking forward to when I can experiment with more proper time batching, but for now, I&rsquo;m doing fine.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p><a href="https://calcurse.org/">calcurse</a> is absolutely amazing. I can have all my Zoom links and one-off notes about things and todos in one place. Also, cool terminal interface. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>Go ahead, make the joke. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>Don&rsquo;t think I&rsquo;m going to implement a Literature Cited section in my posts anytime soon, so for now, direct links will have to suffice. <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>A metawrite</title>
      <link>https://kewbi.sh/blog/posts/201011/</link>
      <pubDate>11 Oct 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/201011/</guid>
      <description>On writing about writing (about writing).</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<blockquote>
<p>Meta. Adjective. Describing a creative work or angle of thinking. Definition: referring to itself or to the conventions of its genre, self-referential.<br>
&ndash; Oxford Dictionary</p>
</blockquote>
<p>This is how the Oxford Dictionary defines metaness. When I first was taught the concept of self-referencing things, I remember being very enthralled at the idea of metaness, and decided to try to investigate how to make my writing more meta. This ended up taking the form of several mostly-misguided poems about poems and papers about words or metaphors about ink and paper, but I&rsquo;d really prefer to keep those in a hard drive somewhere, never to be unearthed.</p>
<p>Despite those rather unsuccessful attempts at being meta (and I suppose we&rsquo;re adding a new layer of meta-ness by writing about writing about writing<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>), here I am, writing about writing again<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>. We&rsquo;ve been discussing personal narrative writing in class, I&rsquo;ve had to begin the process of repeatedly answering &lsquo;how would you describe yourself&rsquo; in various ways, and I&rsquo;ve been reading a lot more about writing as well. Along the way, I&rsquo;ve also been force-fed some NaNoWriMo <a href="https://nanowrimo.org/">(short for National Novel Writing Month)</a> by The Algorithm™, so in conclusion - lots of thinking about writing.</p>
<p>In other news, I&rsquo;ve decided that by the end of this year, I&rsquo;d like to somehow finish 50k words on this blog. Footnotes will apparently be included, because that&rsquo;s how Hugo determines its word count and I&rsquo;m not about to roll my own function for that. I&rsquo;ve also added a nice word counter for both total and individual page word counts, so that will be a handy check. At the moment<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, I have 39488 words, and I figure I can attempt about 1k words a week, and leave some room for breaks. It also happens to be the 42nd-ish week of the year, so I am behind schedule by approximately 1.5k words, which is fine. We&rsquo;ll figure it out somehow.</p>
<p>In the spirit of continuing to be meta about writing, I thought I&rsquo;d touch on some of the points I&rsquo;ve come up with surrounding this blog.</p>
<h2 id="personal-v-technical">Personal v. Technical</h2>
<p>The essays, if you can call them that, that I write tend to be either very personal and random, or mostly technical. Personal, random posts are fun to write, but get kind of tedious if I continuously do those - I&rsquo;m a very boring person, and most of what happens in a week gets summed up in about 50 words in a &lsquo;Currently&rsquo; section, if that. Technical articles are also pretty fun to write, but they are roughly equally boring for a) the people reading this blog, who are mostly all more technically able than I am, and b) me, if the article in question is a tutorial<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>.</p>
<p>In the future, I&rsquo;d like to post more of my proper, narrative essays (that may or may not be recycled schoolwork with a bit more tech thrown in) - from what I&rsquo;ve written this year they seem to be a bit more coherent than the &lsquo;random&rsquo; posts and otherwise very fun to write. I&rsquo;ve written one or two recently that I&rsquo;ve really liked, so that will possibly be appearing on another week when I am drowning in work.</p>
<p>I&rsquo;d also like to do technical devlogs instead of tutorials (I&rsquo;ve only tried one tutorial which was a bit annoying to write). Essentially, this&rsquo;d be something like a game devlog, for example, where I make a small feature in one of my projects or write a bit on how I made something. I&rsquo;ve done a couple devlogs - <a href="https://kewbi.sh/blog/posts/200816/">Revshare for GitHub</a> and <a href="https://kewbi.sh/blog/posts/200927/">the Blank Vim plugin</a> both are proper articles. They&rsquo;re very fun to write - I get to ramble on for a thousand words on how I made loads of mistakes.</p>
<h2 id="learning">Learning</h2>
<p>I&rsquo;m pretty sure the reason that I first started this blog was to a) flex that I&rsquo;d <a href="https://kewbi.sh/blog/posts/200214">done a thing</a> and b) to learn something. Every article about developers starting a blog involves something with &lsquo;oh look, I&rsquo;ve learned so much by <em>sharing</em>!&rsquo; A perfectly valid opinion, but not one I found applicable.</p>
<p>Part of this might be because I don&rsquo;t have comments or any sort of interactivity with these articles - I can&rsquo;t really see how people have learned (if at all). That&rsquo;s fine by me: writing about my process making things and destroying things<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> is more about the fun of it than the actual sharing of knowledge.</p>
<p>Perhaps this is an indirect sharing of knowledge, and indirect learning - I <em>have</em> had to do some research for some pseudo-tutorials I&rsquo;ve done to back up that I&rsquo;ve written about the right thing, but it&rsquo;s mostly whatever I feel like. Or perhaps I&rsquo;ve learned how to communicate better, though I don&rsquo;t really feel a substantial difference in proficiency. Then again, I haven&rsquo;t even blogged for a year yet, and as they say, Rome wasn&rsquo;t built in a day.</p>
<h2 id="continuity">Continuity</h2>
<p>The thing I&rsquo;ve gained the most out of writing is honestly having the continuity and rhythm. I infrequently posted in February and March of this year, as I figured out how and when and what I&rsquo;d write about. Starting in July-ish with the CS50 &lsquo;series&rsquo;, I started to write each week, and that&rsquo;s probably a good habit I&rsquo;d like to keep up the next year and in the future. It&rsquo;s rather relaxing to have an hour or so of time to draft<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup> one. Sometimes, that draft gets shelved - usually happens to the random, stream of consciousness ones - or it doesn&rsquo;t.</p>
<p>People (all of two people, so still people) have asked me how I have the time to write so frequently. Honestly, I don&rsquo;t. (Write frequently, <em>or</em> have the time.) I know some people who have tonnes of time, and continuously work on stories. Because of extracurriculars, school, and attempting to still work on some programming, I end up not having a lot of time for self-care, anyway, and apparently journalling is supposed to help with mental health: this is a journal, I suppose.</p>
<p>I&rsquo;d consider myself a very consistent person - my GitHub boxes are generally quite an even state of green, my blog posts are roundabout the same length, I have a schedule that I keep, etc. Once I started writing weekly, it just kind of stuck. Just getting the rhythm and making the agreement with yourself to write about whatever, for an audience of probably no one anyway, takes the pressure of of being perfect. Also, it&rsquo;s a nice excuse to pretend like I&rsquo;m active in the &lsquo;tech community&rsquo;.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Writing is, at this point, something most developers do, or are expected to do, according to some rather sketchy career articles, I&rsquo;d admit. I like reading developer blogs and Twitter feeds (even without a Twitter account), and I find nontechnical articles like this one fun, so I write similar ones. It&rsquo;s all a big feedback look, isn&rsquo;t it?</p>
<p>Even though I have no content for a novel, and none of the time that I&rsquo;d have to take in order to churn out 1667 words a day, I think that this 50k words a year goal isn&rsquo;t much of a stretch. At the end of the year, I can read through all the [inevitably cringeworthy] pieces I&rsquo;ve done as a sort of reflection.</p>
<p>Going forward, I&rsquo;d like to change the topic of this blog, write a bit more and on more varied topics, and maybe see if I can fit in an interactive article or too. (Looking at <a href="https://twitter.com/parametricpress">Parametric Press</a> and <a href="https://twitter.com/idyll_lang">Idyll</a> is absolutely mesmerizing.) Eventually, I hope there&rsquo;ll be a point where I can properly define &lsquo;Yours, Kewbish&rsquo;, but that point is very far into the distance. With a lot of the other work I&rsquo;ve done, I&rsquo;ve racked up a fair bit of staring at my keyboard within the last year - let&rsquo;s hope I&rsquo;ll continue this tradition for a while.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Oh wait, I&rsquo;ve done it - I&rsquo;ve written about writing about writing about writing. But that sentence therefore means I&rsquo;ve been writing about writing about writing&hellip; let&rsquo;s not go down this rabbit hole. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>As of writing, not including this piece because I haven&rsquo;t even finished it yet and I&rsquo;m not entirely sure how meta I want to be about counting. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>Especially including screenshots. That is a nightmare in and of itself. <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4" role="doc-endnote">
<p>And fixing them again, I promise. <a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5" role="doc-endnote">
<p>Which, let&rsquo;s be real, I only check once through Grammarly and skim over once anyway - no real editing. <a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>The story of &#39;Kewbish&#39;</title>
      <link>https://kewbi.sh/blog/posts/201004/</link>
      <pubDate>04 Oct 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/201004/</guid>
      <description>On the true meaning of Kewbish.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Apparently, I&rsquo;ve been told, &lsquo;Kewbish&rsquo; is not a conventional internet nickname. It doesn&rsquo;t seem to incorporate my actual name anywhere, does not consist of or include some part of the actual English language, and has an odd collection of strange groups of letters. Why &lsquo;wb&rsquo;, for example? Is it pronounced &lsquo;qbish&rsquo; or &lsquo;quebish&rsquo; or &lsquo;queuebish&rsquo;?</p>
<p>To all these questions, to be honest, I have no answer. I was twelve(ish), and even I can&rsquo;t understand what I was thinking two years ago. However, I <em>can</em> attempt to recall the very twisted thought processes (I thought myself clever) that led to my chaos of a username.</p>
<h2 id="the-transition">The Transition</h2>
<p>For context, I&rsquo;d begun a sort of coalition of sorts at school - it had something to do with being a nerd, which was what everyone called me at the time<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. After I attended some website / media camp thing over the summer, I came back to school armed with a weapon no eleven year old should have, for legal and ethical reasons: a Weebly account.</p>
<p>I created a website, and poured all my misguided childish creativity into a secret world and secret website, with layers of hidden hyperlinks and hover effects<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>. I also recall being very excited at somehow &lsquo;hacking&rsquo; (transform translates or display blocks were the peak of technical know-how) the Weebly footer to go away, and hiding as much Weebly branding as I could. We were <em>professional</em> eleven year olds.</p>
<p>Anyhow, I remember not wanting to attach my name to anything I did. Something about those scary internet safety videos we all had to watch and answer a worksheet with stuck, evidently. I didn&rsquo;t really know why I needed a pseudonym, but I did. I think I went with &lsquo;The Nerd&rsquo; (yes, stylized and all) for a while.</p>
<p>Fast forward a year or so - I wanted to start making &lsquo;games&rsquo;. I quote games because they were not games to any degree<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>. To make said games, I needed a cool name to publish all my amazing, AAA-rated creations under. This begins the dilemma of identity.</p>
<h2 id="the-true-meaning-of-smekday">The True Meaning of Smekday</h2>
<p>Allow us to detour briefly onto an old author I loved - Adam Rex. His worlds were always very nonsensical (kind of like this story), and I remember looking forward to finding any Adam Rex books at the library<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>.</p>
<p>Anyhow, I was halfway along <em>The True Meaning of Smekday</em> when a peculiarly named creature began to feature in the story. It wasn&rsquo;t actually featured as a character per se, but instead as sort of a side story. These creatures, as you may guess, were the basis of my nick: the koobish. They look something like:</p>
<figure>
    <img src="https://www.muddycolors.com/wp-content/uploads/2017/12/d5487-koobish.jpg"
         alt="A koobish."/> <figcaption>
            <p><em>A koobish. Taken from <a href="https://muddycolors.com">muddycolors.com</a></em></p>
        </figcaption>
</figure>

<p>Rather blobby. The koobish itself has a very interesting backstory that Adam Rex himself <a href="https://www.muddycolors.com/2013/03/where-koobish-come-from/">wrote about on Muddy Colors</a>, so that may be worth a read.</p>
<p>The koobish were a livestock created that were farmed and repeatedly shot into space by the Boovs, the alien race that takes over the planet. A poor little eighth grader befriends one of these Boovs, and among their many misadventures, she&rsquo;s told the tale of these mysterious koobish.</p>
<h2 id="changes">Changes</h2>
<p>This is the part of history that I, as the only person who actually knows the entirety of, will choose to redact slightly. It doesn&rsquo;t make a big difference at all - I promise.</p>
<p>That being said, I decided that just going by &lsquo;koobish&rsquo; was a little weird. First off, I didn&rsquo;t like the two O&rsquo;s next to each other, so I changed that to &lsquo;ew&rsquo;. This also had the side effect of making my nick possible to shorten to &lsquo;qbish&rsquo; or one of the many variations that have somehow formed today.</p>
<p>If you go far back into my website&rsquo;s <a href="https://github.com/kewbish/kewbish-source">GitHub history</a>, you may see remnants of a rather odd bunny-looking logo. That was my poorly misguided attempt at &lsquo;personal branding&rsquo;, and at replicating a koobish. It was very difficult to explain these things to people who just wondered what that was, so I always maintained it was just a rabbit.</p>
<p>If you go far back enough, you will also see mentions of an itch.io, which may or may not be related to the hidden history that I&rsquo;ve redacted, so do with that information what you will<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>.</p>
<h2 id="the-end">The End</h2>
<p>And here we are - present day Kewbish. Coming up with my own addition to the fine English language has also had the unintended, but not unwanted, effect of having an absolutely clean slate to build a &lsquo;web presence&rsquo; from. Before I decided to steal the search term for myself, I didn&rsquo;t have anyone to battle over, and I highly doubt any other individual will see &lsquo;koobish&rsquo; and attempt to twist it into the same thing I have, so that&rsquo;s safe for now.</p>
<p>A lot of people (actually not very many, but for the sake of the expression) have asked me &lsquo;what is a kewbish?&rsquo; and &lsquo;who is kewbish?'<sup id="fnref:6"><a href="#fn:6" class="footnote-ref" role="doc-noteref">6</a></sup>. To those people, I still have no answer.</p>
<p>In writing this rather short blog post, I&rsquo;ve spent far more time looking up pictures of koobish and misspelling &lsquo;Kewbish&rsquo; than I&rsquo;d really have liked, but sometimes, writing about non-tech related things is fun. Perhaps someday I&rsquo;ll intersperse the dull Vim posts with some personal essays from class, but that is for another day.</p>
<h2 id="currently">Currently</h2>
<p>I just finished up a rather annoying PR adding other authentication methods to <a href="https://diveintoht.ml">diveintoht.ml</a>, so I&rsquo;m currently praying that it doesn&rsquo;t break. I&rsquo;m also adding a linking PR soon, so hopefully that will be fun.</p>
<p>It&rsquo;s also been very fun to watch the Hacktoberfest drama that has unfolded over the last three days (oh boy, hasn&rsquo;t the last week felt like a year?). I personally don&rsquo;t really understand the point of adding a &lsquo;repo must have hacktoberfest label or topic for PRs to count&rsquo; if said PRs must already be merged or marked as Hacktoberfest-approved, but DO&rsquo;s trying out something new, I guess. I also don&rsquo;t really understand why they&rsquo;re changing the rules <em>now</em> and not maybe a couple days ago, but again, they&rsquo;re trying to figure things out, which I can give them some credit for. Hopefully, this&rsquo;ll end up a wake up call for the organizers that it&rsquo;s not just a PR stunt and has a lot of side effects.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Honestly very rightfully so. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>Also, there was something to do with nerds and alliances with other networks of people who weren&rsquo;t nerds, and the heads of those people were people who were working on the website with me - yeah I don&rsquo;t know either. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>Unless you count a game in which you jump around flowers and random pitches play a &lsquo;game&rsquo;. I don&rsquo;t think you would. <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4" role="doc-endnote">
<p>At this point, you may be seeing why people called me a nerd. <a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5" role="doc-endnote">
<p>That being said, please don&rsquo;t look too close - there are some interesting phases and commit names that should remain forgotten. <a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:6" role="doc-endnote">
<p>You are now legally allowed to make the &lsquo;but no one ever asks <em>how</em> is Kewbish?&rsquo; joke. <a href="#fnref:6" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>Creating a Vim plugin</title>
      <link>https://kewbi.sh/blog/posts/200927/</link>
      <pubDate>27 Sep 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/200927/</guid>
      <description>On playing with a little Vimscript.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>This week, we had our first proper English class, and our teacher happened to [re]introduce a series of issues and common phrases that should be replaced for better, more concise writing. This checklist is called <a href="http://web.uvic.ca/~gkblank/Blank's%20Writing%20Quirk%20List.pdf">Dr. Blank&rsquo;s Quirk List</a>, apparently. If you go through the PDF, it&rsquo;s a huge list of things like &lsquo;delete aforementioned&rsquo; and &lsquo;change economically deprived to poor&rsquo;. The thing is, we&rsquo;re going to be <em>graded</em> on how well we conform and utilize this list, so I&quot;m going to have to pay a lot of attention to this list.</p>
<p>But with all my problems, I decided to overengineer and automate a solution to a problem that didn&rsquo;t really exist.</p>
<p>Usually, I write my assignments in Markdown in Vim, and later use Pandoc to convert to a Word file if needed for the assignment. Therefore, I thought it&rsquo;d be nice to have a Vim plugin that could highlight and remind me of all the rules, so I wouldn&rsquo;t have to remember each of them. I also kind of just wanted to learn a bit of VimScript (or VimL. I still haven&rsquo;t figured out what it&rsquo;s supposed to be named.), and I thought that a simple highlighting plugin might be a nice, relatively easy introduction to the language<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>Eventually, it expanded to a linting function as well, which essentially copies the original file, replaces any Blank quirks found, and saves the file again. In the interest of making it easier to compare files, I also implemented a Blank diffing command, which lints files and then opens them in Vim&rsquo;s vimdiff mode.</p>
<h2 id="learning">Learning</h2>
<p>By the way, if you&rsquo;d like to go through the source of the plugin at any point (it&rsquo;s maybe only 20 lines or so, and it&rsquo;s pretty self-explanatory), it&rsquo;s up on my GitHub at <a href="https://github.com/kewbish/blank.vim">kewbish/blank.vim</a>. Maybe go take a look - or don&rsquo;t (it&rsquo;s quite messy).</p>
<p>I wrote the plugin in pure VimScript: I didn&rsquo;t feel like attempting to figure out Lua or trying to use a wrapper in some other language. I found the syntax pretty fun - it kind of reminded me of Hugo&rsquo;s templating syntax, which I&rsquo;ve always kind of liked. I found two resources that were extremely helpful throughout this attempt - <a href="https://learnvimscriptthehardway.stevelosh.com/">Steve Losh&rsquo;s tutorial on learning Vimscrip the hard way</a> and, surprisingly, the <a href="https://vim.fandom.com/wiki/Vim_Tips_Wiki">VimTips Wiki</a>. Once I realized that the VimScript I wrote was essentially just the commands I&rsquo;d normally run in the editor, I mostly trawled through the Vim Wiki for any new features or challenges that I faced.</p>
<h2 id="getting-started">Getting Started</h2>
<p>I started by just putting a huge list (all on one line, by the way. Vim&rsquo;s highlighting stopped halfway, which speaks to the amount of quirks I would have had to manually go through.) in my vimrc. I figured out that I was supposed to <code>let</code> it to something, and from there, figured out how to run custom commands.</p>
<p>At first, these commands just printed to the screen, but I needed them to properly do something, so I attached function calls to them. These functions were also empty, so it was time to properly learn VimScript.</p>
<p>With my past <a href="https://kewbi.sh/blog/posts/200913/">attempts at making a Vim colourscheme</a>, I was somewhat familiar with making a highlight group, so I decided to start figuring out how to highlight all the quirks. The syntax goes something like:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-vim" data-lang="vim"><span style="color:#a6e22e">highlight</span> <span style="color:#a6e22e">Blank</span> <span style="color:#a6e22e">ctermfg</span>=<span style="color:#ae81ff">95</span> <span style="color:#a6e22e">cterm</span>=underline<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">syntax</span> <span style="color:#a6e22e">match</span> <span style="color:#a6e22e">Blank</span> <span style="color:#e6db74">/find this/</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">syntax</span> <span style="color:#a6e22e">match</span> <span style="color:#a6e22e">Blank</span> <span style="color:#e6db74">/also this/</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">syntax</span> <span style="color:#a6e22e">match</span> <span style="color:#a6e22e">Blank</span> <span style="color:#e6db74">/this too/</span><span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>Obviously, I wasn&rsquo;t going to type out each of the matches, so I looked into Vim&rsquo;s for loops. I managed to come up with something like:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-vim" data-lang="vim"><span style="color:#a6e22e">for</span> <span style="color:#a6e22e">quirk</span> <span style="color:#a6e22e">in</span> <span style="color:#a6e22e">s</span>:<span style="color:#a6e22e">quirks</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    <span style="color:#66d9ef">let</span> <span style="color:#a6e22e">quirkLen</span> = <span style="color:#a6e22e">len</span>(<span style="color:#a6e22e">split</span>(<span style="color:#a6e22e">quirk</span>, <span style="color:#e6db74">&#34; &#34;</span>))<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    <span style="color:#66d9ef">if</span> <span style="color:#a6e22e">quirkLen</span> &gt; <span style="color:#ae81ff">1</span> || <span style="color:#a6e22e">quirk</span> == <span style="color:#e6db74">&#34;ing&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>        <span style="color:#a6e22e">execute</span> <span style="color:#e6db74">&#34;syntax match Blank /&#34;</span>. <span style="color:#a6e22e">quirk</span>. <span style="color:#e6db74">&#34;/&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    <span style="color:#66d9ef">else</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>        <span style="color:#a6e22e">execute</span> <span style="color:#e6db74">&#34;syntax keyword Blank &#34;</span>. <span style="color:#a6e22e">quirk</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    <span style="color:#66d9ef">endif</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">endfor</span><span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>to check if the quirk was supposed to be highlighted as a keyword or just with regex matching.</p>
<p>With that, syntax highlighting was pretty much done, but I&rsquo;d realized it&rsquo;d be pretty nice to have a mode that could automatically remove and show the difference between quirks and a quirk-free file (even if that file wouldn&rsquo;t be grammatically correct with lots of missing words, for example). So, I decided to write another function that would copy the file, open it in a split, and then use global find and replace to remove them all.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-vim" data-lang="vim"><span style="color:#a6e22e">for</span> <span style="color:#a6e22e">quirk</span> <span style="color:#a6e22e">in</span> <span style="color:#a6e22e">s</span>:<span style="color:#a6e22e">quirks</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    <span style="color:#66d9ef">if</span> !(<span style="color:#a6e22e">quirk</span> == <span style="color:#e6db74">&#34;ing&#34;</span>)<span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>        <span style="color:#a6e22e">execute</span> <span style="color:#e6db74">&#34;%s/\&lt;&#34;</span>. <span style="color:#a6e22e">quirk</span>. <span style="color:#e6db74">&#34;\&gt;//ge&#34;</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span>    <span style="color:#66d9ef">endif</span><span style="color:#960050;background-color:#1e0010">
</span><span style="color:#960050;background-color:#1e0010"></span><span style="color:#a6e22e">endfor</span><span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>This above for loop replaces all the quirks, and coupled with statements to construct an unique filename, copy the file to that filename, and splitting it, I managed to get a file that had all the quirks out. I could then open the two in a split view to see where they differed.</p>
<p>But then I realized - I could probably also automate that splitting, and after some digging, I found <code>diffthis</code>, which was absolutely great. With another function that called the first replacing function, I got a view where every section that had quirks taken out were shown. This definitely helped for me personally, because I was pretty concerned that one day I&rsquo;d miss a spot.</p>
<p>With these three functions, I figured I may as well try my hand at packaging this into a Vim plugin - maybe it&rsquo;ll be a little useful for someone out there.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<h2 id="plugin-structure">Plugin Structure</h2>
<p>The first thing I had to figure out after deciding to make the plugin a proper plugin was how to structure the project files, and where Vim-Plug and Vim would be expecting what. Eventually, I realized it had to go something like:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">├── autoload
│   └── blank.vim
├── doc
│   ├── blank.txt
│   └── tags
├── ftplugin
│   └── markdown.vim
├── LICENSE
└── README.md
</code></pre></div><p>I&rsquo;m going to go in reverse order:</p>
<ul>
<li>README and LICENSE are pretty self explanatory.</li>
<li>the <code>ftplugin</code> folder contains a <code>markdown.vim</code> file, which will be loaded upon any markdown file being opened in Vim. Because I only write markdown in Vim, that&rsquo;s all I need, though I suppose you could rename this to <code>text.vim</code>.<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> This contains three commands that call the main logic functions. More on that later.</li>
<li>the <code>doc</code> folder (not docs, as I had initially thought - another five minutes of Googling gone) contains the help file, <code>blank.txt</code>, which has some help tags, which are in <code>tags</code>.</li>
<li>And finally, the <code>autoload</code> folder. That&rsquo;s the slightly more complicated folder - it contains the main chunk of Blank-quirk-finding logic™. Those functions aren&rsquo;t autoloaded, like the ftplugin folder is, and I have to call them from the commands in <code>markdown.vim</code>.</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>Usually, I don&rsquo;t like short projects, but this was merely a low-pressure weekend fling, and hopefully, it&rsquo;ll keep my grades up. Also, an opportunity to pretend that I&rsquo;m not procrastinating on work with more work / programming, so that was fun. VimScript is also pretty intuitive, I find - I like the <code>endif</code> and <code>endfor</code> syntax, and the scoping with colons is also fun.</p>
<p>I find that I&rsquo;ve been writing a lot about Vim recently. Funny - I was just about to say that it&rsquo;d be back to regularly scheduled programming, but I really don&rsquo;t have any specific topics that I even write about. I might post a bit about some other school/tech related things that I&rsquo;ve been doing, or maybe I won&rsquo;t post at all. We&rsquo;ll have to see how busy school gets.</p>
<p>If I <em>can</em> find time, I&rsquo;ll be doing some cool things with <a href="https://diveintoht.ml">diveintoht.ml</a>, so maybe check that in a couple months or so. We&rsquo;ll see.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Most of my open-ended projects and assignments end up being programming and learning a new framework or scripting language and passing that off as academic work. It&rsquo;s a good system. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>Though I highly doubt that anyone whose grade semi-depends on the Blank list also uses Vim. I&rsquo;m pretty sure those are two very small sections that do not have an overlap larger than 1 (myself). <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>Also, as an aside, it&rsquo;s not <code>md.vim</code>, it&rsquo;s <code>markdown.vim</code>. Save yourself the hour it took me to realize. <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>Webdev in Vim</title>
      <link>https://kewbi.sh/blog/posts/200920/</link>
      <pubDate>20 Sep 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/200920/</guid>
      <description>On Vim for web development.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>As you may have noticed from my <a href="https://kewbi.sh/blog/posts/200913/">last post</a>, I&rsquo;ve been doing a lot of editing and writing in Vim. I mostly used VSCode before this, which came with a lot of nice housekeeping features, such as integrated git menus, and lots of autoformatting and intellisense options. When moving to Vim, the lack of these quality of life features was pretty sorely missed - I remember the first day I was properly on Linux trying to edit scripts for <a href="https://github.com/kewbish/revshare-gh">revshare-gh</a>, I was very annoyed by having to type out both the beginning and ending bracket in arrow functions. I was definitely missing the autoformat on save setting, and the nice indenting that was automatically in place.</p>
<p>Then again, Vim definitely can be made to do all these things. The thing is, configuring Vim to do something that VSCode does by default usually takes <em>time</em>. If I was in the middle of a school week when I&rsquo;d tried to get Vim set up, I definitely wouldn&rsquo;t have the time (or mental energy) to research language servers or autocompletion. I can see why this might be a reason that people&rsquo;d prefer just going with an IDE and clicking for one theme change rather than trawl through the Vim Wiki for the solution to a problem that doesn&rsquo;t exist. However, I do also like the customizability of Vim - I can change every colour, snippet, expansion, and keybinding, among many, many other configuration options.</p>
<p>This post will serve as a sort of journal during my first couple weeks doing webdev in Vim, which isn&rsquo;t something I&rsquo;ve seen a lot of resources and blog posts for (that being said, I didn&rsquo;t go much further than the first couple pages of Google). For context, these couple weeks I&rsquo;ve mostly been finishing revshare-gh and redesigning my website<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> - so I&rsquo;ve mostly been working in Javascript (yes, <em>JS</em>), HTML / CSS, and then a bit of YAML.</p>
<h2 id="phase-one">Phase One</h2>
<p>Phase One of my webdev in Vim experiment was mostly the first week or so. At this point, I didn&rsquo;t have any autocomplete, or much else other than a colourscheme, really.</p>
<p>Immediately, when I tried to edit HTML, I was sorely missing the automatic Emmet expansion and auto-end bracket pairing. I still haven&rsquo;t figured out how to add that bracket bit, but to fix the very obvious lack of Emmet, I just installed <a href="https://github.com/mattn/emmet-vim">emmet-vim</a>. This adds a <code>&lt;C-y&gt;,</code> expansion for Emmet abbreviations, which definitely made it less painful to write HTML - I didn&rsquo;t have to struggle around the angle bracket keys.</p>
<p>Within a couple hours of editing, I was also missing the select-surround functionality of VSCode. Essentially, if I selected a block of HTML, and started writing, it&rsquo;d surround the current tag in whatever I typed. (Also, they had a command palette option to surround in Emmet, which I haven&rsquo;t quite figured out how to do in Vim yet). I added this via <a href="https://github.com/tpope/vim-surround">vim-surround</a>. This excellent plugin lets me go into Visual Block to select a tag or so, and press <code>S&lt;tag&gt;</code> to surround with a tag. It makes HTML <em>much, much</em> easier.</p>
<p>I also wanted an autocomplete popup menu, and was a bit hesitant to look into Coc or one of the Vim language server protocol extensions, so I decided to just use <a href="https://vim.fandom.com/wiki/Make_Vim_completion_popup_menu_work_just_like_in_an_IDE">this workaround from the Vim Wiki</a>. Nothing fancy, and I didn&rsquo;t really get much in terms of &lsquo;autocomplete&rsquo; - it&rsquo;d only fill with tabs and words from the current open file. That was fine for what I was doing - basic HTML and JS where I wouldn&rsquo;t really need to do much documentation referencing. <a href="https://github.com/othree/vim-autocomplpop">AutoComplPop</a> added the IDE-like tab completion instead of <code>&lt;C-Space&gt;</code>.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<p>It was also extremely annoying to have to type sequences like <code>() =&gt; {}</code> - I was used to the VSCode style of just typing the beginning bracket. All in all, it wasn&rsquo;t too annoying, but I still installed <a href="https://github.com/jiangmiao/auto-pairs">auto-pairs</a> to bring this into Vim.</p>
<p>Formatting was basically done manually - I ran <code>js-beautify</code> (<a href="https://github.com/beautify-web/js-beautify">available here</a>) manually in a terminal split before I committed. Very simple, but a little annoying to have to remember it. No big deal though.</p>
<p>It took me a little bit of research to understand Vim&rsquo;s splits and tabs feature, but once I learned how to navigate around properly, it was very useful. I usually didn&rsquo;t work with split windows in VSCode, but I really liked being able to view both HTML and CSS side by side - don&rsquo;t know why I didn&rsquo;t enable it in VSCode. When working in my Hugo projects, for example, I&rsquo;d have a tab open with my HTML layouts and main CSS files, and another tab with a mostly-fullscreen terminal. This let me switch between <code>hugo server</code> and git commands.<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></p>
<p>You might notice that I didn&rsquo;t have one of those filetree plugins. That&rsquo;s true - I found :Explore more than enough for my needs. My projects are pretty small anyway, just a main file tree in a format that&rsquo;s familiar enough for me to know mostly where things where. If I needed to find a file, I&rsquo;d just grep for it in terminal, or click around in Thunar a bit. I don&rsquo;t find that I miss the side file tree at all, really. It&rsquo;d just take up more space.</p>
<h2 id="phase-two">Phase Two</h2>
<p>Phase Two is when I actually started investigating autocomplete. I had to properly look into what a language server even was, and understand what the client / server relationship was (i.e. where I was supposed to install things, and what helper extensions that Vim needed to work). I looked into <code>vim-lsp</code> and <code>asyncomplete</code>, both works of <a href="https://github.com/prabirshrestha">Prabir Shrestha</a>. They&rsquo;re probably better for lightweight setups, but I, for some reason, could not for the life of me get the popup tabs to, well, popup. I tried with HTML and CSS, and I found, after a lot of trawling Reddit, that I was supposed to get <em>another</em> plugin for snippets, and a couple more for actually configuring said snippets.</p>
<p>This was a bit overkill - even just adding the HTML language server involved adding around 5 plugins in my .vimrc, and I honestly didn&rsquo;t understand them much. I decided it was probably not worth the time to try to debug this. Besides, I have a decently powerful laptop - I could handle the extra resources that Coc needed.</p>
<p>As to why I chose Coc, I found it very easy to set up in comparison to the various lsp plugins, which had a more &lsquo;diy&rsquo; approach. I guess this is a bit of a counterpoint to my preference for having configurability, but anyhow, I thought it&rsquo;d be a better use of time to just put one plugin into place instead of having lots of smaller plugins that I didn&rsquo;t have any idea as to how they went together. Also, I&rsquo;d heard it was very fast and replicated a lot of VSCode Intellisense functionality (which, by this point, I was very much missing), so I gave it a go.</p>
<p>Maybe two or three <code>:CocInstall</code>s later, I had a nice setup running. I&rsquo;ve spent a little too much time doing things in Vim during the last couple weeks, so I&rsquo;m probably going to take a break from configuration. This setup works nicely for me at the moment, and I can write homework assignments / do math / code all in Vim, which is nice.</p>
<h2 id="conclusion">Conclusion</h2>
<p>If you&rsquo;d like to see my final configuration files, they&rsquo;re over at my <a href="https://github.com/kewbish/dotfiles">dotfiles repo</a>. I&rsquo;ve removed AutoComplPop - don&rsquo;t need it with Coc&rsquo;s autocompletion menu. Also took out the auto-pairs extension, which can also be done with <code>coc-pairs</code>.</p>
<p>While Vim&rsquo;s certainly a lot more minimal than VSCode, I don&rsquo;t really see a point in going back to VSCode and a Vim extension, for example. I&rsquo;ve managed to make my Vim work well enough for me at the moment, and I&rsquo;m not working on large Vue projects at the moment, so for now, it&rsquo;ll be great. I really like the setup right now - it feels very Emilie™.</p>
<p>Anyway, the school year&rsquo;s starting in exactly an hour and 4 minutes as of writing (yes, I prewrite these articles), so I&rsquo;m looking forward to the things I have lined up. Hopefully, I hear back from a couple interviews I have, and I&rsquo;ll have enough time to balance homework and my personal projects. This time of year is always a flood of emails, new responsibilities, and metric tonnes of assignments, but here&rsquo;s to hoping it&rsquo;ll be a great year.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Still very much a work in progress - I also still need to port styles back over to this blog, so please forgive if this blog remains looking sort of ugly and blocky for a few weeks. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>I was very much confused to find out that people actually hid their completion menu and just went from <code>&lt;C-Space&gt;</code>, even in normal IDEs. I&rsquo;d always had the autocompletion prompt open at all times - didn&rsquo;t even know it was an option to turn it off. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>The git integration was probably the thing I missed the least. It wasn&rsquo;t that hard to run <code>git add .</code> and <code>git commit -m</code>, and I&rsquo;m probably going to benefit more from having to interact with Git in the terminal instead of using a UI for everything. <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>Vim Colourschemes</title>
      <link>https://kewbi.sh/blog/posts/200913/</link>
      <pubDate>13 Sep 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/200913/</guid>
      <description>On my decision to go monochrome.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>In the middle of getting back to school and trying to redesign my website<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, I&rsquo;ve also been spending quite a bit of time in Vim. Since installing Manjaro a couple weeks ago (has it really been that long?), I&rsquo;ve decided to experiment with only programming and doing homework in Vim, instead of VSCode, which was my main text editor before.</p>
<p>Despite me having to forego several of the nice, housekeeping features of VSCode like linting and autoformat<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, I actually kind of like having such a minimalist environment. I didn&rsquo;t have autocomplete until yesterday (as of time of writing), so that forced me to actually type out every single snippet, instead of just scrolling through VSCode autocomplete popups. I&rsquo;d used Vim before, but not as a main editor. It&rsquo;s been a fun experiment, really.</p>
<p>With spending 100% of my writing and editing time in Vim also came a slight obsession<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> with customizing things. Looking up random settings to put into my <code>.vimrc</code> was quite fun - I&rsquo;ve managed to do most of what I usually rely on in VSCode anyhow. The Vim wiki really does happen to have everything.</p>
<p>One of these tweaking points was the colourscheme. (Or <code>colorscheme</code>, according to my vimrc. I use both terms interchangeably out of habit from American / Canadian English, so please make sure you&rsquo;ve spelled things correctly.) I <em>could</em> have just spent two minutes scrolling through default colourschemes, but I didn&rsquo;t like any of the inbuilt ones. Coming from VSCode, I thought it&rsquo;d be nice to have the same colourscheme, so I popped <a href="https://github.com/tomasiser/vim-code-dark">vim-code-dark</a> into my plugins and went about my merry day.</p>
<p>However, I wasn&rsquo;t quite happy with the colours - it was a bit too colourful for my taste, since the rest of my setup was relatively monochrome anyway. So - I spent some time researching how to change colourschemes. There are a bunch of internet tutorials for building a basic colourscheme, and even a generator for that™️, but I didn&rsquo;t find much about how to tweak an existing one.</p>
<h2 id="finding-a-colourscheme">Finding a colourscheme</h2>
<p>After watching several people flip through the endless catelog of <a href="https://vimcolors.com/">vimcolors</a>, I&rsquo;d probably suggest finding a colourscheme that you like ≥90% and tweaking that last 10% yourself. Or if you&rsquo;re planning on just monochroming something, a scheme that has your preferred range of saturation and colour. It&rsquo;ll save you time in customizing and also in finding schemes.</p>
<h2 id="how-colourschemes-work">How colourschemes work</h2>
<p>Note: most of this is from reverse engineering vim-code-dark, so probably take this with a grain of salt or two.</p>
<p>From my trawling of several Vim colourscheme repos, I&rsquo;ve kind of figured out that Vim takes colorschemes from whatever <code>colors/</code> folder your plugin or colourscheme is installed in. I&rsquo;m not entirely sure how Vim-Plug works, but whatever I edited inside <code>.vim/plugged/vim-code-dark/colors</code> happened to show up in my colourscheme, so I <em>assume</em> this is controlled via Vim-Plug and whatever you reference inside your <code>.vimrc</code>.</p>
<p>Vim also has a bunch of terms regarding the colours that are used for highlighting and styling.</p>
<ul>
<li>guifg and guibg: the foreground (text) and background (background of interface) colours for gVim (the GUI version of Vim).</li>
<li>gui: the text style, which obviously isn&rsquo;t a colour, but it fits in here.</li>
<li>ctermfg, ctermbg, cterm: the same as the gui equivalents, but for the terminal.</li>
<li>cterm256: which seems to be cterm but for 256 colour terminals.</li>
</ul>
<p>Vim does highlighting and colours with highlighting groups, which are all in <code>:help syntax.txt:</code>, under naming conventions. Here, the syntax is something like:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-vim" data-lang="vim"><span style="color:#a6e22e">highlight</span> <span style="color:#a6e22e">groupname</span> <span style="color:#a6e22e">key</span>=<span style="color:#a6e22e">value</span><span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>However, most of this is usually already filled in with whatever colourscheme, so you don&rsquo;t have to worry too much about this.</p>
<p>Another interesting note is that these <code>ctermfg</code> and <code>cterm256fg</code> (and the others as well) can be aliased, and the entire process made a lot easier with function aliases and things. While going through vim-code-dark, I noticed they were using a custom function, which provides shorthand for assigning fore and background colours. If you&rsquo;re interested, it might look a little like <a href="https://github.com/tomasiser/vim-code-dark/blob/master/colors/codedark.vim#L14">this implementation</a>.</p>
<h2 id="editing-colours">Editing colours</h2>
<p>Most colourschemes usually have a bunch of colour definitions, with a long list of <code>let</code> statements somewhere, so go look for those. In vim-code-dark, I had to edit the cterm256 definitions. The guifg parts get set with hexadecimal codes, it seems, but the rest of the colours seem to be from the 256 terminal colour chart. You can see the list <a href="https://jonasjacek.github.io/colors/">on this cheat sheet</a>.</p>
<p>What I did here was essentially look up each colour, copy-paste its hex code into Google&rsquo;s colour picker, then choose an appropriately saturated grey. (And yes, the whole colourscheme is grey. I might want to add some colour pastels but for now it works fine. Not on dotfiles yet - I need to set those up properly as well.)</p>
<p>The default color definition bit looked something like:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-vim" data-lang="vim"><span style="color:#66d9ef">let</span> <span style="color:#a6e22e">s</span>:<span style="color:#a6e22e">cdLeftDark</span> = {<span style="color:#e6db74">&#39;gui&#39;</span>: <span style="color:#e6db74">&#39;#252526&#39;</span>, <span style="color:#e6db74">&#39;cterm&#39;</span>: <span style="color:#a6e22e">s</span>:<span style="color:#a6e22e">cterm01</span>, <span style="color:#e6db74">&#39;cterm256&#39;</span>: <span style="color:#e6db74">&#39;235&#39;</span>}<span style="color:#960050;background-color:#1e0010">
</span></code></pre></div><p>and I just edited the cterm256 mapping. (Don&rsquo;t use gVim, but if you&rsquo;re using gVim it&rsquo;s the same, only editing the hex code.)</p>
<p>Some other schemes I looked at while trying to figure things out just used a bunch of definitions without variables - here, you can probably just do a <code>:%s/whatever/whatever2/g</code>.</p>
<p>Right now, it looks something like:</p>
<p><img src="https://i.imgur.com/9F4v0ns.png" alt="My Vim at the moment">
<em>My Vim at the moment</em>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I&rsquo;m still going to tweak some of the colours later, but for now, I think that this grey theme&rsquo;s pretty nice. For markdown and writing there aren&rsquo;t a lot of random colours jostling for attention, and when editing proper code it&rsquo;s half decent too. I really don&rsquo;t know why I&rsquo;ve decided to go full greyscale, but I&rsquo;ve also decided to redo my site in greyscale (that&rsquo;ll change soon hopefully once I decide on a nice accent).</p>
<p>Anyhow, back to tweaking my <code>.vimrc</code> (and definitely not spending too much time doing that).</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Which kind of ended up the same anyway, but I think the fonts and rounded-border elements look slightly more modern and less bland. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>I figured out <a href="https://github.com/neoclide/coc.nvim">Coc</a> recently, which was a rollercoaster ride in and of itself. A blog post to come soon - I&rsquo;ve decided to milk all my Vim learning experiences for blog content anyhow. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>I promise it wasn&rsquo;t that much time. <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>A Manjaro Installation</title>
      <link>https://kewbi.sh/blog/posts/200906/</link>
      <pubDate>06 Sep 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/200906/</guid>
      <description>On my shiny new dual-boot system.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>As you may have guessed from the title of this blog post, I have switched to Linux. And no, not Arch Linux - though I guess Manjaro is close. Specifically, XFCE Manjaro (and I&rsquo;ve also been experimenting with i3).</p>
<p>Before this, I was on Windows (yes, Windows, no need to pull all the &lsquo;but development&rsquo; cards) and WSL. I had a very strange split where most of my development things (like Python packages, programs, scripts) would be on the Windows side, and then only the programs that I absolutely <em>needed</em> from Bash and WSL (like C compilers for <a href="https://kewbish.github.io/blog/posts/200621/">CS50</a> and vim) on WSL. However, I&rsquo;ve been recently having to lean more on the WSL side, and having dependencies on both sides was a little annoying to manage. For example, I wanted to try Vim and configuring autocomplete with Python there, but the problem was, I needed the packages to be on the WSL side.</p>
<p>As well, I find myself surrounded by a lot of people who use Linux (specifically Arch evangelists), and their constant harping on about this super cool program and that interesting configuration made me curious. I wanted to see what it was like, and I&rsquo;d been spending a lot of time browsing <a href="https://reddit.com/r/unixporn">shiny rices on Reddit</a>. I don&rsquo;t think Windows has a proper tiling manager, and I didn&rsquo;t feel like trying to set up X sessions on Windows. While it&rsquo;s possible, I felt that it&rsquo;d be easier (and more fun besides) to just try installing Linux.</p>
<h2 id="day--">Day -∞</h2>
<p>Leading up to the install, which I kept putting off, I spent a decent amount of time researching how to dual boot, partition, configure Linux, and choosing a distro. Various <a href="https://distrochooser.de/">distro quizzes</a> (yes, somewhat cringe) and recommendations led me to Manjaro. It has the configurability of Arch, while having a GUI installer and being less of a pain to install (according to several blog posts, which were extremely reliable sources of information) than pure Arch. I didn&rsquo;t want to go with Ubuntu<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> either, and based on several (probably biased) articles, I decided that Manjaro would be the happy medium.</p>
<p>I also was thinking about KDE versus just a tiling WM, but I decided to go with XFCE (also with the help of several probably biased articles). It&rsquo;d provide graphical options, and would probably make it easier to transition from Windows and its infinitely explorable menus to the already unfamiliar Linux. I liked the idea of a tiling WM, but reading that it didn&rsquo;t provide the same shiny menus to click through was a bit off-putting. After a while, I also installed i3, but more on that later.</p>
<p>And of course, I wanted to experience the ever-mentioned Vim in its full glory. I&rsquo;d tried it in WSL so this wasn&rsquo;t <em>too</em> much of a leap, but it was a situation and a half getting used to no VSCode and just terminal.</p>
<h2 id="day-1">Day 1</h2>
<p>Day 1 was a fine Thursday - just after Hack The 6ix, where I really wanted to just spend some time doing mindless work that&rsquo;d work without headaches (spoiler alert: it wasn&rsquo;t entirely that, but it&rsquo;s fine). In the morning, I backed up all my old data (in the case of unfortunate fat-fingering) and while that was happening, I burned the ISO.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<p>After backing things up and doing some last minute research, I finally booted to the USB and followed <a href="https://forum.manjaro.org/t/howto-dual-boot-manjaro-and-windows/1164">this very fine guide</a> on the Manjaro forum.<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> I only shrunk my Windows partition by maybe half (this is important for Day 2), but besides that I was pretty proud of myself. I was quite pleasantly surprised that I ended up not messing anything major up, and the entire installation was done in 15 minutes.</p>
<p>For the remainder of today, I mostly messed around with terminal settings, and trying to explore XFCE settings. I managed to import my Chrome history and also set up a theme. I did a bit of terminal theming tweaking, and messing around with LightDM backgrounds. Didn&rsquo;t really do much to mess things up, just a lot of installing. I was also pleasantly surprised how fast things and packages download on Linux, and how relatively easy pacman was to use.<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup></p>
<h2 id="day-2">Day 2</h2>
<p>In the morning, I did a bit of schoolwork, and in the background, tried to install more packages. In the meantime though, I also realized that I would really be on Windows much, given that Linux seemed to be alright for everything except an office suite (which I have now but not at the time). So - I tried to resize partitions. (This is where the bit about partitions from last section comes into play). This is what my partitions approximately looked like:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">||| windows things ||| linux things + + |
</code></pre></div><p>The Linux side had about half, and I wanted to make it more like:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">||| win ||| lots of linux space         |
</code></pre></div><p>Essentially, more space. The problem was, I didn&rsquo;t know how to rearrange the space after shrinking Windows to move capacity to the home directory. I realize now that I could probably have just formatted the other directories and kept home, but I didn&rsquo;t know that then. In my defense, I hadn&rsquo;t realized that yet. So, I got the trusty Manjaro USB out again - and reinstalled. This unfortunately wiped a lot of my packages, so I had to reinstall things yet again. Unfortunate.</p>
<p>At least this time round, it was a lot easier to get things set up the way I&rsquo;d like - I knew where each of the relevant settings were, and I even set up OneDrive properly this time. It was very tedious to reinstall everything <em>yet again</em>, but in the grand scheme of things, I spent more time configuring each and removing unneeded packages.</p>
<h2 id="day-3">Day 3</h2>
<p>Today, I was messing around with power settings and things, and I found that normal Chrome was using a bunch of resources relative to the other programs, at least according to powertop. I did some research, and apparently it was due to YouTube and GPU decoding videos. It wasn&rsquo;t really enough to be noticeable, but I was interested in trying to tweak it anyway. So, I (tried to) download Chromium from pamac. I thought it wouldn&rsquo;t do anything major - just another install. (Spoiler alert: I was wrong.)</p>
<p>It was a pretty big install, so I just did more work and let it run in the background. However, once I finished a problem or two and I was checking on the install progress, I realized it was stuck. What&rsquo;s more, when I tried to close pamac (bad idea #1) just by exiting, it didn&rsquo;t close. Huh. I then tried to force quit it through processes (bad idea #2). It did close, but before that, I noticed that it was stuck particularly on &lsquo;Updating grub menu&rsquo;. In hindsight, that was probably a very bad idea. But I go about my day, and after finishing work, I shut down (kinda bad idea #3).</p>
<p>When I tried to boot my laptop again, I noticed that Manjaro&rsquo;s bootloader kept getting stuck on the HP logo screen, where the spinner would appear for a while, and it&rsquo;d go dark as if it were properly booting, but then getting stuck in a loop again. I thought it was an issue with the partition things I&rsquo;d done yesterday, so I re-enter the Manjaro boot live environment. Problem was, it was stuck waiting for a module forever. (Actually not forever, I was just impatient.)</p>
<p>I then tried booting into Windows, but for some reason, that was extremely slow and things weren&rsquo;t opening properly. I was pretty stuck on this, but then a friend donated a Manjaro wiki<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup> link. It detailed some grub menu fixes, which I attempted to do, but by then, the live USB had managed to fix itself (I guess turning things on and off again does somehow fix things), and I just ended up formatting every partition except my home, which I kept.</p>
<p>Cue a couple minutes of waiting, and then tedious reinstalls. After this though, I managed to not break my system (fingers crossed I don&rsquo;t manage to break it again), and I&rsquo;ve been fiddling for the past few days, tweaking configuration files and the like.</p>
<h2 id="conclusion">Conclusion</h2>
<p>In the future, I&rsquo;m going to continue configuring i3 (which I also installed, just to see what a tiling manager was like) and try to set this up just as I like it. I&rsquo;d like to fix the status bar to be not <em>quite</em> so colourful and information-full, and make the window tabs a different colour and design. I&rsquo;m still lurking a lot on various ricing subreddits, and it&rsquo;s quite inspiring to see how creative people are. I don&rsquo;t want to invest <em>too</em> much time into ricing, but I can tell I&rsquo;m going to be spending a while on it already. In addition, I&rsquo;d like to make all my colourschemes nice and greyscale, and maybe properly set up my dotfiles.</p>
<p>In case you wanted a screenshot, here&rsquo;s how my desktop looks at the moment (yes, this is a metascreenshot):</p>
<p><img src="https://i.imgur.com/ylo8NCl.png" alt="My desktop at the moment">
<em>My desktop at the moment</em></p>
<p>I&rsquo;m actually pretty pleased with what I&rsquo;ve managed to learn and create in the past week or so. It&rsquo;s quite bare - mostly just the default i3 config. I&rsquo;d like to &lsquo;rice&rsquo; it some more (apparently that&rsquo;s what it&rsquo;s called), and I feel like I&rsquo;ve learned a lot from repeatedly breaking my system three times in as many days. I can definitely see why Linux users get so superiorist about it - it&rsquo;s very easy to customize and I think I&rsquo;ll be trying to make this system as bespoke and shiny as I possibly can.</p>
<h2 id="currently">Currently</h2>
<p>I&rsquo;ve been finishing up a lot of small projects recently, and I&rsquo;d like to finally get to a more long-term project. I&rsquo;m thinking about creating a Chip-8 emulator, just to learn about CPUs and virtual machines / emulator development and things of that sort. I have an old Kano Pixel kit that I honestly haven&rsquo;t touched in roundabout 2 years, but they&rsquo;ve come up with a community SDK that I can probably use to write the Chip-8 graphics to. I haven&rsquo;t written a lot of Python recently either, so perhaps I&rsquo;ll look into making this as a learning project.</p>
<p>I&rsquo;m also going to be rewriting my website (yes, again), so please forgive any strange bugs that may occur on this site as I try my best to get it a little more modern. I&rsquo;ll be writing a post about this. Hopefully. If I remember. I have a lot of post ideas, and I&rsquo;m trying to get a couple weeks of backlog before I go back to school, so time to write!</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Liquid Galaxy VM configuration flashbacks <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>Funnily enough this was my first time actually burning a USB (besides Raspberry Pi but that doesn&rsquo;t really count) - my prior Linux experience was just messing around in VMs hoping for things to not break. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>Life pro tip, when googling around the Manjaro forum, the links aren&rsquo;t broken, just add <code>archived.</code> in front of the forum link. This would have saved a lot of time for me. <em>sigh</em>. <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4" role="doc-endnote">
<p>To be fair, most of this was just me being very surprised that Linux wasn&rsquo;t as difficult as I thought it was. Very interesting. <a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5" role="doc-endnote">
<p>I swear, the Manjaro forum has everything. And if it doesn&rsquo;t, the Arch Wiki definitely does. Linux and open source debugging is now forever mapped with wiki browsing in my mind. <a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>Internet Naming</title>
      <link>https://kewbi.sh/blog/posts/200830/</link>
      <pubDate>30 Aug 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/200830/</guid>
      <description>On my week&#39;s musings on names.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Names are something that end up being pretty tricky. First impressions properly do matter, and names are a pretty important part of a first impression, especially with people (at least for me) and software projects too, in a way. Case in point, my colleagues have a CTF team<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, and a couple months ago, we had a series of name crises. I was born with a very interesting name - one that&rsquo;s roundabout close enough to a popular one that no one questions it, but different enough that it gets misspelled every single time I meet someone new (unless they happen to see my name in text first).</p>
<p>Recently, I purchased my first domain (which if all goes well, and I figure out how I want to do things, you&rsquo;ll see this blog under in a couple months or so) under my Internet name. However, I&rsquo;ve been reminded constantly that I need to link my work to my name (obviously, and I agree). From my very first GitHub repo til now, I&rsquo;ve gone by Kewbish online. In the beginning it was for vaguely privacy related reasons - I didn&rsquo;t want people to know my real name. You know what they teach you in school, anyhow, don&rsquo;t tell internet strangers your personal information, etc. I guess I took that a bit too much to heart - and I&rsquo;d never have guessed that I&rsquo;d need to actually figure which name I want to move forward under.</p>
<p>This blog post will be a thousand words of me trying to figure out the pros and cons of either name (i.e. kewbish vs Emilie). If you have an opinion, I&rsquo;ll be xposting this to Dev.to in approximately 4 days, so freeze your discussion points for there.</p>
<h2 id="in-favour-of-kewbish">In Favour of Kewbish</h2>
<p>Well, Kewbish is what literally all my online handles that are even somewhat dev-related are, so that&rsquo;s probably the biggest pro in favour of staying with Kewbish. My GitHub, Dev.to, LinkedIn - all under Kewbish. It&rsquo;s very easy to Google me under the handle Kewbish, so I&rsquo;ve already got the SEO pretty down pat. No one else - that I know of - has tried to become a kewbish and usurp my beautiful top Google search result.</p>
<p>Kewbish is also a quite unique name. Maybe it&rsquo;s memorable, maybe it&rsquo;s just quirky enough that people can remember that Kewbish =&gt; Emilie. I&rsquo;d think that Kewbish is more catchy than Emilie anyhow, and despite what some people think, I&rsquo;d say that it&rsquo;s easier to stick &lsquo;kewbish&rsquo; in someone&rsquo;s head than &lsquo;Emilie&rsquo;. My logic is that Kewbish is such a new name that people&rsquo;ll probably think about it, and Emilie&rsquo;ll just sound like Emily, which is a very popular name and hence less memorable.</p>
<p>Also, while I do happen to be the first LinkedIn result for &lsquo;Emilie Ma&rsquo; on Google - there happens to be another Emilie Ma (or similar) who does photography on Instagram. I have nothing to do with photography at all, which should be fine in the case I want to rank under Emilie Ma. However, I don&rsquo;t think I can engineer the search like I can for Kewbish, which is so new that Google didn&rsquo;t even start indexing my site until maybe nine months ago.</p>
<h2 id="in-favour-of-emilie">In Favour of Emilie</h2>
<p>Emilie (with or without my last name attached) is my proper name, and probably what recruiters (if any ever try to find me), potential employers, reference-checkers, and basically anyone who knows me only by my real name would look up. Therefore, it makes sense that I at least try to rank something under Emilie, especially my LinkedIn which can then point to my personal site.</p>
<p>As well, what my parents told me is true - if I go up to someone, I&rsquo;ll tell them my name is Emilie. If they try to Google me, the only thing that really shows up right now that pertains to me is my LinkedIn. If someone doesn&rsquo;t take the time to click through to my website (if it&rsquo;s still under Kewbish and not under Emilie), then they can&rsquo;t find any of the somewhat cool things I&rsquo;ve done. I guess my LinkedIn should be enough, but it still doesn&rsquo;t describe all of the things I&rsquo;d like to elevator-pitch to potential people who are researching me.</p>
<p>Will people think that Kewbish is too cutesy or childish of a nick? Most people&rsquo;s online nicks at least somehow incorporate their name, I guess, and it could be possible that they think it a little kiddish. Using my real name would definitely avoid this.</p>
<p>And lastly, just going off Emilie would make explaining my handles less complicated. I&rsquo;ve had to do the &lsquo;oh no, my [social media and/or dev thing] is <em>kewbish</em> not Emilie Ma-&rsquo; thing a couple times before, and explain that whoever they&rsquo;d found wasn&rsquo;t me.</p>
<h2 id="in-favour-of-both">In Favour of Both</h2>
<p>The middle approach is to make all my website copy read &lsquo;Emilie Ma&rsquo; while slipping enough &lsquo;Kewbish&rsquo; that it still ranks under both. Essentially, I&rsquo;d have to maintain SEO things under both - twice as much work, but then people can find me two ways, so that&rsquo;d be pretty cool.</p>
<p>This way, I&rsquo;d keep my GitHub and social media things under Kewbish, preventing me from having to change all my repository information. As well, this prevents me from maintaining a pseudo-presence (keeping a GitHub, Dev, whatever account in the name Kewbish linking to my new one) on most of the platforms. I might make a GitHub under Emilie, and maintain that pseudo-prescence for SEO purposes only.</p>
<p>Going forward, this might be a bit tricky to do with my repos and online life (how am I supposed to squeeze Emilie in anyhow; will people be confused about who actually wrote the software; will people think Emilie and Kewbish are two separate entities) but it&rsquo;d prevent a lot of backwards-compatible work.</p>
<p>I&rsquo;m still thinking about all three approaches. I&rsquo;m leaning towards both, but maybe that&rsquo;s just because I like Kewbish. I&rsquo;ve used the name for so long, it just feels like <em>me</em>. I literally answer to Kewbish in real life and in voice calls anyhow - may as well keep it as my online name. And hey - there&rsquo;s always the possibility that I become so famous that moving away from Kewbish will make my work <em>less</em> popular, and I wouldn&rsquo;t want to do that, would I.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<h2 id="conclusion">Conclusion</h2>
<p>(This section was written a week and a bit later.) In the end, I&rsquo;m going to go with the mixed approach, I think. My GitHub repositories will stay under kewbish, and my website&rsquo;ll try to include equal mentions of Emilie and kewbish. Hopefully, this&rsquo;ll let my website rank on both keywords. Moving forward, I may as well keep using kewbish - it&rsquo;s already pretty associated with me and my work. Being consistent with kewbish&rsquo;ll probably work out better in the long term. At least - that&rsquo;s what I think at the moment.<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></p>
<p>I have two weeks until school, and once I completely finish all my homework, I think I&rsquo;m just going to spend a while coding. Coding&rsquo;s pretty relaxing, and I&rsquo;d like to rework my website again. This time, I have a design in mind, and I&rsquo;m going to properly finish that first before HTMLing and CSSing my way through. I think it&rsquo;ll turn out quite nicely.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>We don&rsquo;t really play anymore, do we? <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>Dreams. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>Based on my past indecisions, I&rsquo;m probably going to go back on this decision quite soon. Oops. <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>My Experience at HT6</title>
      <link>https://kewbi.sh/blog/posts/200822/</link>
      <pubDate>23 Aug 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/200822/</guid>
      <description>On my battles with JSON.stringify().</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>A couple hours ago, Hack The 6ix had their closing ceremony, and finished 36 (and a bit-ish) hours of hacking away. Hack The 6ix markets itself as Toronto&rsquo;s biggest summer hackathon (evidently, it wasn&rsquo;t in person), and it was an amazing experience! I learned a lot of things regarding JavaScript and OAuth, and did a lot of classic Kewbish speedrunning in the meantime. HT6 is supposed to be 36 hours long, but I happened to be asleep for roundabout 20 hours of the entire thing, so I didn&rsquo;t have time to complete an elaborate project. That&rsquo;s the spirit of most hackathons anyhow - short and sweet. I had a lot of fun<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, and this blog post&rsquo;ll be a story of the 16 remaining hours of HT6.</p>
<h2 id="the-project">The Project</h2>
<p>Before I launch into my chronicle of HT6, I may as well describe my project briefly. In the beginning, it was supposed to be a one-click (but customizable) solution to get Hugo pages on GitHub and published on Netlify as well. The template&rsquo;d include NetlifyCMS, a bunch of variables that can be tweaked (like all the colours, fonts, base images), and a script to automate deploys. I was supposed to get a login page up with Netlify and GitHub tokens, and then automatically create a repo and OAuth app in GitHub to pass into Netlify for automatic CMS and site generation.</p>
<p>However, it ended up being more on the GitHub side: didn&rsquo;t have time to integrate the Netlify. In the end, I created a GitHub action to replace all the variables and just have it set up for publication on Netlify without actually creating the site on Netlify for them. The app<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> forks a template from my GitHub and runs a Python script to replace the variables. Very hacky, not very stable and probably doesn&rsquo;t work properly, given that you have to initiate workflows from forked repos manually. But then again: <em>it&rsquo;s a hackathon project</em> and <em>it&rsquo;s a feature not a bug</em>.</p>
<h2 id="day-one">Day One</h2>
<p>HT6 started at 6PM for me (I was eating dinner so I already missed out on like thirty minutes oops), and for the first night, I just spent time reading through GitHub and Netlify docs to obtain various OAuth tokens. I ran into a bunch of issues because I didn&rsquo;t know how to properly use fetch (if you&rsquo;re the MLH recruiter reading through my blog, I can assure you I actually <em>do</em> know how to use fetch, I just blanked a bunch of times during the hackathon; I was very tired, please still consider me). First, I messed up the Authorization headers, and then I had a bit of an issue exchanging tokens on the Netlify side. In this respect, I actually think that Netlify&rsquo;s docs (and forums) were a bit more useful - the GitHub OAuth issue took ages and ages to figure out, while the Netlify one at least showed up on the first page of Google search results.</p>
<h2 id="day-two">Day Two</h2>
<p>I woke up normally early, but didn&rsquo;t start working until quite late - 800. (I&rsquo;d gone to sleep at a reasonable (read: 2130) hour - more time lost!) In the morning, I worked on setting up the customization form, which was challenging but still docs- and Google-able. Then, I started trying to get all the data into a bunch of API requests to start generating the template and hooking it up to GitHub&rsquo;s and Netlify&rsquo;s APIs.</p>
<p>The OAuth issue I was talking about earlier was that GitHub&rsquo;s <a href="https://developer.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow">OAuth web flow</a> doesn&rsquo;t actually support client-only exchanging for tokens. I&rsquo;m not sure if this is actually somewhere in the fine print or the OAuth docs that I just missed, but I ended up wasting a lot of time trying to debug a request that wouldn&rsquo;t work.</p>
<p>Luckily, the power of open source came in clutch: there was a repo for that! <a href="https://github.com/prose/gatekeeper">prose/gatekeeper</a> provides an easily Heroku-deployable pre-configured app that I could use to exchange for tokens instead! If not for this, I would have wasted infinitely more time trying to set a server up and debugging that instead of properly working with my app (which got scope-chopped as is). I really don&rsquo;t understand why GitHub won&rsquo;t let client side apps call the API, and not even making it extremely clear in docs. Very annoying.</p>
<p>Then, after setting that gatekeeper instance up and managing to finally get a token, I started trying to pass the data to GitHub to copy in. The way I approached making a copy of a template was forking the repo from my GitHub, then trying to edit all the variables. By noon, I&rsquo;d gotten the customization form to properly work, with nicely configured defaults, and I was planning to get the repos variable changing implemented right after lunch.</p>
<p>But then - I didn&rsquo;t. After lunch, I spent two hours trying to get a file&rsquo;s contents, replace a variable with the form data, and then POSTing a new page. I managed to get the contents fine, and managed to replace the variables fine. However, I had a lot of issues with trying to POST the new file contents back into the repository. It was returning a 404 not-found error - funny, because I&rsquo;d already authorized my OAuth app with the scopes needed, according to the docs. After maybe an hour retrying the same request over and over again, I took my token from my app&rsquo;s storage, and tried making a request with <del>Postman</del> <a href="https://hoppscotch.io/">Hoppscotch</a>. The weird thing? It worked fine.</p>
<p>Now, long story short (it was a very long story, mind you), I ended up finally just trying to copy the generated fetch request out of Hoppscotch itself, and there was my issue. (Again, MLH recruiter, I promise I normally remember these things.) I&rsquo;d forgotten to wrap my body in <code>JSON.stringify</code>. (Feel free to facepalm on my behalf.) With that, it worked, but by then, I&rsquo;d already moved onto approach #2.</p>
<p>Approach #2 was, instead of getting, replacing, and posting the correct content (variable replaced) back to the GitHub repo, I&rsquo;d just make a Python script to quickly activate with an Action. I have some experience with this (<a href="https://kewbish.github.io/blog/posts/200802/">from my profile README</a>, perhaps), and it was decently easy to implement. By then, I&rsquo;d already cut the Netlify automation (generating the site, adding the OAuth client ID and secret, and setting build parameters) out from the project scope. Hopefully, I&rsquo;ll end up being able to work on that in the future.</p>
<p>By then, it was pretty late in the day. I ended up just writing a simple landing page, and cleaning up some of the UI. I removed the Netlify token and authentication logic, and just did some polishing. I wrote a simple README, took a couple screenshots, recorded a demo video, uploaded all my submission data, and sent it off. (By now, it was maybe 2100. Yeah, it was early. Could I have done more? Probably. Did I have the energy to? Probably, but I didn&rsquo;t really feel like staying up late for a hackathon).</p>
<h2 id="reflections">Reflections</h2>
<p>You might notice that I didn&rsquo;t attend any meetups. That was true (I did spend some time in the networking level of the event) - and I probably should have taken more time to explore and network, actually. Hackathons are probably the best way to meet like-minded people outside of proper jobs and conferences. However, if I <em>did</em> go out to a bunch of events, I wouldn&rsquo;t have any time to work on the hack. That&rsquo;s an aspect of hackathons that I&rsquo;m not sure if I like: the balance between networking, events, fun time, and work. I&rsquo;m not sure whether I&rsquo;d value a proper project more, or a couple workshops.</p>
<p>And as well, this was the first short-term hackathon that I&rsquo;ve done. (Does the Dev.to hackathon count?) Anyhow, this was the first very-short-term-panic-speedrun session that I attended, and I&rsquo;d say it was a pretty good experience. Learning to get a project from 0 to somewhere in a very limited amount of time (which is even more limited when you value sleep instead of projects) is valuable, especially learning how to prioritize features and come up with a plan to work. For me, I&rsquo;d written down a list of things I needed to do and attached them to time chunks I&rsquo;d work. Managing that, as well as learning new things, was pretty fun. However, I don&rsquo;t think I want to constantly do a bunch of hackathons - they promote a very short-term, quick churn, small project mindset that I&rsquo;d like to turn away from. I&rsquo;ve done a lot of small projects in the past, and I&rsquo;d like to get into a bigger, longer-term, more impressive project to dedicate myself to in the future.</p>
<p>Anyhow, here are my three biggest takeaways and things I&rsquo;d like to do next hackathon:</p>
<ul>
<li>network more! Set aside some time to go around sponsor booths and really connect.</li>
<li>limit scope - be realistic with what I can do, and then be more realistic and cut some things.</li>
<li>stringify my request bodies. I&rsquo;m only half joking.</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>HT6 was a tiring, but engaging hackathon. In the end, I had fun - that&rsquo;s all that matters.<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> Hackathons are really fun, but I think I&rsquo;m too tired right now to do another 36 / 48 / 72 hour hackathon anytime in the near future. (At least a week, please.)</p>
<p>Right now, I&rsquo;m going to finally finish up Revshare.js for GitHub, maybe release it, and then actually solidify a project I&rsquo;d like to work on during school. Oh, and maybe play a little Among Us. Solid game, and I need to recharge from speedrunning a project in effectively 16 hours. Might spend more time working on private repos, so don&rsquo;t expect to see much activity. We&rsquo;ll see.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>That was a joke; JavaScript and OAuth APIs are very painful to write, debug, and interact with. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>By the way, the app&rsquo;s called Obviate (why? I was doing Wordly Wise and had lesson review words stuck in my head.), and if you&rsquo;ve taken the time to actually read through all these footnotes, you get a <a href="https://devpost.com/software/obviate-src">special link to my submission</a>. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>Shoutout to that guy who gave me career advice, the people who gave me resume help, the mentors who jumped in to help debug the OAuth, and the people in Pwnzorz that provided me with quality background noise and entertainment. <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>CS50: The End</title>
      <link>https://kewbi.sh/blog/posts/200816/</link>
      <pubDate>16 Aug 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/200816/</guid>
      <description>On my final thoughts about CS50.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>And finally, after one and a half-ish months, I&rsquo;m done with CS50! From the <a href="https://kewbish.github.io/blog/posts/200621/">very first blog post</a> till now, I&rsquo;ve been enjoying documenting my progress and learning, and it&rsquo;ll be a fun read to reference back to in a couple of years to see how I&rsquo;ve built off this knowledge.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> This last week, I&rsquo;ve been working on my final project, and here, I&rsquo;ll be going through that, along with my thoughts and reflections on the course and experience as a whole.</p>
<h2 id="final-project">Final Project</h2>
<p>My final project was a Chrome extension that added Web Monetization capabilities to GitHub. For context, Web Monetization is a proposed browser API that&rsquo;ll make it easy for developers and content creators to monetize their browser work. It works by streaming small micropayments over time to a payment pointer, specified by the creator. This pointer is located in a meta tag with the name <code>monetization</code>, and while this API hasn&rsquo;t officially been implemented in any major browsers, you can read more about it <a href="https://webmonetization.org/">here</a>.</p>
<p>Recently, there was also a <a href="https://dev.to/devteam/announcing-the-grant-for-the-web-hackathon-on-dev-3kd1">Dev.to hackathon</a> where Coil, Creative Commons, and Mozilla were calling for project proposals for their grants. I participated in this hackathon, and my project was an implementation of revenue sharing with payment pointers. Essentially, this implemented a custom HTML tag that had an attribute of an array of payment pointers, and my library, <a href="https://github.com/kewbish/revshare">revshare.js</a> made it easy for devs to add a probabilistic pointer choice for the payments to be streamed to.</p>
<p>Fast forward a couple months - to this week, in fact. I was looking for a CS50 project, and after brainstorming a couple random projects, a colleague suggested &lsquo;Revshare.js for GitHub&rsquo;. I immediately liked the idea - it was relatively simple to implement, would teach me more about GitHub&rsquo;s GraphQL API and Chrome extensions, and I saw it as a logical extension of the earlier hackathon project. So with that - I jumped into creating the extension.</p>
<h2 id="features">Features</h2>
<p>The extension&rsquo;s pretty simple, but has three-ish main features.</p>
<p>One, it goes through the repository (through a check to see if you&rsquo;re on a github.com/*/* domain) and looks for a Sponsor button through some questionably implemented DOM checks. If found, it looks for the link to the fragment HTML, which I then scrape and select all the links, through more sketchy queries. Once I&rsquo;ve retrieved all the links, I check if each link begins with a dollar sign, which is the syntax for a payment pointer. If that pointer&rsquo;s found, or if there are multiples, it chooses one randomly to add to the head of the page itself. With Coil, the extension then begins streaming payments to the payment pointer.</p>
<p>Two, it adds a <code>starsOnly</code> flag to Chrome&rsquo;s storage. If selected, it&rsquo;ll check that the repository is starred before inserting the monetization tag. If it&rsquo;s selected, and the repo isn&rsquo;t starred, then too bad - the repo owner won&rsquo;t be able to get any monetization. This is accomplished through some quite questionable queries to the GitHub links at the top of each repo.</p>
<p>Three, it adds a bunch of checks through each repository&rsquo;s dependencies, looking for the same funding links and $-indicated wallet pointers. If they&rsquo;re found, the extension performs another random selection between the existing repository funding pointer and these new links. It&rsquo;s a roughly 50/50 split between repository creator / owner (i.e. original funding pointer from repository itself) and a random dependency chosen from the list of valid wallet pointers found in each dependency&rsquo;s links. This is pretty cool, because a lot of repositories and dependencies are built for dev-only use, and they don&rsquo;t get a lot of love from supporters. We can even look at stars between a popular Python web microframework Flask and its dependency Jinja. Flask has 51.7k stars, and Jinja a meagre 7.2k in comparison. Given a similar percentage of stargazers / sponsors, Jinja would get a lot less funding - though both libraries are equally important<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></p>
<p>I found it really fun to learn a bit more JS (it&rsquo;s not <em>as</em> painful as it&rsquo;s made out to be, used in the appropriate contexts) and do a bit of DOM engineering. I was very intrigued at the little performance things that GitHub added, like only loading funding links when the button is hovered over, and loading both starred/unstarred versions of the top bar and switching between them client side (I believe). These little tricks were definitely annoying, but in the end, they probably make the GitHub website a ton faster, and hey, I eventually found ways around them. (And in the future, I&rsquo;ll be sure to use the same bypassing techniques I used, like getting fragment URLs instead of trying to force a button click, when I&rsquo;m trying to manipulate something else.)</p>
<h2 id="cs50-experience">CS50 Experience</h2>
<p>I found the first few weeks of CS50 extremely informative. Going from someone who&rsquo;d basically only touched Python, it was sometimes difficult to understand lower-level details like pointers and such, but (while I&rsquo;m still an extreme beginner and probably can&rsquo;t do much more complicated than Problem Set 5) it was great for what I was taking the course for: data structures, algorithms, and more low level knowledge.</p>
<p>However, I found the latter half of CS50 kind of glossed over a bunch of technologies instead of really diving deep into one for the entire time. I wouldn&rsquo;t have minded as much if it was just C / Python and we went equally (or not) deep into both. The way they have it now, we&rsquo;re just speedrunning a bunch of things that are slightly related but not entirely, and slapping them all together. I would have loved to spend more time with SQL and Flask - but then again, CS50 is an <em>intro</em> to programming, not a deep dive into whatever.</p>
<p>I guess there wasn&rsquo;t that much of an overlap between my initial purpose for taking CS50 and what it ended up being. It might have been due to the fact that I&rsquo;ve already done Python and Web, really, but I ended up just speedrunning most of the latter half of the course. I would have enjoyed going into more DSA in C, for example, but that wouldn&rsquo;t have really helped newbie programmers, I suppose.</p>
<p>In the end, if you gave me a magic time machine, I would still have taken CS50, but maybe dropped after the first few weeks. I found it a great experience, and nothing&rsquo;s perfect. Taking a Python DSA (or even just C DSA) course, and then taking a few weeks to do a proper web project and learn SQL / Flask might have been a more beneficial route for me, but CS50 also gave me a lot of motivation. Look, a shiny <em>Harvard</em> certificate. Maybe the feeling of actually taking a class and getting that Harvard clickbait helped me through it. I don&rsquo;t know - but I&rsquo;ll be doing more research and more carefully considering any MOOCs / courses I take in the future.</p>
<h2 id="conclusion">Conclusion</h2>
<p>As I write this, I realize that I only have two (three? four? depends on when the school system decides to start, but so far I think it&rsquo;s three?) weeks of summer left. CS50 + summer courses + random projects made the time pass a lot quicker than I thought it did, and as I look back, I don&rsquo;t think I took that much time for &lsquo;relaxation&rsquo; really. Then again, coding is kind of my &lsquo;relaxation&rsquo; thing, so maybe in a way I&rsquo;ve done a lot more relaxation than it looks like I have.</p>
<p>I&rsquo;m looking forward to <a href="https://hackthe6ix.com/">Hack the 6ix</a> in a week, and then writing and finishing up some summer work for school for the rest of summer. Maybe I&rsquo;ll release Revshare for GitHub on the Extension store if I feel like it, and maybe I&rsquo;ll work on starting a bigger project. One thing at a time though - time to add CS50 to my list of Licenses and Certifications on LinkedIn!</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Which hopefully, I have. But then again, who knows what I&rsquo;ll be into in a few years. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>Points nearly directly ripped from VC discussions by aforementioned colleague who provided idea, who will not be named for privacy (yes, I&rsquo;m looking at all you classmates who I <em>know</em> will stalk anyone I so much as mention in passing on this blog.) reasons. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>CS50: Web Track</title>
      <link>https://kewbi.sh/blog/posts/200809/</link>
      <pubDate>09 Aug 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/200809/</guid>
      <description>On my travels on the Web Track.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p><em>This post is going to be shorter than normal. I may or may not have forgotten to take proper notes for most of this track except Flask.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></em></p>
<p>Web track, check. Homepage and Finance were pretty fun, and now, we have the final project ahead. This week (or track, I suppose) went through web technologies, going through HTML / CSS / JS and Flask. I&rsquo;ve been planning on learning Flask for a while<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, and this was a great opportunity to try to use it! I know I said that Week 5 was the week I&rsquo;d been looking forward to the most, but it was genuinely really nice this week to finally work on something I have experience with.</p>
<h2 id="notes">Notes</h2>
<ul>
<li>Each machine has an IP
<ul>
<li>used to use IPv4 -&gt; 32 bit addresses</li>
<li>now IPv6 -&gt; 128 bit addresses</li>
<li>IPv4 overflowed (too many devices)</li>
</ul>
</li>
<li>HTTP -&gt; protocol to transfer information
<ul>
<li>HyperText Transfer Protocol</li>
</ul>
</li>
<li>DNS -&gt; maps domain numbers to servers that can resolve that domain</li>
<li>Response codes -&gt; return of request</li>
<li>Flask -&gt; microframework to make web apps w/ Python</li>
<li>Flask templates -&gt; <code>render_template()</code>
<ul>
<li>allows us to interpolate variables, extend layouts</li>
</ul>
</li>
<li>Flask templating uses Jinja syntax
<ul>
<li>Like Vue mustache syntax, but with % signs</li>
<li>specific end blocks for for and if</li>
</ul>
</li>
<li><code>request.args.get()</code> is useful for getting form inputs
<ul>
<li>remember to sanitize input and make sure that inputs exist
<ul>
<li>otherwise, return error</li>
</ul>
</li>
</ul>
</li>
<li>In Finance, we make separate conditions to return different templates if post/get</li>
<li>use Flask sessions to maintain data like user cookies, etc.
<ul>
<li>otherwise, use the sqlite database
<ul>
<li>run queries with db.execute</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="problems">Problems</h2>
<p>I did Finance first, because I thought that I wanted to redesign my own site for Homepage (more about that later). I found their todo-list structure of teaching / explaining what to do. This was actually one of the reasons I quit Under the GUI (coding extracurricular I was doing when I was a smol child) - too much spoon feeding and not enough self-research.</p>
<p>Giving freedom to implement however we liked was a good idea in terms of implementation and research, but this comes at the cost of testing. (Or maybe this just wasn&rsquo;t in the CS50 check50 library and they didn&rsquo;t want to add a bunch of overhead for one problem set check) This might have been an interesting opportunity to explain TDD (hmm, another thing that I <em>should</em> learn) or even just explaining what automated testing was.</p>
<p>When I decided it was finally time to try to attempt redesigning my website, I quickly realized that it&rsquo;d take ages, especially since I don&rsquo;t have any ideas right now. The requirements were a 4-page website, so I just slapped an extra page (that looks nothing like the rest of my site because it&rsquo;s entirely built with Bootstrap) onto my <a href="https://kewbish.github.io">current site</a>. For the JS requirement, I worked in one of those console header things; y&rsquo;know, <code>console.log()</code>s in most big sites that remind you to apply for their jobs.</p>
<p>It&rsquo;s pretty simple, but I was feeling tired. Which is another discussion point - I think Homepage was probably the only big problem in CS50 where I didn&rsquo;t really feel challenged, besides the Python ones. Even with the Python ones I was trying to time myself in a self-run programming contest, whereas here I was just trying to speedrun. Despite this week&rsquo;s relative apathy, I have a scheme for the final project. (Which will also probably take a while, so we&rsquo;ll have some filler content in between.)</p>
<h2 id="conclusion">Conclusion</h2>
<p>I can&rsquo;t believe I&rsquo;m already almost through with CS50 - as of writing this, I think it&rsquo;s only been a month and a couple days. I&rsquo;m surprised how much I managed to speedrun, and how much I managed to learn in the meantime. It&rsquo;s been an great time<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>, and I might consider doing the Web Programming course as well. (Or maybe not. We&rsquo;ll see.) Time to start brainstorming for a final project (I have too many ideas and I have a feeling I&rsquo;m going to go with none of the above) - hopefully it&rsquo;ll turn out interesting.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Is it extremely Canadian of me to want to apologize? <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>Why do I always feel the need to go with the quirkiest framework possible? <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>And other phrases I&rsquo;ve directly copied from my GCI experience post. <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>Automating READMEs</title>
      <link>https://kewbi.sh/blog/posts/200802/</link>
      <pubDate>02 Aug 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/200802/</guid>
      <description>On my tinkering with automation.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>I&rsquo;m working on the web track of CS50 at the moment, and I&rsquo;m having a lot of fun, actually. I&rsquo;ve been thinking of redesigning this website (<a href="https://kewbish.github.io/blog/posts/200429/">hmm, where have I heard that before?</a>) again - probably not for the last time in the next couple years either. Right now, I feel that it&rsquo;s a little bland and colourless, and the landing page especially isn&rsquo;t that eye-catching and poppy. People&rsquo;ve also told me that the monospace is a little hard to read in large chunks, so I&rsquo;m rethinking my design system<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> again.</p>
<p>That said, it&rsquo;s taking quite a bit of thinking and work, so it&rsquo;s definitely going to take more than a week to redesign this and work on the Finance problem set. In the meantime, I thought I&rsquo;d take some time to investigate GitHub&rsquo;s new profile feature, and take a dive into GitHub Actions.</p>
<h2 id="yes-we-have-readmes-now">Yes, we have READMEs now.</h2>
<p>For a couple days, my <a href="https://dev.to/kewbish">Dev.to</a>, Reddit, <em>and</em> dev Discord feeds were inundated with <em>the shiny new GitHub profile README feature</em>. If you were blessed with a README-flex-free feed, all you need to know is that if you create a repo named your GitHub username (i.e. <code>kewbish/kewbish</code>) and make a README, it&rsquo;ll show on your profile, like so:</p>
<p><img src="https://i.imgur.com/13Rd9gJ.png" alt="Hey, a cool README. Yes, it&rsquo;s mine."><br>
<em>Hey, a cool README. <del>Yes, it&rsquo;s mine</del>.</em></p>
<p>I&rsquo;m not going to go through writing the copy / main text of the README much. Personally, I just rewrote some of the key points on my LinkedIn and resume, just in a less formal, more chill tone. (I hope that&rsquo;s how it reads anyhow.) If you trawl through the Git history, you can see that I used to have a version with a lot more bullet points - that was my resume copy-paste. I tried to keep it as short as I could, and tried not to repeat the same links too many times.</p>
<p>After writing the first version, I started seeing lots of cool READMEs on Dev.to. Apparently, there&rsquo;s even an <a href="https://github.com/abhisheknaiidu/awesome-github-profile-readme">awesome list</a> now. Why am I not surprised?</p>
<p>Anyhow, after reading through <em>too many</em> &lsquo;top 8 GitHub README&rsquo; lists, I found <a href="https://github.com/simonw">SimonW&rsquo;s</a> featured quite often, and I really liked the self-updating blog posts / TIL sections. So, I decided to implement a similar, albeit simpler version on my own README.</p>
<h2 id="rss-with-hugo">RSS with Hugo</h2>
<p>Skip over this bit if you&rsquo;re not using Hugo - I&rsquo;m just going over some changes to Hugo&rsquo;s default RSS that you can definitely ignore.</p>
<p>Hugo comes with a RSS template built in, so I had an RSS feed before I even knew I had one. However, you can also <a href="https://gohugo.io/templates/rss/">customize it</a> just like all the other default layouts. <a href="https://github.com/gohugoio/hugo/blob/master/tpl/tplimpl/embedded/templates/_default/rss.xml">This</a> is the default template Hugo ships with - here are the changes I made.</p>
<ul>
<li>Changing the description (line 18):</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;description&gt;</span>Recent content {{ if ne  .Title  .Site.Title }}{{ with .Title }}in {{.}} {{ end }}{{ end }}on {{ .Site.Title }}<span style="color:#f92672">&lt;/description&gt;</span>
</code></pre></div><p>This is pretty self-explanatory, just changed it to:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;description&gt;</span>Latest Yours, Kewbish posts<span style="color:#f92672">&lt;/description&gt;</span>
</code></pre></div><ul>
<li>Changing the date format (line 32):</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;pubDate&gt;</span>{{ .Date.Format &#34;Mon, 02 Jan 2006 15:04:05 -0700&#34; | safeHTML }}<span style="color:#f92672">&lt;/pubDate&gt;</span>
</code></pre></div><p>I prefer a cleaner date format (02 Jan 2006) instead of <em>all</em> this time info, so I changed this to:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;pubDate&gt;</span>{{ .Date.Format &#34;02 Jan 2006&#34; | safeHTML }}<span style="color:#f92672">&lt;/pubDate&gt;</span>
</code></pre></div><ul>
<li>Move from summary to description (line 35):</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;description&gt;</span>{{ .Summary | html }}<span style="color:#f92672">&lt;/description&gt;</span>
</code></pre></div><p>I wanted to use my descriptions instead of the first couple lines, so I used this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-xml" data-lang="xml"><span style="color:#f92672">&lt;description&gt;</span>{{ .Description | html }}<span style="color:#f92672">&lt;/description&gt;</span>
</code></pre></div><p>These are all just personal preference, but it makes the README bit a little more consistent with the actual blog.</p>
<h2 id="scripting-with-python">Scripting with Python</h2>
<p>The README update script is only 18 lines of Python, and uses the <a href="https://github.com/kurtmckee/feedparser">feedparser</a> library to, well, parse the RSS feed.</p>
<p>Of course, let&rsquo;s start with installing and importing the library with <code>pip install feedparser</code> and:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py"><span style="color:#f92672">from</span> feedparser <span style="color:#f92672">import</span> parse
</code></pre></div><p>Next, we&rsquo;re going to get all our feed entries.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py">feed <span style="color:#f92672">=</span> parse(<span style="color:#e6db74">&#34;https://kewbish.github.io/blog/index.xml&#34;</span>)<span style="color:#f92672">.</span>entries
latest <span style="color:#f92672">=</span> [
    f<span style="color:#e6db74">&#34;&#34;&#34;- [{feed[i].title}]({feed[i].link})  </span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">{feed[i].description} - {feed[i].published}&#34;&#34;&#34;</span>
    <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> range(<span style="color:#ae81ff">3</span>)]
</code></pre></div><p><code>feed</code> contains all the entries of your RSS feed (you&rsquo;re going to want to change the URL to something other than my blog URL, obviously). Then, we create a new list to store the first three entries, formatted as a two-line bullet point. The first line will have a link to the post and the title, and the second a description and publishing date. You can definitely play around with this, it&rsquo;s just plain markdown, and this is just how I decided to format my README.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py">farr <span style="color:#f92672">=</span> []
<span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;README.md&#34;</span>, <span style="color:#e6db74">&#34;r&#34;</span>, encoding<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;utf8&#39;</span>) <span style="color:#66d9ef">as</span> x:
    <span style="color:#66d9ef">for</span> line <span style="color:#f92672">in</span> x:
        <span style="color:#66d9ef">if</span> line<span style="color:#f92672">.</span>strip() <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;&lt;!--bp--&gt;&#34;</span>:
            <span style="color:#66d9ef">break</span>
        farr<span style="color:#f92672">.</span>append(line)
</code></pre></div><p>We then open the README file and read each line into an array if it isn&rsquo;t this specific HTML comment. At this point, you might want to go back to your README and add the <code>&lt;!--bp--&gt;</code> comment at the end. (If you want it somewhere in the middle, you&rsquo;re going to have to modify the code by adding a new array and reading into that array after the comment is encountered, probably by setting a boolean value somewhere.)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-py" data-lang="py"><span style="color:#66d9ef">with</span> open(<span style="color:#e6db74">&#34;README.md&#34;</span>, <span style="color:#e6db74">&#34;w&#34;</span>, encoding<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;utf8&#39;</span>) <span style="color:#66d9ef">as</span> x:
    x<span style="color:#f92672">.</span>writelines(farr)
    x<span style="color:#f92672">.</span>write(<span style="color:#e6db74">&#34;&lt;!--bp--&gt;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>)
    li <span style="color:#f92672">=</span> [x<span style="color:#f92672">.</span>write(i <span style="color:#f92672">+</span> <span style="color:#e6db74">&#34;</span><span style="color:#ae81ff">\n</span><span style="color:#e6db74">&#34;</span>) <span style="color:#66d9ef">for</span> i <span style="color:#f92672">in</span> latest]
</code></pre></div><p>And finally, we open the README, this time in write mode, and write all the lines back. Then, we rewrite our comment line, and then our <code>latest</code> list, which will be the list of formatted blog posts. (Again, if you want your widget somewhere in the middle of your README, you&rsquo;re going to have to write the new array you created after the blog post lines.)</p>
<p>The full script can be found <a href="https://github.com/kewbish/kewbish/blob/master/get_post.py">on my GitHub</a>.</p>
<p>You&rsquo;re also going to want to create a <code>requirements.txt</code> file with <code>feedparser</code> in it, so go ahead and do that.</p>
<h2 id="creating-a-github-action">Creating a GitHub Action</h2>
<blockquote>
<p>Note: <a href="https://simonwillison.net/2020/Jul/10/self-updating-profile-readme/">SimonW&rsquo;s blog post</a> was super helpful in figuring this out - much of my code was created after looking through theirs!</p>
</blockquote>
<p>Now that we have our script and requirements, let&rsquo;s make our Action. There&rsquo;s a little Actions button on the main page of your repository, so click that and create a new workflow. Choose the &lsquo;by yourself&rsquo; option, which will spit out a long YAML file. We&rsquo;re going to rewrite the file, so go ahead and delete it.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#f92672">name</span>: <span style="color:#ae81ff">Add newest YK</span>

<span style="color:#f92672">on</span>:
  <span style="color:#f92672">workflow_dispatch</span>:
  <span style="color:#f92672">schedule</span>:
    - <span style="color:#f92672">cron</span>: <span style="color:#e6db74">&#39;0 */6 * * *&#39;</span>
</code></pre></div><p>First, we start with our Action name. Pretty self explanatory, call it whatever you want. Next, we have our <code>on</code> triggers. These define when our Action will run. <code>workflow_dispatch</code> lets me trigger one manually, and <code>schedule</code> uses familiar cron syntax. (In case you&rsquo;re wondering, this runs the Action every 6 hours. I highly recommend <a href="https://crontab.guru/">crontab.guru</a> for figuring this out. GitHub does have a built-in tooltip though, so that can be helpful.)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml"><span style="color:#f92672">jobs</span>:
  <span style="color:#f92672">build</span>:
    <span style="color:#f92672">runs-on</span>: <span style="color:#ae81ff">ubuntu-latest</span>
    <span style="color:#f92672">steps</span>:
    - <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Check out repo</span>
      <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/checkout@v2</span>
</code></pre></div><p>Every Action also has a set of jobs that you can run on it. The <code>build</code> and <code>runs-on</code> line are pretty standard, just defining your Action to be run on the latest version of Ubuntu. Then, we have a set of steps, which are each individual tasks that can then run commands for us. Our first step will be checking out the repo. This is also pretty standard, as we just use one of GitHub&rsquo;s premade Actions.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml">- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Set up Python</span>
    <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/setup-python@v2</span>
    <span style="color:#f92672">with</span>:
    <span style="color:#f92672">python-version</span>: <span style="color:#ae81ff">3.8</span>
- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">pip caches</span>
    <span style="color:#f92672">uses</span>: <span style="color:#ae81ff">actions/cache@v2</span>
    <span style="color:#f92672">with</span>:
    <span style="color:#f92672">path</span>: <span style="color:#ae81ff">~/.cache/pip</span>
    <span style="color:#f92672">key</span>: <span style="color:#ae81ff">${{ runner.os }}-pip-${{ hashFiles(&#39;**/requirements.txt&#39;) }}</span>
    <span style="color:#f92672">restore-keys</span>: |<span style="color:#e6db74">
</span><span style="color:#e6db74">        </span>        <span style="color:#ae81ff">${{ runner.os }}-pip-</span>
</code></pre></div><p>This part sets up Python, using another premade Action, and sets the default Python version. Next, we set up the pip cache so we won&rsquo;t have to download the dependencies each time. More information about this part can be found <a href="https://docs.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions">on the GitHub site</a>.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml">- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Install Python dependencies</span>
    <span style="color:#f92672">run</span>: |<span style="color:#e6db74">
</span><span style="color:#e6db74">    </span>    <span style="color:#ae81ff">python -m pip install -r requirements.txt</span>
</code></pre></div><p>Here, we run one command to install the requirements from the <code>requirements.txt</code> file - here, just feedparser.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml">- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Update README</span>
    <span style="color:#f92672">env</span>:
        <span style="color:#f92672">GITHUB_TOKEN</span>: <span style="color:#ae81ff">${{ secrets.GITHUB_TOKEN }}</span>
    <span style="color:#f92672">run</span>: |-<span style="color:#e6db74">
</span><span style="color:#e6db74">    python get_post.py
</span><span style="color:#e6db74">    cat README.md</span>    
</code></pre></div><p>With this, we get the GitHub secret that auto-generated when using GitHub Actions, and then run the script we created earlier. Then, we <code>cat</code> this to README.md. Now, in our Action, our README will have updated (or not - more on that with the next block.)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-yml" data-lang="yml">- <span style="color:#f92672">name</span>: <span style="color:#ae81ff">Commit and push if changed</span>
    <span style="color:#f92672">run</span>: |-<span style="color:#e6db74">
</span><span style="color:#e6db74">        git diff
</span><span style="color:#e6db74">        git config --global user.email &#34;yourskewbot@notarealdomain.com&#34;
</span><span style="color:#e6db74">        git config --global user.name &#34;YoursKewbot&#34;
</span><span style="color:#e6db74">        git add -A
</span><span style="color:#e6db74">        git commit -m &#34;Update blog posts&#34; || exit 0
</span><span style="color:#e6db74">        git push</span>        
</code></pre></div><p>We <code>diff</code> the two files. If they&rsquo;ve changed, then we set a configuration for our committer bot. Here, I&rsquo;ve just set it to some random information - this is what&rsquo;ll end up in Git history and in GitHub&rsquo;s contribution bar at the top of your repo. Then, as we normally do when committing code, we add all the files, commit them, and push them back to the repository. At this point, our README will have changed live.</p>
<p>See the full Action <a href="https://github.com/kewbish/kewbish/blob/master/.github/workflows/rss.yml">on my GitHub</a>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Now, every 6 hours, our Action will run and update our profile README. Hopefully, this was a good introduction to GitHub Actions, and now, you have a shiny new updating README! This was a really fun learning experience for me as well - now, I can be part of the cool GitHub Actions-powered README squad!</p>
<p>I&rsquo;m still working through the Web track for CS50 - finished Finance in a weekend, and am planning on doing the Webpage bit this weekend if I can find the time. Finance, I figure, requires less brainpower and bikeshedding, so I&rsquo;ll be procrastinating and fiddling with Webpage a bit later. Been also working a little on <a href="https://diveintoht.ml">diveintoht.ml</a> by implementing Vue Router and some code splitting bits. Learning!</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>I think that&rsquo;s what the cool design kids call it anyhow. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>CS50: Weeks 6 / 7</title>
      <link>https://kewbi.sh/blog/posts/200726/</link>
      <pubDate>26 Jul 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/200726/</guid>
      <description>On Python and selects, inserts, and wheres.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Finally, we&rsquo;re getting into the more &lsquo;application&rsquo; side on things - also known as the part where I&rsquo;m more comfortable with. With my <a href="https://kewbish.github.io/blog/posts/200621/">initial predictions</a>, I&rsquo;d predicted that Week 6 (where we are now) was where it&rsquo;d get slightly easier. And I was right - Week 6 was a welcome week, an introduction to Python. I&rsquo;m already somewhat decent at Python, so this week wasn&rsquo;t such a struggle, and Week 7 was a great mix of new tech / familiar tech.</p>
<p>I was actually pretty surprised how &lsquo;natural&rsquo; C already felt, and I caught myself trying to <code>printf(&quot;&quot;)</code> instead of <code>print(&quot;&quot;)</code>. I guess I haven&rsquo;t been writing as much Python in the past few weeks - mainly focusing on C and some Javascript side things. Hopefully, this&rsquo;ll change - I have plans for some CLI projects that I might pursue after the final project.</p>
<p>I was also pleasantly surprised how intuitive SQL was to write - nearly like plain English<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. SQL was one of those &lsquo;I&rsquo;ll learn it later eventually&rsquo; things that I used to keep putting off, but I&rsquo;m happy I finally took the time to learn it. For database-y things in my projects that have required a backend, I&rsquo;ve mostly used Firebase (and Mongo once, but that didn&rsquo;t pan out very well), so <em>relational</em> databases were a refreshing new experience.</p>
<h2 id="week-6">Week 6</h2>
<p><strong>Notes:</strong>
To be honest, 90% of the lecture was the basics of Python, which I&rsquo;d already known, so have some Python regex notes instead!</p>
<ul>
<li>denote a raw string with r''
<ul>
<li>raw means that special characters, like <code>\n</code> are entered as a slash and a n</li>
<li>also can use formatted string inside it with rf''</li>
</ul>
</li>
<li><code>.</code> denotes any character</li>
<li><code>.*</code> denotes 0 or more characters</li>
<li><code>.+</code> denotes 1 or more characters or matches</li>
<li><code>?</code> denotes optionality</li>
<li><code>^</code> denotes a start</li>
<li><code>$</code> denotes the end of input</li>
<li>to use regex, usually have to import <code>re</code>
<ul>
<li>comes with a couple useful functions</li>
<li><code>.search</code> takes two+ arguments
<ul>
<li>pattern, searching string, and options</li>
</ul>
</li>
</ul>
</li>
<li>to search for <code>y</code> or <code>yes</code>, you could do something like &lsquo;^y(es)?$&rsquo;
<ul>
<li>^ denotes the start of the string</li>
<li>immediately after, there should be a y</li>
<li>the brackets with the ? denotes the optional &lsquo;es&rsquo;</li>
<li>then, the string should end</li>
</ul>
</li>
<li>to search for <code>n</code> or <code>no</code>:
<ul>
<li>similar - &lsquo;^n(o)?$&rsquo;</li>
</ul>
</li>
<li>re.IGNORECASE ignores the case of the input</li>
<li>used this in the DNA problem set
<ul>
<li>used .findall, which returns all matches for a particular STR</li>
</ul>
</li>
</ul>
<p><strong>Problems:</strong>
Finally being able to write implementations of the C problems in Python (which is what I was mentally doing the problems in anyhow) was extremely refreshing. I could actually use <em>list comprehensions</em> and not the clunky 3+ line for loop syntax, and my ternary expressions actually worked! (Probably due to the fact I misordered something or other in C, but anyhow, I greatly prefer Python.) Python&rsquo;s just a lot more concise and as someone once put it, it reads like pseudocode. That makes it a lot easier to translate my brainwaves into proper, functioning programs, unlike C, where I generally had to wrestle with pointers and such.</p>
<p>As a comparison, here are some of the line counts of the problems in problem set 6.</p>
<ul>
<li>Hello: in C, 10 loc. In Python, 2 loc.</li>
<li>Mario Less: in C, 24 loc. In Python, 12 loc.</li>
<li>Mario More: in C, 29 loc. In Python, 15 loc.</li>
<li>Cash: in C, 21 loc. In Python, 15 loc.</li>
<li>Credit: in C, 65 loc. In Python, 21 loc.</li>
<li>Readability: in C, 41 loc. In Python, 15 loc.
There&rsquo;s no correlation between lines of code and personal opinion, of course, but I personally prefer Python for its multipurpose and no-boilerplate existence, among other things.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></li>
</ul>
<h2 id="week-7">Week 7</h2>
<p><strong>Notes:</strong></p>
<ul>
<li>SQLite3 is the management system, SQL is the language standard
<ul>
<li>basically a system to query and select cells from Google Sheets or similar</li>
<li>like more complicated CSV</li>
</ul>
</li>
<li>use <code>.schema</code> to access the schema, or layout of the database</li>
<li>use <code>.import [file] [name]</code> to import a CSV or similar file
<ul>
<li>need to set <code>.mode csv</code> first</li>
</ul>
</li>
<li>once inside the database
<ul>
<li>run SQL queries, usually involving <code>select</code></li>
</ul>
</li>
<li><code>*</code> is a wildcard -&gt; select all
<ul>
<li><code>%</code> -&gt; some characters</li>
<li>usually used with <code>like</code></li>
</ul>
</li>
<li>to select a count, use the <code>count()</code> function</li>
<li>to group, use <code>group by x</code>
<ul>
<li>also can order by x</li>
</ul>
</li>
<li>orders can be ascending or descending</li>
<li>to limit the number of results, use <code>limit x</code></li>
<li>SQL queries can span multiple lines
<ul>
<li>written in all caps by convention, but lowercase works too</li>
<li>ends with a ;</li>
</ul>
</li>
<li>All database operations fall under create, read, update, or delete
<ul>
<li>in SQL, insert, select, update, delete</li>
</ul>
</li>
<li>To initialize a table, need to use a create statement
<ul>
<li>has x number of columns</li>
<li>each column has a specific data type</li>
</ul>
</li>
<li>These types can be:
<ul>
<li>blob -&gt; binary files</li>
<li>integer -&gt; several types</li>
<li>numeric</li>
<li>real -&gt; real numbers</li>
<li>text</li>
<li>can also specify not null, to make sure it exists</li>
</ul>
</li>
<li><code>where</code> matches a specific condition
<ul>
<li>can use and and or in conditions</li>
<li><code>like</code> matches substrings of text</li>
</ul>
</li>
<li><code>join</code> joins a second table to the first
<ul>
<li>use an <code>on</code> bit to compare two pieces of data</li>
<li>ex. stars.movie_id = movies.id</li>
</ul>
</li>
<li>while using the CS50 library, use &lsquo;SQL&rsquo;
<ul>
<li>initialize a connection with <code>db = SQL('path')</code></li>
<li>run commands with <code>db.execute('x')</code></li>
<li>use wildcards with ? marks, specify in option arguments</li>
</ul>
</li>
<li>multiple types of keys
<ul>
<li>primary -&gt; primary identifier</li>
<li>foreign key -&gt; another row in another table</li>
<li>unique -&gt; unique value in table</li>
<li>index -&gt; creates an index structure to make queries quicker</li>
</ul>
</li>
<li>race conditions, where timing matters
<ul>
<li>solve with transaction types</li>
</ul>
</li>
<li>SQL injection attacks
<ul>
<li>when special characters are put in and not escaped</li>
</ul>
</li>
</ul>
<p>The two problems were pretty intuitive to solve, and only minor Googling was needed. Definitely around as challenging as the Python bit.</p>
<h2 id="conclusion">Conclusion</h2>
<p>We&rsquo;re almost done with the main chunk of CS50. I&rsquo;m pretty surprised how fast these first 7 weeks went by - only the track (which I&rsquo;m greatly looking forward to) and the final project (which I have a good idea for) to go! These&rsquo;ll probably take a while to complete as well, but I&rsquo;m committed to writing a blog post a week describing my experiences.</p>
<p>Speaking of tracks, I&rsquo;m planning on doing the Web track. I have experience with web technologies already, so this seemed like a logical choice. In past posts, people have commented that the Web track was a little outdated, so we&rsquo;ll see about that. I&rsquo;m excited to get more acquainted with Flask, as well. Like SQL, getting more experience with Python in the web has been a &lsquo;one of those days&rsquo; things, and hopefully, this will be a good reintroduction.<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> If I have time, I&rsquo;m planning on working through parts of CS50 Web Programming as well - though I might skip the React bit, or take time to learn more Vue in place of it.</p>
<p>Haven&rsquo;t been working on much in terms of side projects recently, which is unfortunate, but I have too much to do. Scree - if only we had more time. We all wish, hmm?</p>


<!--okay aadi have a birthday acknowledgement :tada:-->

<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Which also, in a way, is technically true. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>At this point, I realized that this post was still really short, and I still had time in the week to work on SQL, so I guess here&rsquo;s another combination post! <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>I wrote exactly one Flask app in the past. Was a little confusing. Also the only time I tried Mongo, but then again, this was only a couple months ago. <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>CS50: Week 5</title>
      <link>https://kewbi.sh/blog/posts/200719/</link>
      <pubDate>19 Jul 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/200719/</guid>
      <description>On my final encounters with C.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Finally, we&rsquo;re over the worst of CS50 (in my opinion, at least). Week 5 was a bit of a difficult lesson and problem set, but in the end, it <em>actually</em> wasn&rsquo;t as hard as I thought it&rsquo;d be.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> Week 5 covers data structures - detailing hash tables, linked lists, and tries, which are a combination of both! Speller was a decent challenge, and for once, I really felt that I was applying what I learned in lecture to the problem. This is the week I was looking the most forward to (my original purpose for taking CS50 was for data structures and algorithms after all), and dreading as well.</p>
<h2 id="notes">Notes</h2>
<p>Alright, here are my notes:</p>
<ul>
<li>you can&rsquo;t reassign something if it doesn&rsquo;t exist yet
<ul>
<li>remember to initialize to a chunk of memory</li>
</ul>
</li>
<li>also, you should remember malloc&rsquo;s effects if you reassign, and free if you reassign a malloc</li>
<li>arrays are difficult to resize, because they&rsquo;re initialized to a certain amount of memory
<ul>
<li>could move a copy of the array to a larger, free area</li>
<li>then can delete old copy</li>
</ul>
</li>
<li>we could also use realloc
<ul>
<li>as its name implies, it reallocates memory</li>
<li>give it the pointer of the old array</li>
<li>will return address of new array</li>
<li>remember to free variable</li>
</ul>
</li>
<li>data structures are custom structures to store information
<ul>
<li>made with structs</li>
<li>builds off included data types</li>
</ul>
</li>
<li>linked lists
<ul>
<li>basically an array, but each element points to the next one</li>
<li>elements are not together in memory</li>
<li>each element includes a pointer to the next</li>
</ul>
</li>
<li>can&rsquo;t access the middle of the list with just <input checked="" disabled="" type="checkbox"> notation
<ul>
<li>there isn&rsquo;t a &lsquo;middle&rsquo;</li>
<li>need to navigate through the entire list first</li>
</ul>
</li>
<li>also takes twice as much memory per element
<ul>
<li>needs to store the next pointer</li>
</ul>
</li>
<li>usually constructed of a struct
<ul>
<li>one part to store the actual data, and the same struct pointing to the next struct</li>
<li>initialize first to NULL, so you can assign</li>
</ul>
</li>
<li>introduce a new notation, -&gt; notation
<ul>
<li>similar to dot notation of a pointer</li>
<li><code>node-&gt;next = x;</code></li>
</ul>
</li>
<li>need to use a while loop to iterate through the properties
<ul>
<li>check if not NULL</li>
<li>set the variable</li>
</ul>
</li>
<li>if you want to add to the beginning
<ul>
<li>set a pointer to point to the beginning</li>
<li>then set the list to the last pointer</li>
<li>inserts a node at the beginning</li>
</ul>
</li>
<li>to insert in the middle
<ul>
<li>do something similar</li>
<li>need to create a temporary variable for the swap</li>
</ul>
</li>
<li>linked lists are O(n) time, need to follow each node pointer to find the next</li>
<li>also introduces a tree
<ul>
<li>each node points to two nodes, like the famous binary search tree</li>
<li>makes binary search very easy, only compare two nodes</li>
<li>makes insertion easy as well, only rearrange a small subset</li>
<li>search is O(log n)</li>
</ul>
</li>
<li>need to balance these though, or else may become reweighted
<ul>
<li>also memory-expensive, but can search faster</li>
</ul>
</li>
<li>hashtable combines arrays and linked lists
<ul>
<li>each element in the array is a linked list</li>
<li>can add elements quickly, and the initial searching time is decreased</li>
<li>however, they might all end up in the same element, in which case the time efficiency is negated</li>
<li>get as close as possible to O(1) when the number of elements equals the possible values</li>
</ul>
</li>
<li>retrieval tree provides O(1) searching, but at cost of space
<ul>
<li>stores each level of element (here, letters) in a separate array</li>
<li>in this example, 26x as much memory</li>
</ul>
</li>
<li>more data structures
<ul>
<li>stacks -&gt; last in, first out, like email inbox</li>
<li>queue -&gt; first in, first out, like line in a store</li>
<li>dictionary -&gt; map keys to values, like Python!</li>
</ul>
</li>
<li>these data structures can be implemented with arrays, linked lists, hashtables, and other structures</li>
</ul>
<h2 id="problem-set">Problem Set</h2>
<p>This week wasn&rsquo;t much of a problem <em>set</em> - we only had Speller to work through. But don&rsquo;t underestimate it either - it took two consecutive days of work to finish out. The logic wasn&rsquo;t too hard to implement, actually. 
First, I split up the problem in its subparts</p>
<ul>
<li><code>hash</code> -&gt; I decided to use the simplest hash function - just the first character. Could this be optimized? Yes, but I just wanted to try the data structure out first, and not have to worry about copying a hash function that I didn&rsquo;t completely understand either.</li>
<li><code>load</code> -&gt; Made an array, and I&rsquo;d put each word into its appropriate element. I just appended the current word to the end of the linked list, and lowercased it as well.</li>
<li><code>size</code> -&gt; In load, I&rsquo;d created a line to increment a global variable, which made size just a <code>return count;</code> statement.</li>
<li><code>check</code> -&gt; I hashed the current word to compare, and then used a while loop to iterate over the linked list and checked if it matched the current targeted word.</li>
<li><code>unload</code> -&gt; I iterated over each element in the array, and again iterated over the linked list to free each pointer in the list.</li>
</ul>
<p>The first time I wrote the program, it worked as intended, so check. But, upon check50-ing, I got a bunch of valgrind errors. I had forgotten to free a bunch of malloc&rsquo;ed variables, and to fix this, I tried to use a character array instead. Also, I finally learned to use valgrind properly - I&rsquo;d kind of ignored it in the past week, given that there wasn&rsquo;t a check for a memory leak, just a reminder that it could exist. I also realized that my unload function was logically incorrect, and would always return true right away. After fixing this, I attempted to test it - but now, it didn&rsquo;t produce the intended output. Oops.</p>
<p>I stripped out the entire program, and rewrote it from scratch, including what I&rsquo;d learned about valgrind and memory allocation in the first runthrough. (Now that I think about it, I did have some confusion about <code>&gt;</code> vs <code>&gt;&gt;</code> in bash. They overwrite a file while redirecting output and append to a file while redirecting, respectively. I probably mixed <code>&gt;</code> up with <code>&gt;&gt;</code>, and that&rsquo;s actually probably why it didn&rsquo;t work as intended, meaning the logic was solid initially, meaning I rewrote it from scratch for essentially nothing. Big facepalm.)</p>
<p>Now, I was memory leak free, and working with the correct output. Nice! In the process of scrolling dozens of Stack Overflow pages, I really learned to appreciate the full power of valgrind. It&rsquo;s a great resource for checking memory leaks, and despite its rather scary, confusing interface, it&rsquo;s an essential tool, really. I never had to keep memory management in mind while Pythoning, but C made me more cognizant of the lower-level management that goes into the easy-to-learn Python flow.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Am I going to continue with C? I doubt it, unless I&rsquo;m just making a toy thing, or <em>really</em> want performance for something. Would I have ignored C if I were to take some version of CS50 where I didn&rsquo;t need CS50? Probably not. I&rsquo;ve learned a lot about lower level things, like memory management and bytes, as well as getting a glimpse into how easy-to-use features in Python were really implemented. As other people have said, working with C makes one really appreciate how nice higher level languages like Python are to work with, and it was a great experience.</p>
<p>That said, I still can&rsquo;t wait to get into the later half of CS50 - Python, SQL, and web? Yes, thank you very much. I guess this would be the more <em>application</em> side of CS50, and I&rsquo;m excited to get learning.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>The CS50 Reddit and my initial lack of experience with data structures were pretty scary. But I&rsquo;d rate this problem set lower than Tideman in difficulty, honestly. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>CS50: Weeks 3 / 4</title>
      <link>https://kewbi.sh/blog/posts/200712/</link>
      <pubDate>12 Jul 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/200712/</guid>
      <description>On my attempts at the infamous Tideman.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>I severely underestimated how long these posts took to write, and I miscalculated my schedule a little in trying to keep up with my classmates, so here we are with a <em>second</em> post this week. Truly becoming an <em>online content creator</em>, with a <em>release schedule</em>. This post&rsquo;ll go through weeks 3 and 4 of CS50, and include my notes and comments for both, because I couldn&rsquo;t be bothered to write up two separate posts. I&rsquo;ll go back to one a (CS50)week when we hit Week 5.</p>
<p>Week 3 goes through several common sorting algorithms and Big-O notation, and week 4 goes through memory and files. Both problem sets are slightly unrelated, but that&rsquo;s fine - I learned a ton this week as well. We&rsquo;re in the thick of it now - weeks 3 - 5 are apparently the most difficult in CS50<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<h2 id="week-3">Week 3</h2>
<p>Let&rsquo;s start with the usual notes:</p>
<ul>
<li>there are many types of search and sort
<ul>
<li>some are more efficient than others</li>
</ul>
</li>
<li>for example, linear and binary search
<ul>
<li>linear goes through all the elements</li>
<li>binary effectively cuts the number of comparisons in half</li>
</ul>
</li>
<li>linear search
<ul>
<li>go through all elements one by one</li>
<li>if it matches target, congrats!</li>
</ul>
</li>
<li>binary search
<ul>
<li>choose a midpoint</li>
<li>if midpoint is the target, return index</li>
<li>otherwise, search the left and right halves, depending on the target and the current midpoint</li>
</ul>
</li>
<li>these two have different O times
<ul>
<li>simple mathematical expressions to return the worst case</li>
</ul>
</li>
<li>there are also lots of ways to do sorting
<ul>
<li>insertion, bubble, and merge are among a few</li>
<li>actually, I coded a bunch of these <a href="https://github.com/kewbish/ka-algorithms">already on GitHub</a></li>
</ul>
</li>
<li>merge sort introduces us to recursion
<ul>
<li>a function calling itself with some arguments</li>
<li>make sure there&rsquo;s a base case set, or else it&rsquo;ll infinitely run</li>
<li>in merge sort, we check for the size of the array to check</li>
<li>more efficient than selection sort, O-wise</li>
</ul>
</li>
<li>C also allows us to declare custom structs
<ul>
<li>a form of class / object is how I understand it</li>
<li>used a lot in problem sets to simplify</li>
</ul>
</li>
</ul>
<p>Personally, I found the lecture pretty unrelated to the problem set, which was all about voting. This was one week where I kind of regretted my idea to do both less/more comfortable versions of a problem - Runoff and Tideman were both super difficult. This was also the first week we got &lsquo;distribution code&rsquo;, or a template that takes care of most of the functions for us.</p>
<p>One thing that was a significant obstacle was the various structs and variables, and how we got the distribution code. I didn&rsquo;t spend much time poring over the given code, and as a result, it was a little difficult to remember the types and purposes of each variable. I kept having to refer to the Walkthrough video to remember what each function was supposed to do. Runoff was clearer in this case, providing actual hints. I guess Tideman was supposed to be more difficult, but it would have been nice to have more hints along the way.</p>
<p>Tideman also involves a decent amount of graph theory, or at least knowledge of recursion. Nowhere in the lecture was the graph theory really covered, so I had to do a lot of figuring and drawing algorithms out on my own. :sigh: It was helpful to draw dummy tables out and go through the algorithm step by step, at least.</p>
<h2 id="week-4">Week 4</h2>
<p>Here are my notes:</p>
<ul>
<li>we learn about a new counting system of hexadecimal
<ul>
<li>what&rsquo;s used in colour codes</li>
</ul>
</li>
<li>
<ul>
<li>denote hexadecimal with <code>0x</code></li>
</ul>
</li>
<li>what even is the point of pointers?
<ul>
<li>given a variable stored somewhere in memory, it has a <em>pointer</em></li>
<li>pointers give us the address of a variable</li>
<li>denoted with *</li>
</ul>
</li>
<li>the actual address can be found with &amp;
<ul>
<li>represented in hexadecimal as well</li>
<li>&amp;var gets the address</li>
</ul>
</li>
<li>combine with *&amp;var, which goes to the address and gets the value there</li>
<li>points at first character -&gt; strings
<ul>
<li>CS50 library had abstracted this away, but now we have to use <em>pointers</em></li>
<li><code>char * s</code></li>
<li>can also access individual characters, which map to the pointer + x</li>
</ul>
</li>
<li>week 4 also teaches us how to allocate memory
<ul>
<li><code>malloc</code> -&gt; allocates a space in memory</li>
<li>need to define a size that it needs to be allocated</li>
<li>can&rsquo;t be changed</li>
</ul>
</li>
<li>to copy a string, we can use <code>strcpy</code> or malloc and copy it with a loop
<ul>
<li>remember to copy the <code>\0</code> byte as well, or else things will crash</li>
<li>doesn&rsquo;t know where the string ends</li>
</ul>
</li>
<li>after we allocate memory, we need to remember to free it
<ul>
<li>use the <code>free</code> function to free memory</li>
</ul>
</li>
<li>if we don&rsquo;t, we&rsquo;re going to end up with a memory leak
<ul>
<li>use valgrind to check for possible leaks</li>
</ul>
</li>
<li>computer memory is split into several sections
<ul>
<li>one is the code itself</li>
<li>another is the global variables</li>
<li>the heap is empty, where free memory gets pulled in</li>
<li>the stack is used by functions that are currently being called</li>
</ul>
</li>
<li>once a function is returned
<ul>
<li>is freed from the stack</li>
<li>any arguments get lost</li>
</ul>
</li>
<li>this is also where pointers and addresses come into play
<ul>
<li>by passing addresses into pointer arguments, you can actually change the variable itself</li>
</ul>
</li>
<li>overflows (like the website)
<ul>
<li>when there isn&rsquo;t enough memory in the heap to satisfy malloc, we get a heap overflow</li>
<li>too many functions loaded? stack overflow!</li>
<li>called buffer overflows -&gt; might crash system, extremely fun</li>
</ul>
</li>
<li>can assign a variable just to NULL
<ul>
<li>doesn&rsquo;t point to anything</li>
</ul>
</li>
<li>with pointers, we can start to manipulate files
<ul>
<li><code>fopen</code> opens a file with a character pointer (string), and a mode
<ul>
<li>like Python</li>
</ul>
</li>
<li><code>fwrite</code> and <code>fread</code>, well, write and read</li>
<li>fread is interesting, it takes the variable, block size, number of blocks to read, and finally the filepath</li>
<li>remember to close all files with <code>fclose</code></li>
</ul>
</li>
</ul>
<p>This week&rsquo;s problem set was a lot less painful. I guess it&rsquo;s just because week 3 was more focused on algorithms and abstract programs, whereas this week was more hands-on and practical. The distribution code this week was also less related to what we actually had to implement, so was much easier to just skim through.</p>
<p>Having experience with Python&rsquo;s file operations definitely helped a lot, and made the entire file open/read/close flow easier to understand. I think the most annoying part of this week was definitely just learning that fwrite != fprintf (one is bytes and the other is strings). Besides that, the photo filtering and recover algorithms were really well explained in the problem brief, and didn&rsquo;t require too much mental gymnastics to figure out.</p>
<p>(Also, brief note that Filter Less and Filter More are basically the same program. More just replaces Sepia with Edges, but Edges builds off Blur, anyhow. Again, <em>do both parts of the problem, I promise it&rsquo;s fun!</em>)</p>
<p>In general, I think that I prefer practical projects rather than more abstract problems, which also explains my difficulties with algorithms. Well, I guess that was why I took this course - more <del>pain</del> algorithms!</p>
<h2 id="conclusion">Conclusion</h2>
<p>In my predictions, I&rsquo;d thought that weeks three through five were going to be the most painful, and I guess now that I&rsquo;m here I kind of agree. Week 4 was tolerable, but Week 3 was absolute torture, and I&rsquo;m not looking forward to Week 5 either. (On the bright side, Week 6 means the glory of Python once again.)</p>
<p>I&rsquo;ve been working on a little Vue and Firebase thing, trying to properly understand how authentication and Vue Router work. It&rsquo;s actually been a lot less painless than I thought, despite my initial reservations with <a href="https://diveintoht.ml">diveintoht.ml</a>. I might make DIH my final project, actually. I&rsquo;d like to move to a different markdown parser, add Vue Router, adjust authentication, and fix some performance issues. I&rsquo;m looking forward to it actually - not having to come up with a project idea and just doing some maintenance can be pretty fun. Alright, I&rsquo;d better get back to calculus now-</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>According to <a href="http://reddit.com/r/cs50">r/cs50</a>, which is a highly reliable source. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>CS50: Week 2</title>
      <link>https://kewbi.sh/blog/posts/200709/</link>
      <pubDate>09 Jul 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/200709/</guid>
      <description>On my cryptographic attempts in C.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>And now, our <em>third</em> week of CS50<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> This week, we went over arrays, but also spent a lot of time on CLI / terminal things, and debugging tools used by CS50. I&rsquo;m starting to get more familiar with the CS50 system, and how I can do problem sets and debug on my <em>local</em> system, instead of <em>the cloud IDE</em>. (Again, remember how I hate it?) This was our introduction to proper command line arguments, and how to use function arguments in <code>main</code> too.</p>
<h2 id="notes">Notes</h2>
<p>Some of this references the video and the problem set, so you might want to check out the <a href="https://cs50.harvard.edu/x/2020/notes/2/">notes here</a>.</p>
<ul>
<li>The lecture itself spends a bunch of time going through CLI information
<ul>
<li>check50, debug50, style50 - the whole CS50 family</li>
<li>set up check50 and style50 on my local system already through pip, easy install</li>
<li>oh, and help50 exists, don&rsquo;t think I&rsquo;ve ever used it. Stack Overflow is more useful, I find.</li>
</ul>
</li>
<li>How does C work?
<ul>
<li>first, preprocessed to pull in headers</li>
<li>compiled to assembly code</li>
<li>then assembly to binary</li>
<li>linked to final executable file</li>
<li>all happens when you run clang or the processor</li>
</ul>
</li>
<li>data fits into types
<ul>
<li>each has a finite set amount of memory (except strings but shhh)</li>
<li>bool -&gt; 1 byte</li>
<li>char -&gt; 1</li>
<li>int or float -&gt; 4</li>
<li>double or long -&gt; 8</li>
<li>string -&gt; ?, because the number of chars in the string varies, and therefore can change the amount of memory assigned</li>
<li>each variable is labelled in memory with an address</li>
</ul>
</li>
<li>when you define with a const, its value never changes</li>
<li>string -&gt; represented as an array of characters
<ul>
<li>ends with a null term byte -&gt; <code>\0</code></li>
<li>escaped with the <code>\</code></li>
<li>this is why you use <code>&lt; strlen</code> instead of <code>&lt;= strlen</code>, so you don&rsquo;t catch the ending byte</li>
<li>string memory used is # of char * 1 byte + 1 byte for ntb</li>
</ul>
</li>
<li>ASCII chars can be subtracted and added from each other
<ul>
<li>their # code and their character equivalent can be used interchangeably</li>
<li>kind of unintuitive to subtract chars, I prefer numbers</li>
</ul>
</li>
<li>The <code>ctype.h</code> has useful functions
<ul>
<li>checks for alphabetic, digits, and all the other type things</li>
<li>equivalent of <code>typeof</code> in Python</li>
</ul>
</li>
<li>Use <code>*argv</code> when using <code>strlen</code> to make the actual &lsquo;string&rsquo; array
<ul>
<li>Otherwise, can&rsquo;t use strlen, and other things</li>
</ul>
</li>
<li>For encryption psets, I prefer using # codes
<ul>
<li>unfamiliar but more intuitive to do distance-from and mod-math</li>
<li>most of the psets involve finding a distance, adding a key in some way, and looping back at times</li>
<li>to loop back from an alphabet, use modmath!</li>
<li>try to use pseudocode values in subtraction equation</li>
</ul>
</li>
<li>Return codes exist, why they have <code>int main</code>
<ul>
<li>returns either 0, 1, etc.</li>
<li>1 -&gt; indicate error</li>
<li>0 -&gt; everything&rsquo;s fine</li>
</ul>
</li>
<li>argc -&gt; make sure that the array count is greater than a certain amount
<ul>
<li>if you try to access something that doesn&rsquo;t exist in memory yet, it will throw a dreaded <em>Segmentation Fault</em></li>
</ul>
</li>
<li>generally, structure validation tests above the main function
<ul>
<li>otherwise, define the prototype function, and put it below the main function</li>
</ul>
</li>
</ul>
<h2 id="problem-sets">Problem Sets</h2>
<p>Last week, I mentioned how I prefer doing both of the &lsquo;more and less&rsquo; problems in the problem set for a week, noting that the &lsquo;more&rsquo; usually builds off the &lsquo;less&rsquo;. This week was a great example of that.</p>
<p>Readability doesn&rsquo;t really count, that was more an introduction to looping (? I didn&rsquo;t use an array at all so I&rsquo;m not sure what they&rsquo;re on about), but Caesar and Substitution were super fun. Caesar is, what you might think, a caesar cipher implementation. Substitution implements a simple substitution cipher. While working through Caesar, I found a bunch of information about character codes and validating command line arguments, as well as working with aforementioned character codes and CLI arguments. For example, I was super confused about a Segmentation Fault that was thrown while attempting Caesar because I&rsquo;d forgotten to check that the argument actually existed. As well, I learned that you could :gasp: subtract characters, instead of just using the character code. These two morsels of information were super helpful in solving Substitution. Both ciphers deal with some sort of &lsquo;distance from something else and then add key&rsquo; algorithm, and I found that figuring Caesar out let me speedrun through Substitution so much more quickly.</p>
<h2 id="setting-up-cs50-locally">Setting up CS50 locally</h2>
<p>I&rsquo;ve finally finished setting up CS50&rsquo;s development tools on my own system - since last week, I&rsquo;ve been trying to tweak a couple commands and things to make everything <em>just work</em>.</p>
<p>Here&rsquo;s a small checklist of things that I&rsquo;d recommend setting up, and some caveats.</p>
<ul>
<li>install CS50.h from <a href="https://cs50.readthedocs.io/libraries/cs50/c/">their site</a>. I wouldn&rsquo;t recommend trying to curl things, just install from source. It&rsquo;s easier, especially if you&rsquo;re on WSL.
<ul>
<li>No need to set up environment variables - more on that later in the bash bit.</li>
<li>if you don&rsquo;t want to bother adding it to your C source folder, you can just put it somewhere convenient to relative path, and use <code>#include &quot;../cs50.h&quot;</code>, for example</li>
</ul>
</li>
<li>set up check50 through pip
<ul>
<li>It&rsquo;s literally just <code>pip install check50</code>.</li>
</ul>
</li>
<li>do the same with submit50 and style50.
<ul>
<li>their installations are equally simple - <code>pip install submit50</code> and <code>pip install style50</code>.</li>
<li>As they remind, do this through WSL. Having to switch between WSL and non-WSL command prompts is annoying, even in VSCode.</li>
</ul>
</li>
<li>in the WSL <code>.bashrc</code>, add a function that has the following command:</li>
</ul>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">cs50make<span style="color:#f92672">()</span> <span style="color:#f92672">{</span> 
    <span style="color:#75715e"># command copied from running make in ide.cs50.io</span>
    <span style="color:#75715e"># replace the [whatever].c with &#34;$1&#34;.c, and same for the output</span>
<span style="color:#f92672">}</span> 
export -f cs50make
</code></pre></div><p>which will let you run <code>cs50make</code> in terminal and run the equivalent <code>make</code> command</p>
<p>See - it&rsquo;s not <em>that</em> hard. Even easier on Linux, probably. And now, you can CS50 in VSCode, and have beautiful syntax highlighting and snippets. <del>God, I hate that IDE.</del></p>
<h2 id="conclusion">Conclusion</h2>
<p>Apologized for the extremely strange blogging schedule - expect another post on Sunday as well. I&rsquo;d finished a couple of problem sets and weeks in one week, while my writing schedule was supposed to run at one post per week. I&rsquo;ve had to spend a bunch of time writing, so please appreciate me-</p>
<p>I&rsquo;ve been working on some random scripts - nothing on GitHub, just little automation things. Been doing a little maintenance on <a href="https://diveintoht.ml">diveintoht.ml</a> as well. Hopefully I&rsquo;ll start a bigger project soon, looking forward to the final project of CS50!</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Undoubtedly one of the more difficult weeks. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>CS50: Week 1</title>
      <link>https://kewbi.sh/blog/posts/200705/</link>
      <pubDate>04 Jul 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/200705/</guid>
      <description>On my further forays into C.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Well, it&rsquo;s been a week since I <a href="https://kewbish.github.io/blog/posts/200629">muddled my way through Scratch and the first week of CS50</a>, and I&rsquo;ve just about finished Week 1&rsquo;s problem set. This week, I was introduced to the scary world of <em>C</em>, and the basics of how to use it. As well, we went over how to translate common Scratch recipes to C, and some basic information regarding memory and imprecision, as well as some C examples.</p>
<p>This was where I actually started paying attention to things - while the first couple weeks seem pretty easy, I know they&rsquo;re going to become the most useful for laying a proper foundation for the more difficult weeks ahead. So, I sat through the hour and forty-six minutes, and delved into the world of C.</p>
<h2 id="notes">Notes</h2>
<p>Below are my notes<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> :</p>
<ul>
<li>So what - we&rsquo;ve established that C is extremely verbose compared to my beloved Python, but now what?
<ul>
<li>There are brackets everywhere</li>
<li>Don&rsquo;t forget semicolons</li>
<li>style50 demands this <em>terrible</em> bracket style where the bracket is on its own line<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup></li>
</ul>
</li>
<li>You initialize variables with a specific type
<ul>
<li>C is <em>statically-typed</em>, unlike Python</li>
<li>can&rsquo;t randomly change types midway through the program</li>
<li>causes a lot of &lsquo;filler&rsquo; variables to be made, as well as loops to convert between types, like ints to strings</li>
</ul>
</li>
<li>C doesn&rsquo;t have list comprehension, use for-loops</li>
<li>By the way, their for-loops are like &lsquo;normal&rsquo; for-loops
<ul>
<li>Completely different from Python for-loops</li>
<li>less intuitive for looping over objects, but easier for array elements</li>
</ul>
</li>
<li>Can&rsquo;t dynamically append to an array
<ul>
<li>need to make a counter of some type to find the length of things</li>
<li>alternatively, for strings, use <code>strlen()</code></li>
<li>arrays need to be initialized with a certain size, memory allocation things</li>
</ul>
</li>
<li>We input things with <code>get_string()</code>, which is part of the CS50 header library
<ul>
<li>lots of functionality and sanitization in the CS50 library</li>
</ul>
</li>
<li>And also, headers are included, not imported
<ul>
<li><code>#include something</code></li>
<li>if it&rsquo;s in &quot;&quot; quotes, it&rsquo;s a relative import</li>
<li>if in &lt;&gt; brackets, it&rsquo;s somewhere in the depths of the C library compiler</li>
</ul>
</li>
<li>Scratch did come in handy, liked the translation examples</li>
<li>String formatting is extremely weird
<ul>
<li>Need to specify the type, and use % formatting</li>
<li>remember what type the variable is before formatting it</li>
</ul>
</li>
<li>Imprecision is one of those things that I always forget
<ul>
<li>In cash, remember that float imprecision exists</li>
</ul>
</li>
<li>Make is pretty awesome, complete with commands and all those cool things
<ul>
<li>I&rsquo;m trying to set a custom <code>cs50make</code> command in my bashrc instead, but I can&rsquo;t seem to figure it out quite yet</li>
</ul>
</li>
<li>For problem sets - do your own research
<ul>
<li>I get starting blocks, but after, I&rsquo;m kind of on my own</li>
</ul>
</li>
</ul>
<h2 id="problem-sets">Problem Sets</h2>
<p>In PSET1, you have the option of doing Mario Less or More, and Cash or Credit, based on your experience and comfort with C and programming. I, personally, found the &lsquo;more challenging&rsquo; problems more fun to complete, and found that they taught me more of C&rsquo;s language features, like arrays (even tho we haven&rsquo;t even been introduced to those).</p>
<p>I would recommend doing both the less and more versions of the problem sets. Usually, (like Mario) the &lsquo;more&rsquo; problem sets build off the &lsquo;less&rsquo; sets, so they were more or less required to do anyhow. As well, you get more practise, and I find that practise extremely useful, especially when learning such a new language.</p>
<p>As I mentioned in my notes, I guess the differences between lecture and problem sets gets bridged by the shorts and notes, as well as a good amount of Stack Overflowing.</p>
<h2 id="cs50-ide">CS50 IDE</h2>
<p>I absolutely hate the IDE. Maybe it&rsquo;s just because I&rsquo;m used to Intellisense and whatever cool things that VSCode provides. One example? VSCode allows you to surround things in brackets and quickly use a bunch of keyboard shortcuts, whereas in the CS50 IDE, doing the same commands just delete and do nothing, respectively.</p>
<p>Setting CS50&rsquo;s CLIs and header files up on WSL were pretty simple, and they&rsquo;re useful for running check50 and other things up on my own. Also, can we talk about check50? <em>Why do they feel the need to UPLOAD to GitHub first?</em> It&rsquo;s extremely annoying to mess up my Git commit graphs. But anyhow - still trying to figure out my bash.</p>
<p>So anyway: VSCode, WSL, and Git for the win, CS50 IDE is bad. I like how they make getting started easy for less technically-focused people, and saves a lot of time regarding getting set up. Without it, I know it would have taken a lot longer for my cadre to get started. I really appreciate how it gets everyone up and started quickly.</p>
<h2 id="teaching-style--misc">Teaching Style + Misc.</h2>
<p>To be honest, I&rsquo;d kind of skipped over the shorts for Week 0, but for Week 1, they really came in handy. Going through those as well as rereading notes was probably how I managed to figure out a bunch of things regarding the problem sets.</p>
<p>They never mention it, but checking out some of the source behind the CS50 libraries and doing a couple Google searches was equally useful. Of course, this probably wouldn&rsquo;t help for people who don&rsquo;t know where to find it, but stalking various GitHub repos was a fun waste of time / help.</p>
<p>And finally, it&rsquo;s time to extol Malan again. Extremely clear, though there&rsquo;s a bit of fluff and relatively &lsquo;unuseful&rsquo; information. I wish they&rsquo;d split up the videos, wait no. They already do that. With chapters. And transcripts. And <em>snacks</em>. I love how CS50&rsquo;s staff take their time to make the online CS50x just as wholesome and inclusive as the IRL CS50, even taking the next step to build in a snack chooser in their viewer. (Which, by the way, has a bunch of amazing screenview / normal view, shortcuts, and tonnes of other features. I love it. Perhaps I&rsquo;ll go look at the source somewhere.)</p>
<h2 id="conclusion">Conclusion</h2>
<p>It&rsquo;ll be a fun couple weeks - it takes longer than I thought to properly write up notes, listen to lectures, do problem sets, and write the words you are reading right now. It&rsquo;s a little repetitive, so maybe I&rsquo;ll take a week to speedrun some problem sets, and then write a batch of blog posts at once. Anyway, I&rsquo;ll find a more efficient way to do things.</p>
<p>In terms of life, I&rsquo;ve been doing some maintenance on <a href="https://diveintoht.ml">diveintoht.ml</a>, adding a new HTML id&rsquo;s section and working on a forms section. I have tonnes of ideas for future content, but I&rsquo;m thinking that it might be a bit much for this introduction. They&rsquo;ll probably become other projects - maybe an ebook or another guide site. (I have ideas for <em>monetization</em>, but then again, no one will pay for my work :pensive:). We&rsquo;ll see what I have time to develop.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>See <a href="https://kewbish.github.io/blog/posts/200607/">this blog post about notetaking</a>. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p><em>Why</em> would you decide that wasting an entire line on a <em>bracket</em> is worth it? Then again, VSCode has decided that bracket-on-own-line is a valid formatting style, and style50 does point it out. I just don&rsquo;t like it. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>CS50: Week 0</title>
      <link>https://kewbi.sh/blog/posts/200629/</link>
      <pubDate>28 Jun 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/200629/</guid>
      <description>On my attempts at relearning Scratch.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>For the past couple days, I&rsquo;ve been attempting to relearn Scratch, and getting familiar with the CS50 development environment and submission routines. I really like David Malan&rsquo;s teaching style, and the following will be an attempt to categorize all my learnings this first week.</p>
<p>And by the way, I don&rsquo;t think there&rsquo;ll be notes this week. I&rsquo;m not planning on becoming a Scratch guru anytime soon, so I didn&rsquo;t really see the point of making notes. And besides, this was supposed to be an introduction for non-technical beginners, and I would consider myself a technical beginner(?), so I kind of disregarded it.</p>
<h2 id="scratch">Scratch</h2>
<p>I think the first time I used Scratch was sometime quite recently, actually. I didn&rsquo;t learn to program with Scratch, or anything, so it&rsquo;s hard to get nostalgic for something you&rsquo;ve never really cared about. However, when I came back, I realized that Scratch is <em>really user friendly</em>. And it should be, right? It&rsquo;s made for kids to learn how to program, but it can also get really advanced, really fast.</p>
<p>Take the first few example programs - little snippets explaining how to make a sprite say something, or change a costume. You&rsquo;d think just snippets thrown together would make for an easy game, but it does take more than just a ten-block script to make a proper game. My game is absolutely terrible - <a href="https://scratch.mit.edu/projects/405376909/">here&rsquo;s a link</a>, if you&rsquo;d care to find out. (Please don&rsquo;t check it out, it&rsquo;s just a terrible clone of Piano Tiles that usually breaks about 4 rounds in. But then again, it&rsquo;s also approximately the average of the quality of Scratch games, I guess. And I <em>did</em> make it all from <em>scratch</em>.<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>) But I like getting guided a little, and then figuring things out by myself. It&rsquo;s pretty fun!</p>
<p>You see my game, right? And then you see the absolute masterpieces that others have made. It&rsquo;s kind of crazy how good Scratch games can be, especially with custom blocks and all the functionality. It&rsquo;s probably a good competitor for Unity2D, at this point. I&rsquo;m only half-joking.</p>
<h2 id="what-i-learned">What I Learned</h2>
<p>I was pretty surprised that Scratch was so full-featured, and that I was able to get a project started so quickly. (To be honest, I kind of spedrun the problem set while listening to the lecture, so maybe that wasn&rsquo;t the best idea) Any bugs I found were really easy to look up on the forums, and whatever I wanted to implement, I found guides to on the interwebs.</p>
<p>Something kind of strange was that the lecture seemed to cover a bunch of slightly irrelevant information in the beginning. I wondered why we were covering RGB and binary, when I didn&rsquo;t find any use for it during the Scratch problem set, and even from what I&rsquo;ve seen, problem sets one and two. Kind of interesting, but I supposed they&rsquo;re considered the &lsquo;foundations of computer science&rsquo;.</p>
<p>While some of my esteemed classmates were a little confused with how the GitHub submission systems worked, I found the submission processes extremely fun! It was a little weird to have that one commit lingering around (I have a bit of a 4-commit-a-day streak going at the moment), and I&rsquo;m kind of confused as to why check50 uploads code first and <em>then</em> checks it, but I like it. It&rsquo;s easy to use, and focused on the command line.</p>
<p>I was also a little confused as to why we started just with Scratch - we&rsquo;re not going to use this information in the rest of the course really. I saw a couple &lsquo;translation&rsquo; images in the notes for problem set one, which I assume would be good for people to understand, but why would we start with Scratch to translate from? I thought we&rsquo;d start with Python, actually. Going from Python to C seems a little more intuitive, because Python would be a little easier to get started with, I suppose. Python&rsquo;s syntax is a little less verbose and strict, which would probably be easier to start with. I don&rsquo;t know - just my thoughts. (And also because I don&rsquo;t want to learn C scree)</p>
<h2 id="teaching-style">Teaching Style</h2>
<p>Malan&rsquo;s teaching style is incredibly fast-paced - and that&rsquo;s great! For now, at least, it&rsquo;s nice to be able to speedrun and cram information quickly. Now, I can still understand mostly how to make these programs (referencing week 1, at least). However, I&rsquo;ll see how it&rsquo;ll pan out in the future - will the speed be too much to handle?</p>
<p>As well, Malan&rsquo;s teaching is as clear as it is speedy. His examples (ripping a phone book - big dedication) really do stick in your brain. It&rsquo;s so memeable as well, mostly because of the very interesting examples. :binary_leds:</p>
<p>One of my favourite parts about CS50 is how the lectures are <em>mostly</em> transcribed into notes, and a text format. Text is easier for me to scan and learn from, and audio can be a little difficult to parse. The entire contents of the lecture is there, but I can read and understand it a lot faster. It&rsquo;s less tedious to just reread a couple paragraphs than rewinding video over and over again. I really appreciate whoever decided to do that - it&rsquo;s a lifesaver.</p>
<p>In addition, I love how all the example code is provided in ZIPs and studio links, and the uploaded slides as well. For once, I don&rsquo;t have to rely on video content! Now, if only Khan Academy transcribed each lecture into an article, without those disgusting timestamps&hellip;</p>
<h2 id="open-source-tools">Open Source Tools</h2>
<p>Both check50 and submit50, among a host of other CS50-related tools are available for offline or at least, local use, so of course, I downloaded them. Surprisingly, it was pretty painless. Big props to the CS50 team for completely open sourcing so many things - and making them multipurpose as well. It&rsquo;s easier for me to check my cases manually from the source of check50 sometimes, and I like digging around the source code.</p>
<p>check50&rsquo;s kind of reminded me that I really do need to test my code with actual unit tests, and I honestly might get started with check50 test cases for smaller scripts that I do. There&rsquo;s always pytest and unittest, but check50&rsquo;s input and output mocking seems a lot easier to get working.<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> That reminds me, I should really get into TDD sometime.</p>
<h2 id="conclusion">Conclusion</h2>
<p>It&rsquo;s been a great week - <a href="https://dev.to/devteam/announcing-the-grant-for-the-web-x-dev-hackathon-winners-1nl4">winning the GFTW hackathon</a> with a super tiny project, and getting tonnes of users for <a href="https://diveintoht.ml">diveintoht.ml</a>. Oh, and also CS50 Week 0. It&rsquo;s been great. I&rsquo;ll be working on diveintoht.ml a little more, adding some more content, and that&rsquo;ll be my summer project aside from CS50. It&rsquo;s weird without school and Zoom, but I guess I&rsquo;ll try to make the best of my summer time.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Pwn Intended. [sic] <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>Edit - my esteemed colleagues have reminded me that pytest and unittest both have input mocking. But then again, it&rsquo;s annoying to set up. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>CS50: Week -1</title>
      <link>https://kewbi.sh/blog/posts/200621/</link>
      <pubDate>21 Jun 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/200621/</guid>
      <description>On my summer learning plans.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>What&rsquo;s this <em>secret thing</em> you keep mentioning in your <a href="https://kewbish.github.io/blog/posts/200607/">blog posts</a>, you ask. Well&hellip; I&rsquo;m doing <a href="https://cs50.harvard.edu/x">CS50x</a>. Yes, the infamous course that every &lsquo;phul istack&rsquo; developer and their friends have done. I&rsquo;m not entirely sure why I decided that doing this course was a good idea, especially trying to speedrun it in 10 weeks instead of 12. But hey, I&rsquo;d like to get more acquainted with the mysterious things known as algorithms, and I found some esteemed classmates to speedrun with me.</p>
<h2 id="cs50">CS50</h2>
<p>CS50 is Harvard (and Yale)&rsquo;s introductory course in computer science. Over 12 weeks, it covers Scratch, C, Python, SQL, and four tracks of real-life development experience. Along the way, students pick up algorithms, data structures, and time complexity - among other programming concepts. It&rsquo;s famous for being a great starter for non-programmers, and a rite of passage, almost, for other devs.</p>
<p>I definitely need to brush up on my nearly nonexistent knowledge of algorithms, and I&rsquo;ve tried to start with <a href="https://github.com/kewbish/ka-algorithms">some Khan Academy research</a>. As well, I&rsquo;d like to investigate C, even if I&rsquo;m only going to use it for this course. I&rsquo;ve heard it&rsquo;ll help build an appreciation for how high-level languages work, and even by just skimming some of the notes and starter videos, I can tell I&rsquo;ll be wishing for the sweet syntactic sugar that Python provides. I&rsquo;m also excited to learn more advanced data structures, and algorithms - and I can see the problem sets are going to be a <em>fun time</em>. Most of all, I&rsquo;m looking forward to the SQL and web part of the course, which is the track I plan on taking. I&rsquo;ve heard so much about these technologies through dev Reddits and posts, and I&rsquo;d like to see what all this RDBMS hype is all about.</p>
<p>At the end of the course, it all culminates in the <em>final project</em>. Through dev media, I&rsquo;ve found many amazing projects, and it&rsquo;s only now occurred to me that CS50 was a <em>course</em>, not some qualification or technology. The things you learn. I plan to use this final project to build my first proper full stack webapp, or at least, focus on reworking one of my older ones.</p>
<h2 id="my-expectations">My Expectations</h2>
<p>I&rsquo;ve skimmed through the problem sets and a couple paragraphs of the notes for now, and I have a couple of predictions for the course trajectory. First off, I can tell that Week 0 will be tedious torture, having to relearn Scratch, but I think it&rsquo;ll be relatively easy to debug. Weeks 1 - 3 seem doable with my current skillset and a couple of scrolls through StackOverflow, but I&rsquo;m sure they&rsquo;ll still teach me how to use better programming patterns. Weeks 4 - 5 seem like the most difficult, and this corresponds to what I&rsquo;ve read through Reddit and testimonials. The Speller problem set seems especially scary - though I&rsquo;m sure I&rsquo;ll <em>eventually</em> figure it out. Right? Week 6 is when I can finally go back to the beauty of Python, and I expect after implementing algorithms in C, I&rsquo;ll be able to macgyver a solution. Weeks 7 - end will be mostly new knowledge, but I think that my experience with HTML, CSS, and half-witted Flask attempts will come in handy.</p>
<p>I already have a cadre of classmates that I&rsquo;ll be working alongside for this journey, but I expect the past posts and resources people have created will be extremely useful. I&rsquo;ll have to be careful not to try to speedrun too much at a time, and try to sit and absorb the material properly. The data structures that I&rsquo;ve seen seem extremely useful in my pr0gramming career.</p>
<h2 id="what-else-ill-be-doing">What Else I&rsquo;ll be Doing</h2>
<p>Because it&rsquo;s almost the last year of speedrun before I enter the big bad world of <em>university</em><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, I&rsquo;m probably also going to start revising for other topics before I start school. Speedrunning was hard enough before COVID, but with COVID, the amount of class time is greatly reduced, and now we&rsquo;ll be speedrunning more than ever before. Throughout the summer, I&rsquo;ll also be revising for:</p>
<ul>
<li>Calculus, with an old book that we&rsquo;ll be using</li>
<li>Physics, with the help of a well-meaning VSB teacher that unknowingly released a bunch of helpful provincial exams on his Weebly site</li>
<li>And of course, summer homework, of which I happen to have a decent amount of. This will be fun.</li>
</ul>
<h2 id="my-workflow">My Workflow</h2>
<p>I might write a separate post about this<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, but I&rsquo;ve essentially started trying to utilize Trello and other &lsquo;productivity tools&rsquo; more often, because my scatterbrained self cannot figure out how to keep a journal and development workflow together. I have an overview board, with a proper KanBan workflow, as well as some other notes. I&rsquo;m also experimenting with Zapier and IFTTT to create scheduled cards for recurring events, like my scheduled work sessions for each topic.</p>
<p>Speaking of work sessions, that&rsquo;s also another part of how I work.<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> It&rsquo;s kind of like pomodoro, but with longer breaks. As everyone says - we need less screen time. Hopefully I&rsquo;ll be able to reduce the amount of break while maintaining my eye health, but y&rsquo;know, if not, that&rsquo;s fine too. I&rsquo;m trying to find ways to work offscreen, such as <em>writing by hand</em> (what a concept), but that&rsquo;s a little difficult when all my materials are onscreen and online. Oops.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Consider this CS50 Week -1. I&rsquo;ll be posting every week with recap thoughts and my review notes, but not my code. I don&rsquo;t think that&rsquo;s legal, at least. I suppose this will be using the Feynman technique, and anyhow, you guys can read through my lack of understanding and be amused! That&rsquo;s something, at least.</p>
<h2 id="currently">Currently</h2>
<p>How did I go from 30 to 200 users on <a href="https://diveintoht.ml">diveintoht.ml</a> in <em>one day</em>. Jesus. Dev.to really helped me here - my post got 2500 views, and a bunch of people showed so much support. Apparently, a couple teachers are looking into sharing it with their classes, and people are actually <em>using it now</em>. I managed to make a much bigger impact than I expected, and I guess that&rsquo;s good! Unfortunately, now I have to actually put time and effort into maintaining, which is a good thing too, I suppose. I have a lot of ideas for content and expanding that I might add to the site, so keep checking back for updates. This will be my project for the summer along with CS50 - can&rsquo;t wait to obsess over statistics!</p>
<p>Last minute edit - It&rsquo;s 350 now, why are y&rsquo;all actually considering this a good resource. Ahh, the pressure-</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Assuming I get accepted and graduate first. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>I&rsquo;ve been thinking a lot about productivity lately - I&rsquo;ve been watching tonnes of <a href="https://www.youtube.com/channel/UCoOae5nYA7VqaXzerajD0lg">Ali Abdaal</a> and <a href="https://www.youtube.com/channel/UCG-KntY7aVnIGXYEBQvmBAQ">Thomas Frank</a>. Mostly because I&rsquo;ve been having one of those I better not mess this up moments. :existential_crisis: <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>This is probably TMI. Whatever. <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>Reinstalling Windows</title>
      <link>https://kewbi.sh/blog/posts/200614/</link>
      <pubDate>14 Jun 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/200614/</guid>
      <description>On my experience fixing my blankscreen errors.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>A couple weeks ago, my computer went through one of its <em>phases</em> again. Once every year or so, my computer decides to brick up, constantly freeze, and whenever I try to access Chrome to debug my problems, it&rsquo;d decide to display the dreaded <em>waiting for cache error</em>. Usually, a simple Windows <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> restore while keeping my files works fine, but this time, it didn&rsquo;t.</p>
<p>For the past few months, as everyone knows, COVID-19 has forced schools online, so I&rsquo;ve been attending classes over Zoom every day. Zoom <a href="https://dev.to/rhymes/a-semi-technical-explainer-of-all-known-zoom-issues-1bab">has its own security issues</a>, but it was the software with the lowest barrier to use, so I guess my program decided to use it. My internet had always been a little sketchy, so I&rsquo;d occasionally lag out of class. However, for a month leading up to <em>the big crash</em>, I&rsquo;d been having a couple recurring errors.</p>
<p>First, my entire video feed would freeze, along with the Zoom window. However, I&rsquo;d be able to hear the audio still, and would remain &lsquo;inside the meeting&rsquo;. It was awkward to stay silent when I couldn&rsquo;t unmute and answer a question, and apparently, my own video and audio feeds weren&rsquo;t working.</p>
<p>Second, my Zoom would go silent, and my video feeds would all freeze. I would still be able to access applications other than Zoom for a couple seconds, but my entire computer soon froze, and I&rsquo;d need to do a manual shutdown.</p>
<p>Third, Zoom would decide to freeze all other applications (maybe it was using too much CPU or RAM) and I&rsquo;d be unable to access anything else. I&rsquo;d also be unable to use any of the Zoom UI, and have to rely on keyboard shortcuts to unmute. Chat was unusable during this time as well. However, my own video and audio remained visible and audible to everyone else.</p>
<p>I have no clue why these issues happened, but I have an inkling as to why, knowing what other problems my computer was having.</p>
<p>Consider this blog post an attempt at a tutorial, and also an amusing story for you to laugh at.</p>
<h2 id="confusion-and-backups">Confusion and Backups</h2>
<p>I initially thought these issues had something to do with my internet range, so I moved closer to the modem. There was no change, really.</p>
<p>Now, I was wholly confused, and somehow (<em>thank heaven I saw this coming</em>) decided it was a good idea to make backsup of my files. Now, stupidly, I didn&rsquo;t use the Windows Backup tool, which would be a more efficient way of making a backup, I&rsquo;m sure. Instead, I was manually copy-pasting 7z archives of my most important files, like homework and development work. This backup was made a week or so before the actual crash, so it was unfortunately a little out of date. Very annoying.</p>
<p>In the future, I think I&rsquo;ll continue to make properly regular backups with either the Windows Backup tool or <a href="httpss://bacula.org">Bacula</a>, another tool I&rsquo;ve been investigating. Backups are something I&rsquo;ve personally neglected often over my development journey, and that&rsquo;s something that I have to change in the future.</p>
<h2 id="the-big-crash">The Big Crash</h2>
<p>Let&rsquo;s get into the story. Let me paint the scene, as my friends say. Imagine you&rsquo;re just going about your average Friday - attending classes on Zoom, doing some homework. It&rsquo;s maybe 1200, and you&rsquo;ve just finished your first class. For some reason, your laptop&rsquo;s decided to die, and it&rsquo;s decided to have to go into a &lsquo;Preparing System Repair&rsquo; loop. You take out your phone and listen into class with that instead. While juggling a sorry attempt at fried rice (online soup day was an experience and a half), you try to F11 BIOS reset. But that&rsquo;s not working - apparently your BIOS can&rsquo;t be found?</p>
<p>Panicking, you frantically Google whatever solutions, and for some reason, you&rsquo;re able to get past the System Repair loop, and Windows is booting properly again. You can attend your second class, which goes relatively smoothly, tech-wise. You do your homework for the day, and because of the frequent issues, you decide to investigate how to fix the issues with Zoom. (At this point, there&rsquo;s still no Chrome issues, and the disk is still fine.) A couple hours of coding and inevitable bugfixing later, you go offline for the day - but what&rsquo;s this? A Windows Update? Usually, those are known to cause errors, and you <em>really</em> can&rsquo;t afford to lose more time wasting away on sketchy tech support sites.</p>
<p>But on the flip side, maybe this is one of those <em>good</em> updates. An update that will fix the issues you&rsquo;ve been having. Maybe even update your drivers and <em>download more RAM</em> so that Zoom can slurp up more of it. Fine, you think, and click the <code>Update and restart</code> button. You turn off the lights, and let it do its thing for the rest of the night.</p>
<h2 id="so-that-was-a-lie">So that was a lie.</h2>
<p>You wake up in the morning, and you&rsquo;re able to do about half an hour&rsquo;s worth of work. Check a couple emails - oh wait, Chrome&rsquo;s frozen now. Alright, you think, this has happened so many times before. Time to force shutdown. There isn&rsquo;t anything major wrong yet.</p>
<p>Oh wait, that&rsquo;s right - every time you shut down now, you <em>have</em> to enter some sort of <code>Preparing Automatic Repair</code> loop. That&rsquo;s fine - it usually takes maybe a couple minutes to run. But this time - no. It doesn&rsquo;t. You start and stop the loop, and eventually, give up in favour of eating lunch. Hopefully, by the time you&rsquo;re back, it&rsquo;ll be alright? Spoiler alert - it wasn&rsquo;t.</p>
<p>After fiddling with a couple BIOS things and running a hard drive check (which passed - remember this for later) somehow (?) the entire system decided to boot fine. At this point, I was too grateful to make a proper backup, and was just finishing up some homework. Naively, I thought everything&rsquo;d be fine afterward. Well, that&rsquo;s, what, the <em>third</em> time I&rsquo;ve been wrong, just in this section?</p>
<h2 id="reset-and-restore">Reset and Restore</h2>
<p>Generally, when issues happen after Windows Updates, I just run a System Restore, and everything works pretty well. I try to avoid doing this however, because it involves re-installing tonnes of my apps again, and it&rsquo;s super annoying each time. The last time I&rsquo;d had to run a System Restore was a year and a bit ago, and reinstalling all my apps, programming languages, command line tools, and reconfiguring my custom settings. But at this point, I was getting pretty desperate.</p>
<p>I restarted my computer for the umpteenth time, and after a bit more fiddling, I got into the Windows F11 menu. I know my way around this menu, so it was just a matter of clicking to the <code>Restore</code> option. It was pretty painless, but at this point, would anything be painless? I was happy that I&rsquo;d managed to figure everything out quite nicely, and proceeded to ignore my laptop to browse Reddit for a while.</p>
<p>Once I&rsquo;d finished dinner, I came back upstairs, and what do you know? The restore&rsquo;s finished. I didn&rsquo;t get a success screen nor the usual &lsquo;Welcome to Windows&rsquo;, and instead, got back to the previous restore window. (Y&rsquo;know, the blue one.) I figure it&rsquo;s alright - it <em>has</em> to have finished to have brought me back here, yeah? Well, I restart my machine as I usually do, and <em><strong>bam</strong></em>. A black screen blankly declaring that <code>there was no operating system detected</code>. And this wasn&rsquo;t even the ugly HP BIOS interface, nor the colourful F9 menu. This was bad. At this point, I figure it&rsquo;s just some issue with HP detecting Windows, especially with the error of having some weird BIOS issues earlier. I restart. And this is where it <em>really</em> gets bad.</p>
<h2 id="black-screens">Black Screens</h2>
<p>Whenever I booted, it would just be a black screen. No <code>Preparing Automatic Repair</code>, no HP logo, no spinning circles, no nothing. Just a black screen. You ask - are you sure your monitor&rsquo;s just not dead? I know it&rsquo;s not dead - it&rsquo;s lit up. <em>What is this?</em> Time to spend ages Googling again, this time with the help of <code>A</code>, a tech guy that my parents know. They direct me to the HP support website, but it&rsquo;s for Windows 7/8/XP, so I find the equivalent for Windows 10. Apparently, my BIOS needs refreshing. Alright, I use my parents' laptop to download it to an external USB.</p>
<p>I enter the F9 boot menu, and try to boot into it. Fine, that works alright. Now, I try to boot back from my main drive - oh, oops. Looks like there&rsquo;s no hard drive detected. This is fun. And the lights for the hard drive aren&rsquo;t even turning on. Probably should have noticed that earlier, but those LEDs are so smol-</p>
<p>Now, remember how I&rsquo;d run the hard disk check? I thought the success meant that everything was alright on my drive, and it was another problem. Hmm - looks like <em>that</em> was a big lie. At this point, it&rsquo;s maybe 2000, and I&rsquo;m panicking. <code>A</code> tells me I should go find another hard drive and download Windows from that. I&rsquo;d read about this before in the countless manual pages I&rsquo;d crawled, and at this point, I was resigned to losing all my data.</p>
<h2 id="covid-19-closures">COVID-19 Closures</h2>
<p>So here I was, in the middle of a global pandemic, where I can&rsquo;t take my laptop to any fixer-upper shops or even stop by Best Buy for some spare parts. Everything was still closed. I don&rsquo;t just have hard drives laying around, and I had school in <em>two days</em>. Not enough time to get a new laptop, or even start researching one.</p>
<p>Thank the Lord for <em>Memory Express</em>, and in part, BC&rsquo;s relatively good ways of dealing with the pandemic. Memory Express - a popularish though dated computer parts store - was still open for curbside pickup. I spend some time cracking open my laptop<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> and finally find my hard drive. I try to figure out how to measure it, and then realize that only 2.5&quot; HDDs are used in laptops. (I promise, I&rsquo;m very intelligient and know lots about computers.) While we&rsquo;re ordering (the exact same model of HDD - in hindsight, it would have been a good time to switch to a SSD), I might as well pick up an additional RAM stick, so hopefully I&rsquo;ll be back tomorrow with a shiny new 1TB HDD and 16GB of RAM instead of 8.</p>
<p>It&rsquo;s around 2300 - way past my bedtime - and I&rsquo;m halfway insane. I do love having my computer break down in the middle of a pandemic when I probably should be doing work hhhhh! (Side note: thank heavens it was Victoria Day as well. Without that, I would have had <em>no</em> time to do my homework.)</p>
<h2 id="time-off">Time Off</h2>
<p>The next morning, I can&rsquo;t really do anything with technology, which was a nice break. I spend some time scrolling Reddit, but mostly read and research the steps I&rsquo;ll need to take once the parts arrive.</p>
<h2 id="my-own-cpen-club">My Own CPEN Club</h2>
<p>Alright. It&rsquo;s 1300, I should be leading the Pythoners at Coding Club, but the world has decided I&rsquo;m not worthy. The parts are back from Memory Express, I&rsquo;ve watched too many <em>tech YouTubers</em> reinstall Windows, and I&rsquo;m itching to get Watson<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> back up and running. I have homework to speedrun, after all.</p>
<p>Slotting the HDD in isn&rsquo;t very difficult - a couple screws. Look for the holder, and loosen the one screw (at least on HP chasses) that&rsquo;s holding the holder in. Then, you can slide the HDD out, and replace it with a fresh one. Make sure you keep track of your screws, by the way. If you forget even one screw, I don&rsquo;t think your laptop will manage to hold itself together (unless you use <em>Flex Glue</em>, but maybe not the best idea). RAM is similarly easy to install, just slotting it in. Fun fact, there&rsquo;s a little slot that helps you align it. The things you learn as you scrutinize small traces on a tiny green card that has the power to speed up your laptop.</p>
<p>Alright, installation time. I grab my media installation key, and it&rsquo;s gaming week. Excited, I F9 into the boot menu (the <em>only</em> screen, by the way, that I can still access, besides F11), and boot into the Windows USB. All is well for once. A couple skims later, I finally get into the installation menu. But one last obstacle - there&rsquo;s no hard drive detected. At this point, I&rsquo;m not even surprised.</p>
<p>After consulting <code>A</code> briefly and reattempting to install the HDD, I realize I haven&rsquo;t clicked it in properly, and the HDD is at a weird angle. I fix it, and once I boot back into the USB - all is <em>finally</em> well. I&rsquo;m serious this time - nothing else glitched. It took some time to reinstall my old programs and unarchive and copy over all my files, but that&rsquo;s probably the end of the difficult, big-brain bit. The only thing I had to do now?<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> Redo my homework. Oops.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I&rsquo;m really lucky that I had a long weekend, Memory Express, and a bunch of technical resources on my side. Without those, Watson would definitely be dead. Right now, the extra RAM is a welcome boost, and everything&rsquo;s going well. Backups are being made, and Zoom hasn&rsquo;t crashed once. I suspect it has something to do with corrupted hard disks. Apparently HPs have this issue - but that&rsquo;s alright.</p>
<p>Through this process, I learned a lot about BIOS and what buttons to mash in an attempt to restore my laptop. It wasn&rsquo;t too bad, in hindsight. Now, I have a shiny, 2k word-long post to constantly remind me that my hard disk is bad!</p>
<p>Also, this post turned out- <em>interesting</em>. It&rsquo;s quite long, so congrats if you even make it here. It jumps between second and first person a bunch, and hey, it&rsquo;s more meme material. Fun!</p>
<p>No Currently section today - just been working on Khan Academy. If you&rsquo;re interested, the repo of my spaghetti implementations is <a href="https://github.com/kewbish/ka-algorithms">available on GitHub</a>. Hopefully I&rsquo;ll be back with proper projects soon!</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Yes. I use Windows, I think everyone knows by now. Probably will be switching to Linux later in the summer, but no need to <code>Archbtw</code> me. I&rsquo;ve heard it already. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>Why did HP think it was a good idea to hide screws under the gummy feet? Or make the keyboard extra-difficult to remove from the chassis? Now, I have dents in the edging from my attempts to crack open the case. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>I think I neglected to mention this, but my laptop is also sometimes referred to as Watson. I was very quirky when I decided to name my laptop, alright? <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4" role="doc-endnote">
<p>Besides stopping Windows from spying on me a little too much. <a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>Conversational Notetaking</title>
      <link>https://kewbi.sh/blog/posts/200607/</link>
      <pubDate>07 Jun 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/200607/</guid>
      <description>On my Zettelkasten derivative system.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>I&rsquo;ve started seeing a whole trend around <a href="https://zettelkasten.de/">Zettelkasten</a> with a lot of developers online, especially those who are into <a href="https://plaintextproject.online/">plaintext notetaking</a>. I was interested in how I&rsquo;d tweak the system, so I decided to try it out for a while. (It&rsquo;s been like 2mo, nothing extreme).</p>
<p>Going to school online has allowed me to begin porting a lot of my normally physical notes to a digital platform, especially as I predict my senior (damn, I&rsquo;m really about to become a senior in a couple months) year will be mostly online as well. I&rsquo;m also planning on doing a lot of online learning over the summer (and during the school year as well), and I&rsquo;d rather not have to jump between primarily paper / physical notes and primarily online notes for different subjects.</p>
<p>(I know they say it&rsquo;s better to write it out by hand to remember, but I have a <em>quirky</em> way of doing things that works for me, and that&rsquo;s my choice. Y&rsquo;all best not try to <em>scronch</em> me. And in the end, I <em>do</em> write my hand some of the time before I transcribe to digital, so I really don&rsquo;t know why I wrote this.)</p>
<p>As well, I&rsquo;m planning to perhaps move to Manjaro soon, so I couldn&rsquo;t stay with my dear friend Microsoft Onenote. So, <em>plaintext productivity</em> it is.</p>
<p>As a small aside, whenever I refer to notes in this article, I also am referring to some classwork and essays. I have a weird way of doing things, I know.</p>
<h2 id="migrating-from-onenote">Migrating from OneNote</h2>
<p>My first step in this journey was to migrate all my previous notes and schoolwork from OneNote. Previously, all my schoolwork, blog posts, and development notes were collated into one large binder. This way, I wouldn&rsquo;t have to fumble around with different binders, especially when inevitably, one piece of writing or work would fall between two or more categories.</p>
<p>First, I began by creating a OneDrive (yes, I&rsquo;m still going to use OneDrive simply because I don&rsquo;t want to deal with setting up DropBox or whatever right now) folder. Then, for each section in my binder, I&rsquo;d create a folder.</p>
<p>This was the hard part: copying all my information over. For each page in each section, I&rsquo;d <code>touch</code> a new file with the same name. (As another aside, my naming convention is usually &lsquo;[topic] - [subtopic / class]&rsquo;. For things like blog posts, I use a &lsquo;yymmdd&rsquo; convention.) OneNote has the capabilities to embed rich text and formatting and things like that, which I lost during the process. I know there&rsquo;s a couple of hacky ways to preserve formatting with pandoc and Azure conversions, but the way I did it was simply with good ol' Ctrl-C, Ctrl-V.</p>
<p>Yes, for each of my 100ish files, I manually copy pasted everything in. When I&rsquo;d looked at navigating the OneNote API, I honestly didn&rsquo;t want to go through the file conversions and spend ages writing an automation script. <a href="https://imgs.xkcd.com/comics/is_it_worth_the_time.png">Relevant XKCD</a>.</p>
<p>One other thing I did was to set up my files so they&rsquo;d display in order of creation date. This let me have my files in roughly the same order as before in OneNote.</p>
<h2 id="zettelkasten-and-its-problems">Zettelkasten and its Problems</h2>
<p>If you&rsquo;re still unsure what Zettelkasten is, I&rsquo;d recommend you look at the &lsquo;official&rsquo; <a href="https://zettelkasten.de">Zettelkasten</a> site. Lots of good beginner resources there, and they explain it a lot better than I can.</p>
<p>The basics: Zettelkasten is a knowledge system of smol, interconnected notes.</p>
<p>Right off the bat, I knew I wouldn&rsquo;t exactly like the &lsquo;small&rsquo; bit about the notes. Originally, these notes were stored in a slipbox, and I get how it&rsquo;s easier to have just one idea on one side of the card. However, my personal workflow is more file-focused, with longer, more in-depth explorations rather than small little chunks of information.</p>
<p>As well, I didn&rsquo;t like the idea of having to interlink all my information. Logically, it seems to make sense to link files, just to make sure that you don&rsquo;t forget a great resource you created earlier. However, I don&rsquo;t have that many files yet, and I have a very clear organization, where every topic is in its own file. I won&rsquo;t get the full benefits of having these interconnections, so I abandoned them in my own system.</p>
<h2 id="my-system">My System</h2>
<p>How my system works is a bit different, and in hindsight, completely unlike the Zettelkasten system. It&rsquo;s more an offshoot derivation<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>My workflow looks something like:</p>
<ul>
<li>Learn something</li>
<li>Categorize whatever I&rsquo;ve just learned into a broad topic and then create a subtopic file</li>
<li>Begin writing notes. More about this soon.</li>
<li>If necessary (i.e. is an assignment essay) then convert to .docx with <a href="https://pandoc.org">Pandoc</a></li>
<li>Archive it and make sure that everything&rsquo;s uploaded to OneDrive</li>
<li>Sometimes, I&rsquo;ll come back to review. If I <em>do</em> review, I usually go through a list of topics and try to rewrite my notes completely from memory.</li>
</ul>
<p>I suppose each of my files is a collection of Zettels, or a Zettelkasten in and of itself. Each of my smaller notes would represent a Zettel, especially in the Principle of Atomicity (minus the ID part. I <em>will</em> sometimes link within a document, but don&rsquo;t give them explicit IDs. Markdown FTW!)</p>
<p>I&rsquo;m also currently using a dual-write system, where I write things down on paper first (despite what I said in intro, I still <em>do</em> write by hand), and then converting to Markdown (manually). I&rsquo;ve found that I&rsquo;ve been writing my notes in Markdown as well (like, physically handwriting hashtags and using Markdown syntax with physical notes) I personally find the Markdown syntax very productive, even while using pen-and-paper for notetaking. Especially because I transcribe my notes again to digital format, that cements knowledge and information even better.</p>
<p>I also have this interesting notetaking format with each Zettel where I begin each topic with a full sentence. I call it &lsquo;conversational notetaking&rsquo;, especially because I try to use humour and take notes as if I&rsquo;m teaching or having a conversation. For example, I&rsquo;ll have a sentence along the lines of &lsquo;I&rsquo;m not sure how I feel about Zettels.&rsquo;, followed by some bullet points about what exactly I dislike or what I&rsquo;m unsure about. I find this system productive, especially during review. Humour is the best way to remember things! [citation needed] I end up having to explain a lot of things to myself with my current learning system with self-learning, so making studying fun is essential for self-motivation.</p>
<h2 id="vim-and-pandoc">Vim and Pandoc</h2>
<p>I&rsquo;m sure absolutely no one particularly cares about what tools I use, but in case you do: a mixture of Vim, VSCode, and Pandoc.</p>
<p>I use Vim for lightweight editing, and am exploring it for normal plaintext editing. Eventually, when I become more familiar with it, I&rsquo;ll see if I want to use it for programming as well. I switched to Vim because of its low battery / CPU / RAM usage, compared to OneNote and VSCode. It&rsquo;s also distraction free, and I was also interested in the hype behind Vim. So far, I&rsquo;m familiar with several of the basic commands, and I really enjoy the workflow. It&rsquo;s almost like magic.</p>
<p>However, I still need to do a fair bit of customization to get it ready for normal use. I might want to set up a code navigation plugin (or get more familiar with how it works natively), and understand how the :Explore commands properly work instead of Googling it each time. As well, I&rsquo;d like to see how to set up an integrated terminal (or adapt my workflow) like VSCode uses.</p>
<p>VSCode is what I use for other heavier editing. When navigation is important (when I&rsquo;m jumping in between several places very frequently, for example) or when I&rsquo;m just not feeling like trying to deal with Vim, I generally use VSCode. However, it&rsquo;s a little heavy for just plaintext editing, especially with my terrible battery life. I&rsquo;m trying to adapt to only using VSCode for proper programming.</p>
<p>Pandoc is my tool of choice to convert .md (in which I format all my notes at the moment) to .docx, if required. My teachers generally request work in Word format<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> and it&rsquo;s a bit annoying to have to convert between formats right now. I&rsquo;ve had to set up a custom reference docx (thank heaven Pandoc makes this available) with my preferred formatting, which greatly reduces the amount of customization time right now. I plan on using this quite frequently, especially when I move to Linux. Need to spend a little more time investigating other functionalities and use cases to which I can apply Pandoc.</p>
<h2 id="conclusion">Conclusion</h2>
<p>For the last bit, I&rsquo;ve been exploring various notetaking and productivity workflows, and I think my system of conversational notetaking works quite well for my use cases. I don&rsquo;t claim that it&rsquo;ll work for everyone, nor work for anyone besides me. It&rsquo;s what works for me, and that&rsquo;s all that matters.</p>
<h2 id="currently">Currently</h2>
<p>I&rsquo;ve been writing the backend of my <a href="https://github.com/kewbish/opus">Opus</a> rewrite, but for the last while I&rsquo;ve been feeling a little burnt out regarding development. I plan on doing a lot of development learning over the summer, so I might rest up and take a short break between now and then. I might have overspent my creativity for the last bit - I&rsquo;ve made nearly exactly 4 commits a day on projects for the last couple months. During this break, I might want to take some time to explore algorithms via <a href="https://www.khanacademy.org/computing/computer-science/algorithms">Khan Academy</a>. It doesn&rsquo;t require much creativity, just learning and using my notetaking system. Besides, I think I&rsquo;ll need it for what I&rsquo;m doing over the summer.</p>
<p>Another thing I&rsquo;d like to do is continue writing blog posts, which requires slightly less creativity<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup> or mental thinking. I&rsquo;ve been enjoying it so far, so we&rsquo;ll see what comes up in the future!</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>A Zettelkewbish, perhaps. <em>badumchh 🥁</em> <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>Which is another reason why I&rsquo;m contemplating remaining solely on Windows. I don&rsquo;t see how efficient it is to write and do work in Manjaro, or Linux in general, and have to boot into Windows each time I&rsquo;d like to reformat a file and check that it&rsquo;s done it properly. I could use Word Online, but it lacks many of the features that native Word uses. And again, I <em>could</em> use LibreOffice, but I&rsquo;m not familiar with it yet. We&rsquo;ll see what I invest time into using. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>It probably doesn&rsquo;t, but I feel more motivated to write right now rather than to code and I really don&rsquo;t know why. <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>The GFTW Hackathon</title>
      <link>https://kewbi.sh/blog/posts/200531/</link>
      <pubDate>30 May 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/200531/</guid>
      <description>On my attempts at contributing to capitalism.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>For the last bit, I&rsquo;ve been working on a #gftwhackathon (Grant for the Web) submission. I&rsquo;ve documented my progress in two <a href="https://dev.to">Dev.to</a> posts, which I&rsquo;ll put below. This post format will be a little different, but here we go:</p>
<h2 id="but-wait-what-is-web-monetization">But wait&hellip; what is Web Monetization?</h2>
<p><a href="https://webmonetization.org">Web Monetization</a> is a proposed browser API (proposed, mind you. It&rsquo;s not an actual thing. Yet.) that supports creators through the use of micropayments. Basically, with a browser extension (right now, only available through <a href="https://coil.com">Coil.com</a>, but sure to change soon), consumers can stream micropayments to content creators. Right now, it supports YouTube and Twitch natively, and web developers can simply include a <code>&lt;meta&gt;</code> tag in their head.</p>
<p>If you&rsquo;re interested in knowing more: check out the <a href="https://webmonetization.org">Web Monetization website</a>.</p>
<p>But what&rsquo;s this <em>#gftwhackathon</em> thing I keep blathering on about?<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup></p>
<p>The <a href="https://dev.to/devteam/announcing-the-grant-for-the-web-hackathon-on-dev-3kd1">GFTW Hackathon</a> is an initiative partnership between Dev and the GFTW team (which is then made up of Mozilla, Coil, and Creative Commons). They&rsquo;re looking for ideas and proposals for their larger grant (but I&rsquo;m too smol oops-).</p>
<p>I participated in this hackathon <del>because I&rsquo;d get some merch and exposure</del> because I&rsquo;d like to get more involved in the Dev.to community! As well, learning is always cool. Also - web components!</p>
<h2 id="read-the-full-devto-articles">Read the full Dev.to articles</h2>
<p><a href="https://dev.to/kewbish/halfway-through-gftw-200i">Original article available here</a>, <a href="https://dev.to/kewbish/revshare-js-a-revshare-web-component-5hdh">and my project submission here.</a></p>
<h2 id="the-journey">The Journey</h2>
<p>I went through a bunch of ideas - a Vue component library, implementing this in another site, or adding it to my existing sites.<br>
Eventually, I settled on this idea, and for the entire month of May (minus an OS reinstall [aside below] and plus tonnes of Google searching), I spent some time exploring Web Components and Javascript!</p>
<p>I&rsquo;ve built <a href="https://github.com/kewbish/revshare">Revshare.js</a>, a small Javascript library to make revsharing with Web Monetization easier. It provides an interface for a <code>&lt;rev-share&gt;</code> element with a pointers attribute to make probabilistic revsharing easier.</p>
<p>[In-text aside]: I might write an entire post about this, to be honest. It would be a <em>great</em> story.</p>
<p>Anyhow, my hard drive somehow got corrupted, and my HP BIOS got scronched. I tried refreshing Windows, reinstalling the BIOS to reset my partitions, everything. And then I realized that my hard drive was just killed. Of course, it being <em>Spring Break™: Extended Outtakes</em>, almost no store were open. Long story short, I frantically bought something off Memory Express and somehow cobbled Watson back together.</p>
<p>Really made me seriously consider finally just switching 100% to Manjaro. But then I realized that I didn&rsquo;t want to figure out Teams on Linux quite yet, and I just reinstalled Windows. [end aside]</p>
<p>Revshare.js is my attempt at contributing to micropayments and the Web Monetization ecosystem, especially the rev-sharing elements. Just looking at the examples on their website - it&rsquo;s pretty complicated to do just for one or two elements. Revshare.js tries to take some of that hassle away, but I&rsquo;m not entirely sure how well it works.</p>
<h2 id="demo">Demo</h2>
<p>Add a <code>&lt;script src=&quot;http://unpkg.com/@kewbish/revshare&quot;/&gt;</code> tag to your head, and that&rsquo;s all you need to get started.</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">...
&lt;<span style="color:#f92672">rev-share</span> <span style="color:#a6e22e">pointers</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#39;[&#34;$jackie.wallet&#34;: 60, &#34;$charlie.wallet&#34;: 40]&#39;</span>&gt;
    &lt;<span style="color:#f92672">p</span>&gt;This is your revshared content!&lt;/<span style="color:#f92672">p</span>&gt;
&lt;/<span style="color:#f92672">rev-share</span>&gt;
...
</code></pre></div><p>If you&rsquo;d also like to make your <code>&lt;rev-share&gt;</code> element exclusive, just add the <code>exclusive</code> attribute as well. (This will hide the element when Web Monetization is not enabled.)</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">...
&lt;<span style="color:#f92672">rev-share</span> <span style="color:#a6e22e">pointers</span><span style="color:#f92672">=</span><span style="color:#e6db74">&#39;[&#34;$jackie.wallet&#34;: 60, &#34;$charlie.wallet&#34;: 40]&#39;</span> <span style="color:#a6e22e">exclusive</span>&gt;
    &lt;<span style="color:#f92672">p</span>&gt;This is your revshared, exclusive content!&lt;/<span style="color:#f92672">p</span>&gt;
&lt;/<span style="color:#f92672">rev-share</span>&gt;
...
</code></pre></div><p>It works using probabilistic revsharing, and the <a href="https://webmonetization.org/docs/probabilistic-rev-sharing">docs I used as a guideline are available here</a>.</p>
<p>The project is available <a href="https://github.com/kewbish/revshare">on GitHub</a>, <a href="https://www.npmjs.com/package/@kewbish/revshare">on NPM</a>, and <a href="http://unpkg.com/@kewbish/revshare">on UnPkg</a>.</p>
<h2 id="how-it-works">How it works</h2>
<p>This is built with the basic Web Components API. This was also my first proper Javascript project, and a great learning experience.</p>
<p>I was a bit confused with all the callbacks available, and when exactly they fired. The Mozilla Docs were super useful in this case, as apparently Google&rsquo;s docs were a bit out of date.</p>
<p>Technically, this isn&rsquo;t 100% accurate either. I&rsquo;ve yet to see an example where everything is perfectly split up, but the more views a page has, the more accurate the revshare splits are. Think of it as a <em>feature</em>, not a bug - you&rsquo;re incentivized to get more views for a better, more accurate split.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I&rsquo;m not sure how this post even reads. I guess it&rsquo;s a lot shorter than my proper posts (do I even have proper posts?) but hey, free content. I was too tired and too overwhelmed with homework to do proper research and rant for a 1300word post this week.</p>
<p>Anyway, I&rsquo;m trying to get more <em>involved</em>, as I&rsquo;ve said before, and start becoming the epic social media influencer I wish to become. (That was a joke. I promise.) I&rsquo;ve heard from <em>so many people</em> that I&rsquo;m supposed to build a blog and make technical blog posts for more reach and to build a platform<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> <sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>.</p>
<h2 id="currently">Currently</h2>
<p>I&rsquo;m working on rewriting Opus in Flask and Vue (private repo, I don&rsquo;t need more people scronching me because I&rsquo;m bad at Flask) right now. Soon, I, too, will be able to call myself a &lsquo;full-stack developer&rsquo;! (&lsquo;Soon&rsquo; is relative. It&rsquo;s probably going to be a long long time.) I&rsquo;ve been using PyMongo and MongoDB, which I&rsquo;m not sure is the best choice given my data structure, but is a lot easier for my JSONified brain to understand. (I&rsquo;ve built too much stuff with Hugo&rsquo;s data-driven features.)</p>
<p>For the month of June, I&rsquo;m planning to explore more <a href="https://www.khanacademy.org/computing/computer-science/algorithms">algorithms</a> (yes, with Khan Academy. Don&rsquo;t @ me.) in preparation for my <em>interesting</em> summer plans. (More about this soon. Hopefully, I&rsquo;ll remember to write a post.) I don&rsquo;t really end up using <em>Djikstra&rsquo;s</em> or <em>BFS</em> in my projects, but I guess that&rsquo;s because I haven&rsquo;t done many complicated things yet. I don&rsquo;t know why, but algorithms and competitive programming don&rsquo;t really stick. Probably just because I grew up with projects, and algorithms are a bit abstracted.</p>
<p>I&rsquo;ve also tried to build some sort of month-based focus system in an attempt to organize my programming efforts. Right now, I have it set up so I have an overall task list for a month, and a couple focuses to throw all my work behind. In June, this will be algorithms and also content. (I might pre-commit some posts but not publish them with Hugo for a while, so you <em>could</em> theoretically preread a lot of my content. You might not want to do that though-) We&rsquo;ll see how this system pans out. If it works alright, I might make a <em>blog post</em>. (Wow, more content!)</p>
<p>I also plan on doing a series on productivity <sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> and notetaking. Will also tie into <em>epic summer plans</em>.</p>
<p>Alright, going to go refresh my Dev.to dashboard in an attempt to see if I&rsquo;ve finally gotten more reactions and views [go read my articles kthxbye]-</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>I feel like I&rsquo;ve been sounding more and more British. Do I sound British? I have no clue anymore. Someone British please tell me- <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>Don&rsquo;t think that quite worked; the entirety of readership of this blog is currently only reading through for things to meme me about. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>TL;DR: I have no clue what I&rsquo;m doing but apparently crossposting blog posts is supposed to boost SEO and reach and apparently that&rsquo;s a cool thing to do so here I am- <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4" role="doc-endnote">
<p>I&rsquo;m probably not qualified to properly explain these things, but I think it might help to just explain things. <a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>The Yearly Rebrand</title>
      <link>https://kewbi.sh/blog/posts/200524/</link>
      <pubDate>24 May 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/200524/</guid>
      <description>On my recent website and blog redesign.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Well, hello. It&rsquo;s been a while - almost a month since I last posted, and more than a month since my last actual post.</p>
<p>Some interesting things happened between then and now, the most noticeable of which is my shiny new website design. To be completely honest, I&rsquo;m not sure how I feel about it. It&rsquo;s slightly better than the old site, but it&rsquo;s still not very <em>poppy</em>, is it?</p>
<p>For some reason, I find that I happen to go through a redesign every year or so (though I&rsquo;ve only been &lsquo;online&rsquo; for a couple of years). This time, it was prompted by boredom during quarantine and me having way too much time to overthink my website. (Also, everyone deciding to meme me for &lsquo;Yours, Kewbish&rsquo; and the cringe I have here kind of helped. Hey, if people are going to be reading my site, even just to tease me, this blog might as well be consistent with my main site and snazzy nonetheless! I&rsquo;m looking at you, the entirety of the set of my classmates and half my <a href="https://kewbish.github.io/blog/posts/200214/">Google Code-in colleagues</a>.)</p>
<p>I went through the redesign in three stages: porting my <a href="https://kewbish.github.io">main site</a> to Hugo, replacing hard-coded content with Hugo&rsquo;s data-driven content, and restyling my blog, which was already on Hugo.</p>
<h2 id="phase-1---porting-to-hugo">Phase 1 - Porting to Hugo</h2>
<p>I&rsquo;m pretty sure you&rsquo;re already aware what Hugo is. If not, <a href="https://kewbish.github.io/blog/posts/200221/">have a look at how I started my blog.</a>. I prefer Hugo to Jekyll or Gatsby. Sue me.</p>
<p>My website was pretty simple in the first place:<br>
index.html, which was just a centered div with a bunch of buttons and links<br>
me.html, which was me attempting to stuff as many resume buzzwords as I could into a page<br>
folio.html, which was me trying to pretend that I had lots of proper projects</p>
<p>Recreating this sitemap was super easy in Hugo: mostly done in the theme and a couple HTML pages in the <code>content</code> folder. I was surprised to see that I could add HTML pages to the <code>content</code> folder - I&rsquo;d always thought that I could only use Markdown files. (Then again, I&rsquo;ve only been using Hugo for what, three months? <em>imposter syndrome sets in</em>)</p>
<p>Now, the sitemap puts the <code>me.html</code> and <code>folio.html</code> into folders, and the URLs are a little prettier. For example, <code>https://kewbish.github.io/me/</code> instead of <code>https://kewbish.github.io/me.html</code>.</p>
<p>It was a little confusing to restructure the git repository to a two-repository publish structure. I&rsquo;m still rather new to the fancy <code>git reset</code> and whathaveyou - I just use what I have to. This part was a great learning experience - I had a long, long research session to figure out the best way to structure the repo.</p>
<p>In hindsight, I could have put the published Hugo directory into the master branch, and had a separate branch for the Hugo site source, but I still don&rsquo;t really trust myself to remember not to pull something, and then have to spend another day figuring out how I <code>redo git commit local</code>. (After which I would then pull from GitHub and have to redo all my changes haha-)</p>
<p>As well, I had initially decided to move the blog posts to the main repository, but I decided to keep it in its own repo. For one, it&rsquo;s a little easier to maintain personally. If I mess up one part of the site, hey - at least the other part is still alive. As well, I had a grand total of <em>five stars</em> on my blog repo - why waste them? It&rsquo;s also frustrating to have to archive repos and have that ugly yellow banner and all that.<br>
TL;DR blog is still at <a href="https://kewbish.github.io/blog">kewbish/blog</a>.</p>
<h2 id="phase-2---hugo-ifying-my-content">Phase 2 - Hugo-ifying my content</h2>
<p>Once I had the majority of the content copy-pasted over, and the copy re-written, I decided to make the best of Hugo&rsquo;s great data-drive capabilities.</p>
<p>If you don&rsquo;t know what these are, it&rsquo;s essentially the capability to put data into <code>.json</code>, <code>.yaml</code>, or <code>.toml</code> files, and pull that content directly into your pages at build. I find it a lot easier to work with. I don&rsquo;t have to remember to change the actual text of the <code>.html</code> file; instead, I can just add a new object in a JSON array.</p>
<p>It&rsquo;s also more scalable, in my opinion. I&rsquo;m starting to amass a lot of projects, and while they&rsquo;re all <em>kinda bad and smol and probably useless haha</em>, it&rsquo;s easier to edit the site when I&rsquo;ve already accounted for it in my styles, and can just update the <code>data</code> folder.</p>
<p>And I might as well make use of the features! I&rsquo;ve started to love the Hugo templating syntax (yes, I know it&rsquo;s technically the <em>Go templating syntax</em>, but the two don&rsquo;t line up in my head for some reason). Instead of manually adding things, I can just <code>beep-boop</code> <em>add a field</em>! I really like this workflow, especially, as I said, with maintaining content, and having the whole site become more of a <em>living document</em>. (Wow, more buzzwords! I&rsquo;m so cool and relatable!)</p>
<h2 id="phase-3---restyling-my-blog">Phase 3 - Restyling my blog</h2>
<p>My blog (yes, this one you&rsquo;re reading, yes, I call this a blog, yes, it&rsquo;s not just me blathering on <em>okay it probably is</em>) was already created with Hugo, and the only reason I redesigned it was because it didn&rsquo;t really fit with my main site.</p>
<p>For example, the main site initially used a bunch of Montserrat and open borders, along with my old logo (do I even have  a logo now?), whereas this blog was designed in a more console-like style, which I feel matches my personality and personal brand more (?). Now, they use roughly the same stylesheet, and the same brand colours, variables, and layout structures.</p>
<p>I started out with the main site&rsquo;s stylesheet, and then erased a bunch of the styles I didn&rsquo;t use. Coming up with a new structure layout wasn&rsquo;t too difficult. The way I designed the main site was based around reusable components (like the different types of grids and heading elements), so I could reuse them on this blog. Efficient design! (Also, I just didn&rsquo;t want to redesign a bunch of other things and then have the two sites look completely different. <sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>)</p>
<h2 id="conclusion">Conclusion</h2>
<p>So here it is. The new Kewbish™️ look. (Yes, I know I&rsquo;m going to be memed for this already.) What do you think? Oh wait, there are no comments here. (By intention - I don&rsquo;t need 50 people explaining why I&rsquo;m bad. I already know.)</p>
<p>Hugo gives me the capability to remove most of the boilerplate that I previously relied on, and gives me the tools I need to quickly add new content with little to no maintenance work. I really like the new workflow. (I&rsquo;m pretty sure I already said that. Hmm.)</p>
<p>I&rsquo;m still not sure how I feel about it. It&rsquo;s probably worse off than the old site, but hey - I put my time to a decent use.</p>
<h2 id="currently">Currently</h2>
<p>I&rsquo;ve been working on my <a href="https://github.com/kewbish/revshare">Grant for the Web Hackathon entry</a>. (The GFTW Hackathon is run by Dev.to - read about it <a href="https://dev.to/t/gftwhackathon">here</a>.) It&rsquo;s supposed to be a library to integrate a Web Monetization revenue sharing component into your site. It&rsquo;s pretty easy to use, so please do check it out! It was a learning <em>experience and a half</em> in learning the more exotic areas of Web Components and Javascript. (Also, my first actual project and first NPM publish. No scronch please.)</p>
<p>After I finish that, I plan on working with more Flask and MongoDB stuff. Because apparently backend stuff is cool! I might also work on a Discord bot, perhaps. Or an API. Not sure.</p>
<p>Also - I&rsquo;m officially committed to completing CS50 over the summer. (Yes, it&rsquo;s a 12wk course that a bunch of classmates and I are going to speedrun in 8. Yes, it&rsquo;s Harvard. Yes, we&rsquo;re sane.) Can&rsquo;t wait to go through that - their web programming section looks mighty fascinating. I&rsquo;ll probably write about that quite frequently. (Oh no, I&rsquo;m becoming a writing vlogger ohno-) Can&rsquo;t wait to see what shenanigans I get up to in the summer.</p>
<p>(Smol note: blog posts might be smoller from here on out. I&rsquo;m not sure how long they&rsquo;ll be, but I don&rsquo;t really feel like writing a 1100word masterpiece every week. We&rsquo;ll see.)</p>
<h2 id="footnotes">Footnotes</h2>
<p>Oh wait - there&rsquo;s a footnotes section now! Just trying a new Hugo feature out.<br>
Please append the phrase &lsquo;unrelated, but&rsquo; to the beginning of each footnote.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>[1]. I&rsquo;ve recently been reading the book <a href="https://www.goodreads.com/en/book/show/28820444-the-elephant-in-the-brain">The Elephant in the Brain</a> by Kevin Simler and Robin Hanson. The book essentially describes how the human mind likes to shroud its rather sketchy motives in noble notions. So here, I&rsquo;m telling myself that this was an example of my excellent efficient design pattern thinking, but really, I&rsquo;m probably just lazy and was tired of CSS for the time being. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>I&#39;ll be back, eventually</title>
      <link>https://kewbi.sh/blog/posts/200429/</link>
      <pubDate>29 Apr 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/200429/</guid>
      <description>On my impending absence, and this blog.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>If you&rsquo;re reading this, you&rsquo;re either a) genuinely here to get the best of Kewbish content, b) someone I met through GCI and is here to stalk me, or c) a classmate, probably here to fish for blackmail. To all of you - I say hello. And goodbye, just for a bit.</p>
<p>I&rsquo;ve decided to move my current <a href="https://kewbish.github.io">website</a> over to <a href="https://gohugo.io">Hugo</a>, and with doing that, I can also integrate this blog directly into that repo instead. As well, it&rsquo;s been about a year since I first made my site, and I&rsquo;ve learned a lot more about design and feel that I should upgrade it. I&rsquo;m not too happy with the design of my main site, and while this blog is alright, it isn&rsquo;t consistent with my main site. It&rsquo;ll be a lot easier to manage one cohesive Kewbish look when everything&rsquo;s migrated to one place. Both sites are, as of now, going under construction, and probably won&rsquo;t have actual content for a while.</p>
<p>The past few blog posts are going to stay here as I rework my main site, but when I&rsquo;m done, I&rsquo;ll move them there. In the meantime, feel free to browse here and read whatever. My main site&rsquo;s pretty barren right now - just a placeholder and reminder about its rework, so there won&rsquo;t be much to see there. Theoretically, you can still see my site as I build it as a WIP if you dig around the URLs and GitHub repo enough, but try not to do that too much, yeah?</p>
<p>So instead of doing my homework, I&rsquo;ve decided to leave this last little note here (which will be deleted when this version of Yours, Kewbish goes down). Don&rsquo;t worry - I&rsquo;ll be back. Promise.</p>
<h2 id="currently">Currently</h2>
<p>I just finished <a href="https://diveintoht.ml">my social justice project</a>, and am just polishing up some things. I&rsquo;m waiting to promote it til I have everything down 100% and have the site tested a couple times, but if you&rsquo;d like to <em>dive into HTML</em> or check it out - feel free!<br>
Otherwise, I&rsquo;ll be working on my website. For a while. Hopefully, it won&rsquo;t be too long, but we never know.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Why I haven&#39;t gone to Linux</title>
      <link>https://kewbi.sh/blog/posts/200411/</link>
      <pubDate>11 Apr 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/200411/</guid>
      <description>On why I&#39;m still with Windows (for now)</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>I&rsquo;ve been chatting with some of my GCI friends, and many (GCI is supposed to be an <em>open source</em> based competition, after all) seem to use some form of Linux as their daily driver.</p>
<p><em>Disclaimer: this article isn&rsquo;t intended to spark up the quintessential &lsquo;which distro is best&rsquo; question. Just my opinions and naïve questions.</em></p>
<p>We had a very engaging discussion about Arch Linux, along with all the <a href="https://kde.org/plasma-desktop">prettifying DEs</a> or whatever. I&rsquo;d been thinking about transferring to Linux for daily driver (O how intellectual I feel when I use that phrase) for a while now (ever since I started exploring OSS), so I began digging around for more details.</p>
<p>Yeah, <code>Windows bad Linux good</code> may be the most prevalent OS-view, but I&rsquo;ve found some little snags that are stopping me from converting to another Arch cult member.</p>
<p><em>Disclaimer #2: I haven&rsquo;t tested Linux on a dual boot on my laptop yet either, so things might work better than they seem. I have no clue - just looking for answers.</em></p>
<h2 id="battery-life">Battery life</h2>
<p>I&rsquo;ve been having some battery problems (unrelated and just due to normal wear and tear of abusing a three year old laptop), so I thought I&rsquo;d look into how the battery life was for Linux (specifically Manjaro.) Unfortunately, I found a bunch of <a href="https://www.reddit.com/r/ManjaroLinux/comments/cd25si/battery_life_in_manjaro_kde_is_atrocious_compared/">very annoyed Redditors</a> ranting about the atrocities of battery management.</p>
<p>According to my colleagues, they haven&rsquo;t noticed anything, but I&rsquo;m worried that battery life will significantly decrease with all the software that&rsquo;s not properly optimized for Linux (more about this later). I still need to go to school (and uni soon) and I don&rsquo;t want to have to wrangle a powercord around because my laptop won&rsquo;t last for six hours of light notetaking.</p>
<p><strong>Solution:</strong> I mean, I can definitely try loading up Arch, and downloading tlp / powertop / checking whatever, but not sure if I want to invest in testing when my dearest Windows setup still works.</p>
<h2 id="chrome-or-firefox">Chrome or Firefox?</h2>
<p>Firefox has been touted around as a nice, fast, open browser, but yes - I&rsquo;m a heretic who still uses Chrome. Sue me.<br>
As such, I&rsquo;d like to still end up using Chrome, but after looking into <a href="https://www.linuxuprising.com/2018/08/how-to-enable-hardware-accelerated.html">the high CPU usage issues</a>, I&rsquo;m not sure how feasible that would be. Again, battery life &gt; performance (at least while I&rsquo;m doing light work) for me.</p>
<p>I&rsquo;d not have a user-ex problem with switching to FireFox - the UI looks similar enough to Chrome, and the features are the same, if not better. Through a quick Google search, I found <a href="https://support.mozilla.org/en-US/questions/1184924">some cursory information on getting the Chrome aesthetics back</a>.</p>
<p>I have no bookmarks or much other information to migrate, and for passwords and things there seems to be a painless migration progress.</p>
<p>I&rsquo;m actually really happy that the extension ecosystem is rather similar; I can get my <a href="https://darkreader.org/">DarkReader</a>, <a href="https://getadblock.com/">Adblock</a>, and other smol things. (Side note: there&rsquo;s a great <a href="https://chrome.google.com/webstore/detail/audio-only-youtube/pkocpiliahoaohbolmkelakpiphnllog?hl=en">audio-only YouTube</a> that only allows the audio through. I like it - I usually listen in the background and don&rsquo;t watch 100% focused in anyway.)</p>
<p>The main gripe I have with FireFox is the apparent high CPU and RAM as well. I&rsquo;ve heard this goes away if you can tonnes of tabs open, but I&rsquo;m a minimal-as-few-tabs-as-possible type of browser user. If I do go down the Linux rabbit hole, I&rsquo;ll have to weigh both of them, and check CPU / RAM by hand myself. I&rsquo;m not quite sure about the performance - and I&rsquo;m also used to Chrome.<br>
<strong>Solution: Not a major problem, I guess. Whatever&rsquo;s smoother.</strong></p>
<h2 id="file-system">File system</h2>
<p>I&rsquo;ll be dual booting if I do go into the Linux world (just for a little <em>Transition</em> period), so it&rsquo;d be nice to be able to access Windows and Linux files from whatever OS I&rsquo;ve booted into.<br>
<strong>Solution: Mount partitions, which should allow read/write between filesystems. I haven&rsquo;t done much research on this, but theoretically, according to my cursory searches, it should be fine.</strong></p>
<h2 id="note-taking">Note taking</h2>
<p>I have a single notebook in Onenote, but inside, there&rsquo;s a gargantuan mess of tabs and pages and notes and whatever else my mind decides to spew out.</p>
<p>I really like the system, but even with Wine, the UWP won&rsquo;t work (<em>obviously</em>) and the 2016 version doesn&rsquo;t seem to have good support either (<code>Garbage</code> rating). Therefore, if I switch, I&rsquo;m probably also going to have to switch notetaking systems.</p>
<p>Right now, I actually write all my assignments and take my digital notes inside Onenote (I&rsquo;m a <em>quirky</em> user) and format everything in Word later. I&rsquo;d love to have some Latex support, and have it sync to the cloud, but the main things are dark mode, markdown or at least some sort of plaintext formatting, and a decent UI.<br>
<a href="https://evernote.com/">Evernote</a> is the go-to, and while it seems like it checks all the boxes, I also don&rsquo;t like that I&rsquo;ll have to pay eventually.</p>
<p><a href="https://notion.so">Notion</a> has been promoted a lot recently by productivity YouTubers, and personally, I really like this system. It&rsquo;s clean, and it&rsquo;s simple. However, as with Evernote, the powerful tools that I&rsquo;d really need are locked behind a paywall. And I know I can get a Student plan, but what happens when I&rsquo;m no longer a student? <code>:cash-register-opens:</code></p>
<p>Enter <a href="https://joplinapp.org/">Joplin</a>. The UI isn&rsquo;t nearly as pretty, but their system will play nicely with what I need. As well, it has an iOS app (aiya I&rsquo;m switching to Android later alright) for now, which is a nice bonus. And open sourced and GitHubized as well! It seems like what I need, but I&rsquo;m still going to be looking around for prettier solutions, like <a href="https://notable.md">Notable</a>, another solution that&rsquo;s a lot prettier but doesn&rsquo;t have an app. I can, however, get Onedrive, so that might be good for my notetaking.</p>
<p>(Quick edit: <a href="https://boostnote.io/">Boostnote</a> also seems super cool - I like the UI, and it should support sync. Mobile apps too. But again - a little bit of a paid tier.)
<strong>Solution: we&rsquo;ll figure it out later.</strong></p>
<h2 id="ms-office-replacement">MS Office Replacement</h2>
<p>I love Word. I&rsquo;m a PowerPoint animation master. I&rsquo;m learning Excel, and in the meantime, forcing it to generate my lab graphs.</p>
<p>It&rsquo;ll be hard to think about moving away. I know OSS is superior yada yada yada, but the UI of all these programs is just so <em>integrated</em> and <em>shiny</em>.</p>
<p>Out of <a href="https://www.libreoffice.org/">LibreOffice</a>, <a href="https://www.freeoffice.com/en/">FreeOffice</a>, and individual replacement programs: I&rsquo;d probably go with LibreOffice. Widely used, and a big community. As well, it has dark mode for most of its apps, and also introduces a nice Math editor - which will be very useful in the future.<br>
It&rsquo;s also decently integrated with importing and exporting MS files, which you can see is a recurring theme in this: compatibility or easy migration from what I have now. I really don’t to rewrite, archive, or throw away all my past work - and with most of LibreOffice, I won&rsquo;t have to.</p>
<p>It does look a little outdated though in many of its screenshots. FreeOffice does a better job here, but I&rsquo;m not sure if FreeOffice has the power that LibreOffice does.<br>
<strong>Solution: LibreOffice is good enough.</strong></p>
<h2 id="other">Other</h2>
<p>I also use GitHub Desktop, <a href="https://telegram.org">Telegram</a>, <a href="https://blender.org">Blender</a>, <a href="https://unity.com">sometimes Unity</a>, <a href="https://store.steampowered.com/">rarely, Steam</a>, <a href="https://www.spotify.com/ca-en/download/linux/">Spotify</a>, and <a href="https://code.visualstudio.com/">VSCode</a>, but these all have easily-integrated Linux versions. Won&rsquo;t have switch, and honestly, don&rsquo;t want to, anytime soon.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I&rsquo;m not sure how useful a dual boot will be. If I switch, cold-turkey, it&rsquo;ll actually force me to learn and use a new system, and I won&rsquo;t be able to chicken out and default back. However, if I don&rsquo;t keep a dual-boot of Windows, I also risk having to last-minute edit whatever Windows-based things (though I think I&rsquo;ve looked into enough equivalent versions of software I frequently use).</p>
<p>Over the summer, I&rsquo;ll definitely continue looking into complete alternatives and try to wrap my head around Linux-ifying my workflows. And hey, if I consider it a good option - I&rsquo;ll do it.</p>
<h2 id="currently">Currently</h2>
<p>You might see that a lot of my activity for the next bit will be in private repositories. I&rsquo;m not working on a secret project - just an interactive HTML tutorial that&rsquo;ll teach a user to create a resume. It&rsquo;ll probably be closed source, but we&rsquo;ll see.</p>
<p>I&rsquo;ve been working with <a href="https://vuejs.org/">Vue</a> for about two weeks now, and I think it&rsquo;s a great framework. The CLI forcing the node_modules is a little annoying, but otherwise, no Vue complaints. I haven&rsquo;t seriously worked with Javascript much, but transitioning from Python isn&rsquo;t too much of a hassle. I don&rsquo;t really like the system of having a huge node folder - I prefer just importing and having a smaller script, but that&rsquo;s just me.</p>
<p>Quarantine&rsquo;s been great for learning - hope y&rsquo;all are staying safe, having fun (but not too much), and washing your hands (or using an alcohol-based hand sanitizer if you can find it).</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Remote Teamwork</title>
      <link>https://kewbi.sh/blog/posts/200401/</link>
      <pubDate>01 Apr 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/200401/</guid>
      <description>On what I&#39;ve learned collaborating remotely.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>With all that&rsquo;s going on in the world (US has now claimed the #1 position - go States go!), remote work posts are clawing for notice on all my feeds. Productivity tips, horror stories, and tutorials for a successful call.</p>
<p>Recently, I had a bit of a remote work scenario myself - with a game project. No, I didn&rsquo;t take part in a game jam; it was a school project. For my business class, we were supposed to create a board game, but being the techy kid I am, my team decided to create a text-based real estate game instead. (It&rsquo;s a private GH project - I&rsquo;ll ask permission from my teammates before we release it and perhaps I shall update this post with a link.)</p>
<p>As we were working with a programming project, it was a lot easier for us to collaborate and produce something, and it&rsquo;s been about two weeks since we started working on the project. We&rsquo;re getting close to the release (and due) date, and it&rsquo;s nearly bug-free!</p>
<p>Overall, I learned quite a bit from working with my peers, and I thought I&rsquo;d share some of the introspections I gathered in this post.</p>
<p>(<em>In other news - it&rsquo;s my birthday, if you read this on the day it&rsquo;s published. Give updoots now. I&rsquo;m now slightly less smol - yay! :tada:</em>)</p>
<h2 id="stay-on-the-same-page">Stay on the same page</h2>
<p>Right off the bat, one of the issues we had was staying on the same page with implementation methods. We have a <code>turn</code> structure, and within that several methods like <code>turn_next_turn</code>, <code>turn_choose</code>, <em>etc</em>. These all need different parts of each available property, like price for some, a boolean if the property is rented, the value of the house on the property - the list goes on.</p>
<p>Something I think we didn&rsquo;t do quite effectively enough was creating the property structure, and the turn structure together. Instead of assigning the subtasks and tackling each method separately while adding information to properties willy-nilly, we should have sat down together, and created a list structure. Element one would be the price, two would be the rent rate, three the lease length, and so on. We did end up refactoring, and rewriting some methods, but this time could have been spent bugfixing instead.</p>
<p>This is especially crucial for methods and sections of code where multiple people were interpreting the same values - making sure everyone was on the same page and understood what we were implementing was a key design point.</p>
<h2 id="have-a-central-document">Have a central document</h2>
<p>With games, usually there&rsquo;ll be a GDD, but I don&rsquo;t see (or personally implement, I&rsquo;m guilty as well) a similar document often in the open source projects I navigate. Outlining user navigation structures, and how parts of code interact was a strength of our team.</p>
<p>Writing our ideas down on paper let us ask crucial questions and investigate the feasibility of each option, and make an educated decision on how to move forward. Even when not creating a new feature, it helped explain where key elements were, and let everyone know that these variables existed, ensuring that we didn&rsquo;t have redundant objects.</p>
<p>A central document is also a great place to log bugs and issues, prioritize and brainstorm fixes, and create new features. It&rsquo;s also a resource people can turn to for deciding what they&rsquo;ll work on, and for assigning tasks to people. Instead of spreading across multiple platforms, I liked that we had one Google Doc for all our game information, and kept to Hangouts for communication.</p>
<p>If you back up the document with Git (or just add on in a log format), you can also look at what you&rsquo;ve done.<br>
Personally, I found that we didn&rsquo;t need to designate one person as the secretary, but with larger teams, that might be useful. As a smaller group, we tracked issues we found, and discussion was always straightforward.</p>
<h2 id="communicate-effectively">Communicate effectively</h2>
<p>Working with a team is always different than working alone. You have to ensure that people understand what you&rsquo;re doing, and that a task&rsquo;s been claimed by one person. Lots of logistical admin work.</p>
<p>My &lsquo;advice&rsquo;, if you can call it that, would be to choose a chat app of some sort, and include that in your communication stack. We used Hangouts - it&rsquo;s simple, is accessible right from Gmail, and is relatively distraction free. Also, calls!</p>
<p>Regarding messaging: I recently stumbled across some crosspost of <a href="https://www.calnewport.com/blog/2016/04/19/write-longer-emails/">this article by Cal Newport</a>, explaining their method of email-writing. While novel-length messages are honestly a waste of time, I felt that some aspects of his essay could be adopted into my personal workflow.<br>
Instead of firing off a quick message, I tried to provide links to the resources I used, and explain (if not in the message, in the comments) how I worked on the feature, which brings me to my next point.</p>
<h2 id="comment-please">Comment. Please.</h2>
<p>I was the only native Pythonista in the project, with a mixture of C# and Java natives - along with one novice. As such, I ended up using some interesting features, like dictionaries, enumeration, and various libraries that might not have made intuitive sense to the others.</p>
<p>Sure, they could have found out by themselves what <code>literal_eval()</code> does, but adding a simple comment would have been enough.</p>
<p>While comments are ~unnecessary in personal projects~ <em>indeed best practice and we all write them haha myself included</em>, they&rsquo;re really a core communication method, besides chat and call, that developers (myself included) should utilize to their fullest.</p>
<p>One thing our team did was even use features to &lsquo;message&rsquo; each other, leaving notes like &lsquo;what does this do?&rsquo; or &lsquo;rename variables please&rsquo;, or noting issues and things like that. It&rsquo;s an effective built-in platform, and can be referenced in the document.</p>
<h2 id="take-initiative-and-do-your-work">Take initiative and do your work</h2>
<p>Our team worked as well as it did because we <em>all did our work</em>. While speedrunning your work and letting others take on difficult bits is tempting, please do your work.<br>
Your teammates are relying on you to share your knowledge, and besides, figuring out difficult implementations is super rewarding. (Also, virtual human points!)</p>
<h2 id="meeting-etiquette">Meeting etiquette</h2>
<p>Meetings are honestly one of the most important &lsquo;syncing&rsquo; moments (at least for our team). We put together docs, went over important design points, and practised some of that <em>effective communication</em>.</p>
<p>Some tips for a good call:
- Join on time (preferably even a couple minutes early to check technical problems out. Then again, don&rsquo;t show up thirty minutes early while people aren&rsquo;t doing anything, or the host is still debugging a last minute issue.)
- Make sure your equipment works. Not everyone has the latest Audiotechnica or Sony setup, but even the standard laptop mic will do.<br>
- Remove distractions. Yes, a Discord notification is super distracting - so close Discord. Your other team members are fully dedicating themselves to the meeting, so you should too. Try to limit browsing only to essential resources, your document, your group chat, and whatever code / issue you&rsquo;re discussing.<br>
- Mute while not talking. (Reduces the frequency of embarrassing conversations you&rsquo;re having with family - try to avoid these altogether, but sometimes it happens.) Also reduces frequency of background noise interruptions, like ambulances, fire, etc.</p>
<p>One additional point I&rsquo;d like to make is utilizing submeetings. While we had entire group meetings maybe once every two days, some of us who were collaborating on one feature would have shorter calls between them. That way, precious all-together time wouldn&rsquo;t be wasted (especially as building and debugging a new feature with time pressure on call is <em>very difficult</em>). As well, it enables team members to get to know features more intimately, and collaborate better!</p>
<h2 id="currently">Currently</h2>
<p>As a responsible, productive individual (<em>top ten lies I like to tell myself every day</em>), I did actually make good use of my time. I&rsquo;ve decided to focus on <a href="https://kewbish.github.io/kenna">Kenna</a> - the site generator for teachers to <em>generate online presences to update their students</em>. As well, I&rsquo;ve been dabbling with Javascript more, and Vue, so I&rsquo;ve been trying to incorporate the Vue / JS stuff to automate the file generation. <a href="https://github.com/kewbish/justin">Justin&rsquo;s</a> has been a lesson in usability (check the issues if you dare), so I&rsquo;ve learned to be more conscious of non-developers using my systems. I also have plans for (after KennaGen is finished) to recreate my SJAP in some sort of interactive website platform. It&rsquo;s been a pretty good week!</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Exponential Growth</title>
      <link>https://kewbi.sh/blog/posts/200323/</link>
      <pubDate>22 Mar 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/200323/</guid>
      <description>On the difficulties of comprehending growth.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>It being Spring Break: the <strong>Extra Cut</strong>, many friends (most of them being on Instagram, the primary focus of this post) have been tagging each other in #StayHome stories and playing story games where we tag a bunch of our friends in order to &lsquo;spread positivity&rsquo;.</p>
<p>Being the cynic I am, I couldn&rsquo;t help but snark on these stories, and somehow bring an analogy to the current COVID-19 situation in.</p>
<p>This blog post will involve some basic math - I tried to ensure that it was as simple as possible. Without further ado: an investigation into social media, and how it encourages exponential growth.</p>
<h2 id="basic-math">Basic Math</h2>
<p>Let&rsquo;s start with a quick question:</p>
<p>Say you have a pond, and a bunch of invasive tadpoles. These tadpoles double in number every day. Today, you have two tadpoles. On day 60, the tadpoles will have completely taken over the pond. On what day were the tadpoles 1/2way covering the pond?<br>

  
<br>
Answer: day 59.
<br> 
</p>
<p>If you thought the answer was 30, you&rsquo;re not alone. This problem was adapted from <a href="https://www.youtube.com/watch?v=fgBla7RepXU">this video by It&rsquo;s Okay to Be Smart</a>, and highlights the mental challenges of comprehending viral / exponential growth.</p>
<p>Exponential growth is quite a simple topic in basic math.<br>
Essentially, the formula goes like this.<br>
<code>P = Po * 1-(r^t) / 1-r</code>, where:<br>
- P = final population<br>
- Po = initial population<br>
- r = rate of growth<br>
- t = time</p>
<p>In the rest of this article, I&rsquo;ll case-study three examples of popular Instagram story games I&rsquo;ve seen (and have attempted to be roped into):<br>
- #challengeaccepted stories<br>
- Black story with black text, or Who I care About stories<br>
- Drawing stories</p>
<h2 id="challengeaccepted">challengeaccepted</h2>
<p>You&rsquo;ve seen these ones, or maybe been tagged in them: stories where (usually girls) post photos of themselves (and only themselves) in some way to &lsquo;spread positivity&rsquo;. Ignoring the iffy balance of whether or not you agree that these posts are effective in spreading positivity, they&rsquo;re a key example of social media&rsquo;s viral properties.</p>
<p>One subset of these stories asks girls to tag 10 people who they&rsquo;d think would benefit from it. So with one initiator, each &lsquo;generation&rsquo; of stories creates 10 more.</p>
<p>The numbers look like this:
1 initiator -&gt; 10 sub-stories -&gt; 100 sub-sub-stories -&gt; 1000 sub-sub-sub-stories.<br>
In 3 generations, the story has directly reached 1000 + 100 + 10 + 1 -&gt; 1111 people.<br>
Say that there&rsquo;s a generation every hour and half. In two days -&gt; 48h / 1.5h = 32 generations. This would be a geometric series, where the rate is 10, and the math would look like:
<code>P = 1 * 1-10^32 / 1-10 = 1.1E31</code> which is an incredible number of people reached.</p>
<h2 id="who-i-care-about">Who I Care About</h2>
<p>According to <a href="https://psychcentral.com/lib/how-many-friends-do-you-need/">this study</a>, people have 3-5 close friends, and I assume that&rsquo;s who people would tag when they see one of these.</p>
<p>Assume that you have 1 initiator, each with 4 close friends that they&rsquo;d tag. (There are undoubtedly many people who will tag infinitely more, but let&rsquo;s keep the numbers small, and see how people with such small circles still get a wide reach through exponential growth). I&rsquo;ll model 2 generations.</p>
<p><code>P = 1 * 1-4^3 / 1-4 = 21</code><br>
A more straightforward rewrite below:<br>
<code>1 + 4 + 16 = 21</code><br>
Twenty one people directly reached, from <em>one</em> initiator. In two generations. If that doesn&rsquo;t look like a lot of people: add another generation, and we have 85. Add another? 341.</p>
<p>It doesn&rsquo;t seem like much at first, and the rate of growth seems &lsquo;reasonable&rsquo;. Everything looks fine and dandy. However, that&rsquo;s the bane of humans - we think linearly. We simply can&rsquo;t usually comprehend how these systems work. Here&rsquo;s a graph (thanks Desmos) that shows just how steep growth is with this example.<br>

 
<iframe src="https://www.desmos.com/calculator/zzijlfghvu?embed" width="500px" height="250px" style="border: 1px solid #ccc;margin-top: 15px" frameborder=0></iframe>
</p>
<h2 id="drawing-posts">Drawing Posts</h2>
<p>One last example - drawing posts. In this format, a screenshare of each story is put in the upper left of each subsequent sub-story, along with a rendition of whatever the story&rsquo;s theme is, and then usually around three tags.</p>
<p>The growth here is less drastic, but from what I&rsquo;ve personally experienced, those who are directly involved or tagged tend to follow through with the drawing more often than those who are roped into #challengeaccepted or people-you-care-about stories.<br>
Let&rsquo;s model it mathematically:
<code>P = 1 * 1-3^3 / 1-3 = 13</code> or 1 + 3 + 9 -&gt; 13.
As with the people-one-cares-about stories, the growth here seems normal and &lsquo;organic&rsquo;. However, if I keep extending the model:<br>
<code>P = 1 * 1-3^5 / 1-3 = 121</code>, and <code>P = 1 * 1-3^6 / 1-3 = 364</code>. Crazy growth, especially when you visualize it.<br>

  
<iframe src="https://www.desmos.com/calculator/b9gfve4kl1?embed" width="500px" height="250px" style="border: 1px solid #ccc;margin-top: 15px" frameborder=0></iframe>
</p>
<h2 id="modifications-to-the-model">Modifications to the Model</h2>
<p>For simplicity&rsquo;s sake, I spun up some easier numbers, but there&rsquo;s always more to consider.<br>
- no. of people who are &lsquo;primed&rsquo; for the story. Let&rsquo;s say your acquaintances participate in one of these story chains, which eventually reaches your closer friends and your inner circle. Every time you see a story following this format, you&rsquo;re priming yourself to respond, when you, too, are inevitably chained into the story. The more members of your inner circle participate, the more likely you will too - no matter how hard you resist.<br>
- no. of initiators. People are quirky, and some will eventually go off to start their own chains, without being chained in themselves. This would add even more growth and complexity, as chains overlap and repeat themselves.<br>
- no. of unresponsive people. Like myself, I proudly add. Even more quirkily, some who were tagged into the games won&rsquo;t add others to their story, and a chain of growth is stopped there. This would definitely affect the numbers I put up: I simulated the growth with a perfect, ideal scenario and a geometric series.<br>
- no. of story games circulating. Maybe someone&rsquo;s been tagged one too many times, and feels tired that day. They won&rsquo;t participate, and similar to the complication above, that’s a chain of possible growth that&rsquo;s cut off.<br>
- And tons more. Socialization is complicated, and humans are too. Covering every little aspect of <em>oRgAnIc</em> Instagram growth models would be way too complicated, and out of the scope of both my knowledge and this blog post.</p>
<h2 id="similarities-to-covid-19">Similarities to COVID-19</h2>
<p>I couldn&rsquo;t help but draw a connection from all these story chains propagating during Spring Break ++ and to the other thing currently virulently spreading across the world: COVID-19.</p>
<p>You see, COVID-19 (in its ideal environment) spreads kind of like stories and information on social media. With every reshare, retweet, and copy-paste, the &lsquo;virus&rsquo;, story, or meme gets blasted out to more people than initially started it.<br>
This has serious ramifications for the spread of misinformation in this day of &lsquo;fake news&rsquo;, and for the health of our world population, right now. All this talk of &lsquo;flattening the curve&rsquo; is for good reason. You&rsquo;ve seen how exponential growth can seem like nothing for a good while, then spike suddenly. At all cost, we want to reduce the growth factor and the spread, so that it doesn&rsquo;t spike. Or if it spikes, that healthcare systems can stabilize and continue to function.</p>
<p>No, I&rsquo;m not going to spin this into some wishy-washy message about how social media bad, no one talks face-to-face anymore haha <em>minion</em>, but just consider it, the next time you post a story and tag another few people.</p>
<h2 id="related-ccc-problem">Related: CCC Problem</h2>
<p>I recently participated in the Canadian Computing Competition, hosted by Waterloo. I didn&rsquo;t do that well - just because I&rsquo;m not really an algorithm-type developer, that&rsquo;s all. I haven&rsquo;t practised those skills in a while, but I thought I&rsquo;d share something relevant, especially as CCC is now over worldwide.</p>
<p>One of the Junior questions was to create an epidemiology mockup, and the problem set I was working off of is available <a href="https://cemc.uwaterloo.ca/contests/computing/2020/stage%201/juniorEF.pdf">here</a>. Though it was written before the start of COVID-19&rsquo;s massive handle on the world, I appreciate the little nod to the severity of the situation and usability of computing.<br>
Here&rsquo;s my solution (ugly, I know):<br>
<script type="application/javascript" src="https://gist.github.com/kewbish/4f7e5fa997bb52a830f883489d4a15b1.js"></script>
</p>
<h2 id="videos-and-further-resources">Videos and Further Resources</h2>
<p>I tried to develop a couple basic models here, but the following videos have gone above and beyond in explaining. I highly recommend checking them out as well!<br>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/fgBla7RepXU" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>
<br>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/Kas0tIxDvrg" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>
<br>

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/mCa0JXEwDEk" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>


<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/NKMHhm2Zbkw" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>
</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>COVID-19&#39;s Impacts</title>
      <link>https://kewbi.sh/blog/posts/200314/</link>
      <pubDate>14 Mar 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/200314/</guid>
      <description>On the strange state of the world.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>The past three months have been hectic - from starting this blog, to <a href="https://kewbish.github.io/blog/posts/200214/">winning Google Code-in</a>, and subsequently finding out it&rsquo;s <a href="https://codein.withgoogle.com/archive/#:~:text=Google%20Code%2Din%20was%20a,final%20contest%20in%20January%202020">cancelled</a>, to, of course, what everyone&rsquo;s talking about: <a href="https://www.who.int/emergencies/diseases/novel-coronavirus-2019">COVID-19</a>.</p>
<p>Many countries around the world have been hit <a href="https://worldometers.info/coronavirus/">far harder</a> than Canada, but in this post, I&rsquo;d like to talk about some of the impacts, both personal and on a larger scale, that this novel coronavirus has brought.</p>
<p><strong>NOTE:</strong> <em>I apologize if this post reads as a little alarmist and sad, but it reflects what I&rsquo;m thinking of right now, and I can&rsquo;t help but express that here. If you&rsquo;re going through some symptoms, call your local help line, or consult a professional for advice. One can&rsquo;t be safe enough.</em></p>
<h2 id="events-cancellations">Events Cancellations</h2>
<p>Many major events have been cancelled, including global developer conferences like <a href="https://developers.facebook.com/blog/post/2020/02/27/important-f8-2020-update/">F8</a>, <a href="https://www.vice.com/en_ca/article/qjde3m/game-developers-conference-cancelled-due-to-coronavirus-fears">GDC</a>, and <a href="https://www.cnbc.com/2020/03/12/coronavirus-microsoft-build-in-person-events-canceled.html">Microsoft Build</a>. I can&rsquo;t imagine what it must feel like to have spent time and money searching for, buying, and finally not being able to use their well-deserved tickets. Some of these conferences are moving online, where everyone can participate free of charge, which is an unexpected pro. It doesn&rsquo;t feel the same as a face-to-face networking session or panel, but at least it&rsquo;ll be able to reach more people this way.</p>
<p>I know I frequently humble-brag about this, but I&rsquo;m devastated that my GCI Trip got cancelled as well. We&rsquo;re being offered alternate prizes, and that makes up for some of it, but even with a videoconference (how will we arrange the times, with winners all across the globe), it doesn&rsquo;t replicate the same vibes as a four-day trip to meet new friends and bond. Seeing blurry 2MP faces through a screen, some of which will inevitably be in the middle of the night, versus cruising and Segwaying around San Francisco and Googleplex <em>just isn&rsquo;t the same</em>. As winners, we&rsquo;re left at the same level as the runners-ups, minus the chance to win and have a proper trip (if that&rsquo;ll even happen) next year.</p>
<p>Sorry about the salt. I&rsquo;m just a tad disappointed. I should stop apologizing - this is my blog after all.</p>
<p><img src="https://preview.redd.it/did6uo5npol41.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=a29ccf47f536511d9e13bb3a1057305e31ce7ae2" alt="Just one of the many memes we made."><br>
<em>Taken from u/ZeroDawn0D on <a href="https://www.reddit.com/r/GoogleCodeIn/comments/ffyjyp/rip/">Reddit</a></em></p>
<p>I know it&rsquo;s not supposed to matter, but it was a once-in-a-lifetime chance that I could have had. And now it&rsquo;s gone, all because of COVID-19. Health is crucial, but even our pleas to postpone went silenced. I guess life isn&rsquo;t fair.</p>
<h2 id="economic-impacts">Economic Impacts</h2>
<p>Though the economy&rsquo;s recent un-stonks can&rsquo;t be 100% attributed directly to COVID-19, seeing the <a href="https://g.co/kgs/3vodBh">Dow Jones</a> crash has been pretty terrifying. Hearing stories of people losing thousands, and the government implementing last-minute techniques is kind of surreal.</p>
<p>I recently saw <a href="https://www.youtube.com/watch?v=rjfO2AKEsA8">this video by Fireship</a>:

<div style="position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;">
  <iframe src="https://www.youtube.com/embed/rjfO2AKEsA8" style="position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;" allowfullscreen title="YouTube Video"></iframe>
</div>
</p>
<p>and it got me thinking about some of the future impacts. If the markets continue to fall, and demand for tech jobs drops further, I worry. I&rsquo;ll graduate university in six years, which seems like a long time. However, I&rsquo;ve been reading about the long-term effects of a recession, and I wonder if, when I enter the workforce, I&rsquo;ll be able to get a job. Apparently, the first years of your work affect your career, and how you end up in life heavily. I don&rsquo;t want my prospects to be crushed, just because I was born and left uni at an inopportune time.</p>
<h2 id="the-wrong-side">The Wrong Side</h2>
<p>It&rsquo;s a known statistic: 80% of coronavirus cases have <em>mild</em> symptoms. If you contract COVID-19, you&rsquo;re likely not to die, if you&rsquo;re healthy enough. I don&rsquo;t mean to belittle anyone&rsquo;s fears, if they have existing conditions or other issues, but I find that our efforts are being focused on the wrong area.</p>
<p>The way I see it, we focus on stocking up on toilet paper, non-perishables, and talk of washing our hands. But how many of us need to? The spread of COVID-19 is through people. People.</p>
<p>I&rsquo;m not sure exactly how to prevent the spread, but staying at home, taking courses online, and generally remaining in a sterile, safe space should be fine. Travel bans seem harsh, and may lead some to lie about where they&rsquo;ve actually been, but I can&rsquo;t help but note China&rsquo;s success in quarantining and cordoning off cities and provinces.</p>
<h2 id="unexpected-pros">Unexpected Pros</h2>
<p>I&rsquo;ve seen a couple glimpses on the news that pollution levels everywhere have dramatically dropped - and the sad thing is, this is where they should be, if we&rsquo;re to meet budgets and goals. COVID-19 has had devastating impacts, but I suppose this is one of the two smaller pros.</p>
<p>The other pro I&rsquo;d like to touch on is it the fact that developers, and other members of the workforce, have started working remotely. It doesn&rsquo;t work for all, but personally, remote, self-motivated and self-guided work will always be the most productive environment for me. That&rsquo;s why I&rsquo;m looking forward (? Should I?) to online classes. I truly appreciate the sacrifices and efforts of faculty and staff, and I sympathize with those who find that remote, online classes don&rsquo;t work well for them. I also would like to touch on the fact that for all those who work remote, there are also people who can&rsquo;t afford or don&rsquo;t have the option of working away from the office. It&rsquo;s a difficult balance, and as always, it&rsquo;ll benefit some while stranding others.</p>
<h2 id="personal-thoughts">Personal Thoughts</h2>
<p>My main reflection, through the struggles everyone&rsquo;s facing today, is how much time affects all of us. Just because I unfortunately entered <a href="https://universitytransition.ca">Transition</a> during COVID-19, just because I won <a href="https://g.co/gci">Code-in</a> in 2019-20; all this means that I&rsquo;ll be cheated out of something I was looking forward to.</p>
<p>Instead of spending my spring break out with friends (I mean, I likely wouldn&rsquo;t anyway, but let&rsquo;s pretend), I&rsquo;m self-isolating, watching the red numbers creep ever-higher, and the graphs grow exponentially.<br>
But it&rsquo;s alright. Life isn&rsquo;t fair, and life wasn&rsquo;t meant to be fair.</p>
<p>The state of the world right now is honestly scary. It feels truly like an apocalypse. Economy clinging to threads, a global pandemic sweeping across countries. And worst of all, I can&rsquo;t do more than scrub my hands and stay inside. I have to watch from my office, occasionally chatting and commiserating with my classmates online.</p>
<p>Everything changes, day by day, hour by hour. Just a couple days ago, Canada had less than a 100 cases, according to <a href="worldometers.info/coronavirus/">Worldometers</a>. Today (as of π day), we have over 250. The graphs show it all. Total active cases skyrocketing, and deaths rising to terrifying numbers.</p>
<p>What if I have a bit of a cough, a cold, perhaps even the flu? Any other time, I&rsquo;d stay home, rest up, just go through it. Now, even the slightest of symptoms sets off all the alarms. Should I go to the hospital and get tested? Can I trust these symptom charts? And even if one non-COVID-19 case decides to wait it out (rightfully), hospitals are flooded. Tests are running out, and in some countries, they&rsquo;re expensive, reducing the number of people who&rsquo;ll take them.
Is it the end of the world? There&rsquo;s no point in musing further. Just suppose we&rsquo;ll have to muster up and keep walking through life.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>#shecoded &#43; IWF</title>
      <link>https://kewbi.sh/blog/posts/200308/</link>
      <pubDate>04 Mar 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/200308/</guid>
      <description>On equality, equity, and #shecoded.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>The <code>#shecoded</code> movement, as far as I can see, started on popular developer blogging site <a href="https://dev.to">Dev.to</a>. 
<a href="https://www.internationalwomensday.com/">Women&rsquo;s Day</a> is on March 8th, and female- and non-binary identifying individuals are encouraged to share their developer stories. See some of the other stories <a href="https://dev.to/shecoded">on their landing page</a>, and check them out!</p>
<h2 id="nevertheless-kewbish-coded">Nevertheless, Kewbish Coded</h2>
<p>Online, I go by Kewbish, so I&rsquo;ll continue that here, I guess. I&rsquo;m from the PNW, Canada, and it&rsquo;s been a great developer journey for me.</p>
<p>I started programming at the wee age of 11, and it&rsquo;s only been a few years since I started developing. It seems like it&rsquo;s been ages-</p>
<p>I began my journey as a budding game developer, working with <a href="https://www.yoyogames.com/gamemaker">Gamemaker, back when it was still free.</a>. Next, my parents brought me to a local coding school, where I bumbled through <a href="https://unity.com">Unity</a> for a few years. However, I was tired of learning in this traditional environment, and decided to strike out on my own, creating simple web pages with vanilla HTML and CSS. I then had a console program stage, where I created bad ASCII games with C#. Frustrated with the lack of libraries and obvious applications, I moved to Python, and I guess that brings me to where I am. (Started with open source rather recently as well, due to <a href="https://hacktoberfest.digitalocean.com">Hacktober</a> and other initiatives, like <a href="https://kewbish.github.io/blog/posts/200214/">Google Code-in</a>.)</p>
<p>The primary technologies I work with are:<br>
- <a href="https://python.org">Python</a> - usually for data science with <a href="https://numpy.org">numpy</a> and <a href="https://matplotlib.org">matplotlib</a> and GUIs with <a href="https://wiki.python.org/moin/TkInter">Tkinter</a> and recently, <a href="https://kivy.org">Kivy</a>
- Web stuff - for now, HTML and CSS, planning to look into <a href="https://sass-lang.com">SASS</a> and <a href="https://vuejs.org">Vue</a> soon
- Whatever else I want to learn: right now, I have a really huge list, from <a href="https://isocpp.org">C++</a> to <a href="https://flutter.dev">Flutter</a> to JS frameworks, and everything in between.</p>
<p>Learning is a big part of what I&rsquo;d like to blog about in the future, and why I began writing devlogs again. I love the idea of <a href="https://www.swyx.io/writing/learn-in-public/">public learning</a>, and that&rsquo;s a philosophy powering quite a bit of my work.</p>
<p>I&rsquo;m still young (criticize me for wasting my life away on the interwebs all you want), so I haven&rsquo;t experienced the constant pressure spurred by my gender identity that seems to be prevalent in every tech company, according to the Internet. I can&rsquo;t say I&rsquo;ve been 100% respected everywhere I apply myself, but it&rsquo;s not hard for me to brush remarks off. I shouldn&rsquo;t have to tolerate them, but in the meantime, I think that ignoring the voices and powering through is a solid strategy. The posts on the Internet are many, but I&rsquo;m sure that moving forward, the number of allies, equitable companies, and good experiences will number even more.</p>
<h2 id="equality-in-tech-is">Equality in tech is…</h2>
<p>Equality in tech is the implementation of equity where able, while not then over-favouring one race/gender/identity over others.<br>
Equality in tech is the power to speak out, and the power to listen to and respect opinions that are not your own.<br>
Equality in tech is a hand-up when needed, and offering that help to others when they, in turn, need it.<br>
Equality in tech is the opportunities given equally and equitably, blind to any forms of discrimination.</p>
<h2 id="im-an-expert-at">I&rsquo;m an expert at…</h2>
<p>Nothing, really. I&rsquo;ve come a long way from the smol kewbish I once was, but at the same time, I&rsquo;ve so far to go. I have time, and I&rsquo;ll make the most of it. That&rsquo;s all I can do.</p>
<h2 id="my-advice-for-allies">My advice for allies…</h2>
<p>There is no formula where a company can plug in an X and get a reliable derivative of allies or something, but I can try to give some advice.</p>
<p>Work with the person, as a person. Focus on what they&rsquo;ve done well, but encourage them to improve and step out of their comfort zone.</p>
<p>Providing support is a good step. Support alone can make a huge difference. However, evaluate how someone receiving support feels getting the help they need, be it a code review or a mental health break. Put yourself in their shoes.</p>
<p>Include everyone, if possible. Equity and equality have many values I agree with, but the form of equality present in certain work environments or events don&rsquo;t work. Give underrepresented groups opportunities, but balance these. Does it make sense for an all-girls learning group to convene, while males aren&rsquo;t given this opportunity at all? Just something to consider.</p>
<h2 id="the-most-rewarding-thing-ive-done-this-year-is">The most rewarding thing I&rsquo;ve done this year is…</h2>
<p>I&rsquo;ve said this before, and I&rsquo;ll say it again: Google Code-in has been an amazing opportunity. Working through all my obstacles, learning to persevere, and pushing through - it all paid off. I&rsquo;m super happy to represent as one of the few women, and one of two winners from Canada. The message here really is to take that first step, even if you don&rsquo;t want to. I&rsquo;d also consider this my <code>recently-i-overcame</code> section, due to the sheer literage of tears shed and heightened heart rate.</p>
<h2 id="conclusion">Conclusion</h2>
<p>To all of us, working through struggles, be they material or emotional: we will prevail. To all of us, considering exploring something new: do not be afraid. To all of us, living, developing, and creating: we face challenges, but nevertheless, we code.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>VDSF Experience (and beyond!)</title>
      <link>https://kewbi.sh/blog/posts/200301/</link>
      <pubDate>29 Feb 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/200301/</guid>
      <description>On the vibes at the Vancouver District Science Fair.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>After a good few days of questioning my sanity, I finally attended the <a href="https://blogs.vsb.bc.ca/vdsf/">Vancouver District Science Fair</a>.</p>
<p>There, I presented my Audio Visual Random Number Generation project - more about that later.</p>
<p><img src="https://blogs.vsb.bc.ca/vdsf/files/2019/06/cropped-VDSF2018.floor3_.jpg" alt="Vancouver District Science Fair">
<em>Taken from <a href="https://blogs.vsb.bc.ca/vdsf/">VDSF blog</a></em></p>
<h2 id="project">Project</h2>
<p>A full writeup can be found <a href="https://kewbish.github.io/AVRNG">here</a>.</p>
<p>My AVRNG innovates off past video TRNGS, incorporating an additional audio entropy layer. Using security video footage, I&rsquo;ve created a true random number generator to generate encryption keys cheaply and easily. Repurposing scene detection technology, I detect movement / unique scenes in the video, and split the visuals apart from the sound files. The separate data streams are passed through a <a href="https://en.wikipedia.org/wiki/Hash_function">hash function</a>, specifically the <a href="https://en.wikipedia.org/wiki/Skein_(hash_function)">Skein</a> function. The resulting &lsquo;signatures&rsquo; are intertwined together, along with the least-significant-bits (or nanoseconds) of the computer clock at runtime. Due to inherent entropy in the camera, microphone, and clock sensors, the resulting algorithm is a <a href="https://en.wikipedia.org/wiki/Hardware_random_number_generator">True Random Number Generator</a>.</p>
<p>By reusing what many individuals, families, and businesses already have, more people can benefit from an additional layer of data security.</p>
<p>In the future, I&rsquo;m looking into creating a one-click interface for companies to constantly pipe video from security footage into the AVRNG using Webhooks, and continuously generate cryptographically secure keys for use in encryption of data.</p>
<h2 id="preparation">Preparation</h2>
<p>I&rsquo;d been working since October 2019 on the AVRNG (there was a minor GCI break and because I had so much time, the project was pretty well prepared.</p>
<p>I&rsquo;ll admit, the entire week leading up to science fair was an <em>experience</em>, to say the least. We&rsquo;d gone up to <a href="https://whistlerblackcomb.com">Whistler</a> for the days before, so I&rsquo;d warrant that I wasn&rsquo;t the only <a href="https://universitytransition.ca">Transitionite</a> speedrunning their backboard at 1000 the day of.</p>
<p>My public speaking skills have never been the best, but I guess talking about something you&rsquo;re passionate about does help. I wrote a quick set of cue cards, but I didn&rsquo;t end up having to reference them often, surprisingly.</p>
<p>A couple tips:</p>
<ul>
<li>Actually start your project early. It takes a lot longer to create something coherent than you&rsquo;d think.</li>
<li>The backboard takes a while too. Sure, it doesn&rsquo;t seem like it&rsquo;ll take ages to do, but when you over-analyze the layout, secondary colours, and composition / juxtaposition, it does take time. Same with the header.</li>
<li>Make an outline, not a speech. For me, at least, creating an outline covering the overall topics, like what randomness is, and the algorithm, rather than writing out sentences that I&rsquo;d try to weave in. Perhaps add a couple keywords as well; the judges might be looking for a couple.</li>
</ul>
<h2 id="design">Design</h2>
<p>I don&rsquo;t like my header. I&rsquo;m going to start off with that, because I had an existential crisis about the contrast between the dark blue and the cutout letters. (I don&rsquo;t have photos but you can imagine it- it&rsquo;s bad-)</p>
<p>Otherwise, my <a href="https://canva.com">Canva</a> skills came in handy, and if I do say so myself, it was a rather <em>aesthetic display</em>. In the future, I&rsquo;m going to add some randomness symbols, perhaps a dice or other graphics. Compared to other boards, mine was rather bland and text-heavy, and I think that design is something I can definitely improve on. (Besides, another excuse to use Canva and flex my attempts at graphic design)</p>
<p>Disregarding the physical design, the experiment / innovation&rsquo;s design is crucial as well. From what I&rsquo;ve read, the scientific logic behind the project doesn&rsquo;t matter as much in lower grades, but as a Senior, the scientific method does play a part. This is something I&rsquo;ve got to work on in the future: creating a layman&rsquo;s lab report to condense and present. Personally, I don&rsquo;t think I did a good enough job addressing possible questions and confusing points during my oral presentation, though they were covered in the backboard.</p>
<h2 id="judging">Judging</h2>
<p>Each display is judged by four judges, and in my case, they came in two groups of two.</p>
<p>I&rsquo;m not going to expand on this a lot (<em>imbadatsocialskillsandyallcantconvincemeotherwise</em>) but the first set wasn&rsquo;t very good - I was missing a couple speaking points that I addressed in questions later. The second set went a lot better (I <em>innovated</em> on my speech haha), and was an opportunity for me to quickly revise and adapt my speech. With more preparation (<del>I didn&rsquo;t speedrun my speech in 10 minutes alright</del>), I think I&rsquo;d have presented more effectively, but I&rsquo;ll see when I get my feedback slips from the judges. Maybe I did alright. ¯_(ツ)_/¯</p>
<h2 id="activities">Activities</h2>
<p>With a couple other Transitionites, I headed to the Gamifying Global Warming workshop, where we explored the concept of gamifying and how we could apply this to global warming. My fellow Transitionites and I came up with an app revolving around the idea of taking shorter showers to reduce water consumption. (The app was called <code>lim 5.3 + x as x-&gt;0+</code>, if anyone&rsquo;s wondering) The main idea was that the app would run in the background, detecting water noises and starting timers as it went. If a shower / toilet flush / dishes situation took longer than whatever goal was currently set (up to 5.3 min, hence the name), we&rsquo;d guilt the user with sad statistics to the tune of &lsquo;You used enough water to feed X families for Y weeks in Z country&rsquo;. As well, we toyed with the idea of statistic graphs a la <a href="https://www.reddit.com/r/fitbit/comments/a3fi51/should_i_take_these_statistics_from_my_fitbit/">FitBit&rsquo;s activity trackers</a>. We came up with tonnes of ridiculous ideas, and it was a pretty e🅱️ic workshop.</p>
<p>Walking around to see what others had created was interesting to see - some teams had <em>actual proper games / ideas</em> - whereas we just made a time bomb. Gaming has always been a passion of mine, so learning about techniques for good gamification experiences was intriguing.</p>
<h2 id="awards-ceremony">Awards Ceremony</h2>
<p><em>this entire section is a flex and there&rsquo;s nothing you can do about it</em></p>
<p>After our activities, we headed down to the awards ceremony. They announced student choice and handed out Rubik&rsquo;s Cubes, holding an impromptu competition to solve the <em>terrible</em> cubes in the meantime while they compiled scores.</p>
<p>Transition did amazing, with lots of projects going through to the <a href="http://gvrsf.ca/">GVRSF</a>, and I&rsquo;m excited to say I&rsquo;m one of them. (Somehow, even the students that spedran their backboard <em>in the hallway 5 minutes before the fair</em> got into GVRSF. We live in a society.) For the next bit, I&rsquo;ll be working on improving my project, and all the associated cool things - time for more abstract writing!</p>
<p>Thank you VDSF and Langara for hosting the event - and thanks for the pin and cube (of which I will never use and instead hoard somewhere in my cabinets)</p>
<p>VDSF was an amazing experience, and I&rsquo;m nervous but thrilled for the GVRSF (which will be at <a href="https://ubc.ca">UBC</a> - home territory). I look forward to seeing all the projects, and congrats to everyone who participated!<br>
(Also what the heck, VDSF, where&rsquo;s the Kahoot I was promised on the schedule? Years of Reach training, wasted!)</p>
<h2 id="currently">Currently</h2>
<p>I&rsquo;ve been neglecting <a href="https://github.com/kewbish/opus">Opus</a> for a while to work on the AVRNG, but I&rsquo;m going to begin working on it seriously after GVRSF (and perhaps in between now and then). I&rsquo;ve decided to stick with <a href="https://kivy.org">Kivy</a>, but that now entails learning the Kivy language and how the framework works. Can&rsquo;t wait to get some time to fully devote to the project, but I guess we&rsquo;re back to the science fair grind for now. Besides, the additional reflection time will allow me to do some more research on methods and app design principles, as well as look into other features and designs I&rsquo;d like to implement.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Hugo</title>
      <link>https://kewbi.sh/blog/posts/200221/</link>
      <pubDate>21 Feb 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/200221/</guid>
      <description>On migrating to a static site generator.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Recently, I began a new blog, hosted on GitHub Pages over <a href="http://kewbish.github.io/blog">here</a>. In the past, I&rsquo;ve tried (and eventually failed) to set up a devlog section on my site, and one of the main pain points was the repetitiveness of creating and pushing content. I had a template with very bare-bones HTML and CSS that I copied and pasted my work into, but this was annoying to constantly try to move my plaintext into rich HTML content. I ended up destroying the repo because it just became a burden to write for and maintain content for, which turned me off blogging or creating any internet content, basically, for about a year. However, with my <a href="https://kewbish.github.io/blog/posts/200214/">recent GCI win</a>, I felt that I needed to step up my digital presence and start devlogging for real.</p>
<h2 id="looking-for-a-ssg">Looking for a SSG</h2>
<p>Firmly entrenched in the idea of starting a blog and <a href="https://www.swyx.io/writing/learn-in-public/">publicly learning</a>, I began searching for some sort of generation tool.</p>
<p>Briefly, I considered biting the bullet and starting a <a href="https://wordpress.com">Wordpress</a> site. However, after a couple seconds of reconsidering (goddammit Kewbish, do you really want to do this?), I immediately discarded the idea. Having worked with Wordpress (and <a href="https://lienotly.weebly.com">Weebly, if anyone cares</a>), I knew how boring creating a site there would be, especially without the ability to fine-tune files and configure my site exactly as I liked it. As well, it would add a lot of bloat and annoyance to initial setup. Besides, then I&rsquo;d have to deal with another subdomain - (shut up, I&rsquo;ll get a domain soon).</p>
<p>Platforms like <a href="https://medium.com">Medium</a> and <a href="https://dev.to">Dev.to</a> allow an easy startup, but it wouldn&rsquo;t allow me to change much styling, and I&rsquo;d either get stuck behind a paywall somewhere (Medium) or be limited quite a bit to a developer audience (Dev.to). These platforms would give me a great starting readerbase and starting point, though I guess my inner demon-angel wouldn&rsquo;t let me do anything less than sink a week into learning something new.</p>
<p>The logical next step for me was a SSG (<strong>S</strong>tatic <strong>S</strong>ite <strong>G</strong>enerator). I&rsquo;d heard of <a href="https://jekyllrb.com/">Jekyll</a>, and its integration with GitHub Pages made it attractive, but the startup of having to install Ruby, a language I&rsquo;d not used (and frankly, don&rsquo;t plan on using) made me reluctant.</p>
<p><a href="https://gatsbyjs.org">Gatsby</a> had a great community, and its clear documentation brought it up as a good choice. However, despite my experience with web development, I&rsquo;ve chosen to steer relatively far away from JS-based tools (and haven&rsquo;t touched Node at all yet. One of the items on my ever-growing to-do list.) Therefore, I felt I should keep looking.</p>
<h2 id="choosing-hugo">Choosing Hugo</h2>
<p>Enter <a href="https://gohugo.io">Hugo</a>. Hugo seemed like an amazing compromise: easy startup (though I&rsquo;d have to handcode a theme) and relatively low bloatage. (As well, the community around the tool and its frequent maintenance made it extremely attractive.)</p>
<p><img src="https://duc-sebastien.com/img/blog/2019-04/personal-website/intro.png" alt="Hugo, a static site generator"><br>
<em>Taken from <a href="https://duc-sebastien.com/img/blog/2019-04/personal-website/">Sebastien Duc.</a></em><br>
With Hugo in hand, I set up to create the blog of my dreams.</p>
<h2 id="site-setup">Site Setup</h2>
<p>I&rsquo;m familiar with <a href="https://daringfireball.net/projects/markdown/syntax">Markdown</a>, so writing for Hugo&rsquo;s Markdown-based generator wasn&rsquo;t a challenge. In fact, the most difficult part of the whole setup was probably theme development.</p>
<p><strong>Theme Development</strong> - The prideful human I am, I couldn&rsquo;t just use a <em>premade theme</em> (<a href="https://themes.gohugo.io/">of which there are plenty, if you were wondering</a>). (Oh, the <em>horror</em>.)</p>
<p>I started off then with a basic theme, and created the Markdown first. Then, I began styling my site with some basic CSS. It&rsquo;s still pretty bare-bones, but I feel like it&rsquo;s good enough for my basic purposes.</p>
<p>I&rsquo;m still pretty new to <a href="https://golang.org/pkg/text/template/">Go&rsquo;s Templating tools</a>, but the Hugo documentation more-or-less described most of the variables I needed, as well as linking to forum posts detailing some of the features I implemented. Again, the <a href="https://discourse.gohugo.io">community</a> is amazing, and super active.</p>
<p><strong>Deployment</strong> - <code>++</code> to Hugo for providing a commit script. I have a recreation <a href="https://github.com/kewbish/blog/blob/master/deploy-blog.cmd">here (💀 no longer exists)</a> for their <code>gh-pages</code> deployment solution, for all y&rsquo;all Windows folks. Overall, this part&rsquo;s relatively easy to follow, as long as you&rsquo;re Terminal / Command Prompt savvy.</p>
<p>I would have liked some sort of inbuilt hugo command for this, but porting the bash script to batch wasn&rsquo;t difficult, and generally ended up fine. I definitely recommend familiarizing yourself with <a href="https://git-scm.com/docs/git-worktree">worktree</a> before attempting a GitHub Pages deploy.</p>
<h2 id="using-a-ssg">Using a SSG</h2>
<p>Having had both a handcoded blog and now this SSG site, I definitely prefer the workflow of the SSG. The ability to create custom themes brings the aesthetics to the level of a handcoded website, adding the <a href="https://en.wikipedia.org/wiki/Don%27t_repeat_yourself">DRY principle</a>. Simply creating and formatting a MD file is a lot easier to manage than copy-pasting a bunch of components from hand-made templates. Besides, Hugo allows <a href="https://gohugo.io/templates/partials/">partials</a> and other inbuilt templates-inside-templates, and <em>everything is customizable</em>.</p>
<p>The following are some common cons, and what I have to say.
- <strong>SSGs are difficult to learn.</strong> False, actually. If you&rsquo;ve some Markdown knowledge, and basic experience with HTMl / CSS (what you&rsquo;d need for a handcoded approach anyway), you can learn Hugo. Hugo, in fact, is packaged into a single binary, and doesn&rsquo;t require other installs, unlike some other SSGs.<br>
- <strong>Every time I deploy, I have to rebuild.</strong> This is true, but I find the Hugo workflow better than the handcoded approach, especially with automation scripts.<br>
- <strong>SSGs work with files, instead of a database.</strong> This is a minor pain point, and means that as my blog grows, I&rsquo;ll need to manage my files well, instead of just tucking them into a database somewhere. However, I argue that this leads you to think about file structure design before the issues build up, and construct a scalable system in the beginning.<br>
- <strong>No one&rsquo;s ever heard of SSGs besides technical people.</strong> Wordpress, for sure, is a major player in the non-handcoded-site industry, but I feel the powers of open source and community outweigh the market strategy. Anyways, if I can build the same thing, there&rsquo;s no point in switching if all else equal.<br>
- <strong>Team and user management is nonexistent.</strong> In the traditional sense, yes, there can&rsquo;t be <code>admin</code>s and <code>writer</code>s and whatevers as you do with Wordpress or Weebly. However, hosting on a platform like GitHub Pages opens up even more possibilities, giving you the tools to collaborate even more.</p>
<h2 id="conclusion">Conclusion</h2>
<p>My migration process (or initialization process) was relatively painless, and I prefer the workflow to that of a handcoded experience. Hugo provides a great, open source framework for blogging and deployment to GitHub Pages (major <code>++</code>), which is what I use anyway.</p>
<p>Stop by and check the <a href="https://kewbish.github.io/blog">blog</a> out, and if there are any errors anywhere, open an issue and let me know!</p>
<h2 id="currently">Currently</h2>
<p>I&rsquo;ve just finished <a href="https://g.co/gci">GCI</a>, and have the <a href="https://vdsf.sfiab.com">VDSF</a> soon, so I&rsquo;m speedrunning my project and polishing it up.</p>
<p>Otherwise, I&rsquo;m in a bit of a quandary on projects, but I think I&rsquo;m going to continue <a href="https://github.com/kewbish/opus">Opus</a>, a book tracking system I&rsquo;ll build based on what I need personally. For that project, I&rsquo;ll be using <a href="https://kivy.org">Kivy</a> to create an iOS app (don&rsquo;t worry, it&rsquo;ll be on Android too, but I won&rsquo;t release it on the Play Store).</p>
<p>Recently, I&rsquo;ve been thinking more about what I&rsquo;d like to specialize in - web development, Python, some combination of the two, or delve deeper into lower-level languages and technologies. For now, I&rsquo;ll continue with what I&rsquo;m familiar with, which happens to be web technologies, but I&rsquo;m seriously considering learning C++ or perhaps some sort of machine learning project. <a href="https://tensorflow.org">Tensorflow&rsquo;s</a> been on my list for ages as well.<br>
Just some thoughts.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>Google Code-in &#39;19 Experience</title>
      <link>https://kewbi.sh/blog/posts/200214/</link>
      <pubDate>08 Feb 2020</pubDate>
      
      <guid>https://kewbi.sh/blog/posts/200214/</guid>
      <description>On my experience during Google&#39;s 2019 Code-in.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Wonderful, I thought, as I woke up. More homework.</p>
<p>But to my surprise, when I checked my email, I found out that:<br>
<img src="https://i.imgur.com/A9UCpB9.png" alt="Google Code-in Winner!"></p>
<p>Thank you to all the Google Code-in team for making this opportunity possible, to the mentors for volunteering their time to help us grow as developers, and to the awesome Liquid Galaxy community for being super welcoming and supportive!</p>
<h2 id="what-is-google-code-in">What is Google Code-in?</h2>
<p><a href="http://g.co/gci">Google Code-in</a> is a great first stop for pre-university students interested in technology to begin contributing to something called <a href="https://opensource.org/"><strong>open source</strong></a>. Open source operates under the idea that work should be available for anyone to collaborate on and download to use freely. Some examples of open source that you might be familiar with include <a href="https://gimp.org">GIMP</a>, a popular image editor, and <a href="https://blender.org">Blender</a>, a 3D modelling tool.</p>
<p>Several open source organizations sign up to mentor for <a href="https://summerofcode.withgoogle.com/">Google Summer of Code</a>, another great program for university developers, and based on their success there, are invited to work with Google Code-in. My organization was <a href="https://liquidgalaxy.eu">Liquid Galaxy</a>, a super cool panoramic display software based off Google Earth that uses networking tools to orient several displays around one.</p>
<p><img src="https://4.bp.blogspot.com/-7b7WffM7F1Y/W9CZdmA0llI/AAAAAAAGsAU/YJvQxTaSgOIX6uDBwT96vrSFA5U_eFvAACLcBGAs/s1600/lleida-al-liquidgalaxy.jpg" alt="Liquid Galaxy Display"><br>
<em>Taken from <a href="https://www.liquidgalaxy.eu/2018/11/the-liquid-galaxy.html">Liquid Galaxy&rsquo;s site.</a></em></p>
<p>For seven weeks, students work to complete a variety of tasks, involving everything from coding, design, testing, and documentation. At the end, mentors from each organization choose 6 finalists: two of which become <a href="https://g.co/gci">Grand Prize Winners</a>. I&rsquo;m honoured to say I became one of them!</p>
<h2 id="my-journey">My Journey</h2>
<p>On December 2nd, I luckily had a day off school, so I began registration right at 1000 PST. From there, I spent the next seven weeks fully immersed in development and learning.</p>
<p>I began with easier <a href="https://daringfireball.net/projects/markdown/">Markdown</a>, documentation, design, and testing tasks. One tip: balance easier tasks with more advanced tasks. This will allow you to continue working and making progress on tasks while also allowing opportunities to explore new tools that you&rsquo;re unfamiliar with.</p>
<p>Throughout the later half of the competition, I began familiarizing myself with the Liquid Galaxy system and virtual machines, which are mini-computers running on your PC. I was completely new to this, so I had a few issues along the way, but managed to figure it out with the guidance of mentors and fellow students. From there, I built a variety of controllers and scripts to work with the Liquid Galaxy, as well as testing extension apps and even building one of my own. See <a href="#favourite-tasks">Favourite Tasks</a> for more! I found the more difficult tasks challenging (as I didn&rsquo;t have much experience with the technologies used) but good chances to learn a new technology (such as VMs and networking protocols). Another tip: if your organization has marked some tasks as advanced / top / important, take the challenge on! Mentors will be more than happy to support you through your learning process, and the multiple &lsquo;aha&rsquo; moments will be remembered forever.</p>
<p>Unfortunately, Google Code-in overlapped with holidays, so I did have to sacrifice some time there. As well, school remained an important priority, and I&rsquo;m in a pretty intensive program. Overall, I&rsquo;m still really proud of the effort I managed to put in.</p>
<h2 id="favourite-tasks">Favourite Tasks</h2>
<p>Some of my favourite tasks included:<br>
- Building an <a href="https://ansible.com">Ansible</a> installation script. I had no idea how to use Ansible initially. My first submission was a half-hearted attempt at a solution, but I managed to develop a full-fledged Ansible installation script for Liquid Galaxy. Thank you orestes, my mentor for the task, for guiding me through the process of learning and indicating areas where I could substitute commands! I ended up really liking the task and plan to use Ansible in the future somewhere and somehow.<br>
- Creating an <a href="https://arduino.cc">Arduino</a> controller (or two, or five). This really allowed me to further examine the command structure of how the Liquid Galaxy could be controlled, and let me explore the world of electronics and serial communication, as well as networking. Lucky I had a WiFi-compatible Arduino from my birthday :) Definitely plan on creating similar controllers in the future.<br>
<a href="https://r4---sn-nx57ynlz.c.drive.google.com/videoplayback?expire=1581213723&amp;ei=2y8_XoeDL5CauAWIopLoAw&amp;ip=96.49.195.30&amp;cp=QVNNU0NfUldQRFhOOmx6cExpTFFtSWdLS2dKWmttUWRaak9ZMGVqSFVlM2FWRmY0REdDZG15T2g&amp;id=3c81a7bf232eb3df&amp;itag=59&amp;source=webdrive&amp;requiressl=yes&amp;mm=30&amp;mn=sn-nx57ynlz&amp;ms=nxu&amp;mv=m&amp;mvi=3&amp;pl=22&amp;sc=yes&amp;ttl=transient&amp;susc=dr&amp;driveid=1r1IRBQYJ1RDaZ3OEvmw5rg1QclV6uVGs&amp;app=texmex&amp;mime=video/mp4&amp;dur=60.580&amp;lmt=1579233592172742&amp;mt=1581199219&amp;sparams=expire,ei,ip,cp,id,itag,source,requiressl,ttl,susc,driveid,app,mime,dur,lmt&amp;sig=ALgxI2wwRAIgKOwEZXDqMR5nE6O6EAAY61Ortrn4wQYU0SvP7kCjTCICIEU4q9TFTb1mwTOK91rljiNOCUKpY-O_iZZXDCvKlGgw&amp;lsparams=mm,mn,ms,mv,mvi,pl,sc&amp;lsig=AHylml4wRAIgcZoN9JZGlhdRxZ2tqTKXr8OcdhjWPzztXgeZdqFbxroCIG5zuzl7hDB3b3NebVRkwGNxBDVz1CC0ngdbp9C0-ciI&amp;cpn=3eyPyDKUf5m-IldB&amp;c=WEB_EMBEDDED_PLAYER&amp;cver=20200207">See my design here!</a><br>
- Revisiting <a href="https://unity.com">Unity</a> to make a presentation. I&rsquo;d taken Unity classes in the past but basically forgotten about it. I enjoyed developing the RPG-like text system, and creating a relatively-reusable controller script for the game system. In general, it was a super cool re-introduction to Unity, and maybe I&rsquo;ll make games for projects in the future.<br>
- Installing Liquid Galaxy 3 times. First time, I was using <a href="https://docs.microsoft.com/en-us/windows/wsl/install-win10">WSL</a>, which obviously wouldn&rsquo;t work, but I didn&rsquo;t want to get into <a href="http://virtualbox.org">VirtualBox</a>, which seemed super scary at the time. (Spoiler alert: it wasn&rsquo;t.) Second time, I was using install.sh and an improperly configured NAT network. Because I was a newb, it was a little frustrating, but I eventually switched to a promiscuous Bridged network and a drivers.ini setup. Finally, third time&rsquo;s the charm, and I managed to get it to work. The &lsquo;aha&rsquo; moment was an amazing feeling, and I&rsquo;ve managed to get it to work 100% of the time ever since.</p>
<h2 id="community">Community</h2>
<p>The Liquid Galaxy community was honestly an amazing part of the whole experience. Whenever I had a question, I knew they were there to answer, and if not, they&rsquo;d give advice on how they tried to fix it, and together, we&rsquo;d somehow finagle a solution. Everyone was super welcoming and happy to help, which was a godsend when I was trying to figure out where the settings button was… (oops!)</p>
<p>Sadly, the active community&rsquo;s getting a little smaller, but we&rsquo;re still talking and sharing thoughts!</p>
<h2 id="women-in-tech">Women in Tech</h2>
<p>As a female POC in tech, I&rsquo;ve heard <a href="https://www.reddit.com/r/TwoXChromosomes/comments/9ock1w/my_experience_as_a_female_engineer_in_the_tech/">countless stories of the discrimination in workplaces</a>. However, open source, especially the community around GCI, seems to be really welcoming and accepting of everyone. I even got this in the Slack:</p>
<blockquote>
<p>Open Source is for everyone, regardless of race, religion, etc.</p>
</blockquote>
<p>Which just goes to show how kind everyone is.</p>
<p>To all the women / POCs out there: if you&rsquo;re thinking of jumping into development, don&rsquo;t be afraid. My personal experiences have been eh at times, but open source is an amazing first place to contribute. The whole point of open source is that it&rsquo;s for everyone, regardless of price, and regardless of race / gender / orientation / religion / etc.</p>
<p>I&rsquo;m really happy that I&rsquo;m able to represent a visible minority at Google Code-in, and to represent at the Winner&rsquo;s trip! Haven&rsquo;t managed to get other statistics about gender diversity at GCI, but check in at the <a href="https://opensource.googleblog.com/2020/04/a-milestone-to-celebrate-10-years-of-gci.html">Google Open Source blog</a> for more.</p>
<h2 id="mentality">Mentality</h2>
<p>Going through Google Code-in, it&rsquo;s important to consider it a <strong>learning opportunity</strong>. The winner&rsquo;s trip may be amazing motivation, but first and foremost, try to learn. It&rsquo;s important to try tasks above your task level and explore as many technologies as you&rsquo;d like, and the organization will evaluate your willingness to learn as such. Google itself points out</p>
<blockquote>
<p>It is possible that someone who completed 15 challenging tasks could be chosen as a Grand Prize Winner over someone who completed 35 trivial tasks.</p>
</blockquote>
<p>Keeping in mind that you&rsquo;ll have to be Top 20 to be considered, you&rsquo;ll need to do quality work if you&rsquo;d like to be selected as a finalist. Regardless, doing good work is more important than winning!</p>
<h2 id="conclusion">Conclusion</h2>
<p>Overall, I&rsquo;m extremely happy to be one of the <a href="https://opensource.googleblog.com/2020/02/announcing-our-google-code-in-2019.html">winners</a>, and congratulations to all the other students, especially those in Liquid Galaxy and Dylan, my fellow winner. (See you in June! :) ) As well, congrats to Alvii_07, mobiusdonut, Janiru Semitha, and Merul Dhiman, our finalists! (Kudos to kiminonawa, my fellow GCI commiserator! You did great and now you&rsquo;re going to win CCC&hellip; ) Special thanks to the mentors for your time and support, and for everyone who participated for making Google Code-in amazing!</p>
<p>Thank you to my parents and friends for putting up with my mental instability during these seven weeks - you know who you are.</p>
<p>I&rsquo;ll be back with another post in June, highlighting my trip to the Google headquarters.</p>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
