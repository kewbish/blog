<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Yours, Kewbish - a collection of articles on tech and thought.</title>
    <link>https://kewbi.sh/blog/</link>
    <description>Latest Yours, Kewbish posts</description>
    <managingEditor>(Emilie Ma (Kewbish))</managingEditor>
    
	<atom:link href="https://kewbi.sh/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Webring²</title>
      <link>https://kewbi.sh/blog/posts/240811/</link>
      <pubDate>11 Aug 2024</pubDate>
      <author>Emilie Ma (Kewbish)</author>
      <description>On ring fingers and finger prints.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Earlier in April, I was preparing for <a href="https://kewbi.sh/blog/posts/240602/">my first conference talk</a>. Not quite knowing what to expect, I thought there&rsquo;d be plenty of networking and job opportunities and swag. I was right on only one of these counts (spoiler: it was the merch)<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>But when I&rsquo;d just been accepted, I thought I&rsquo;d be hitting up recruiters left and right on the showcase floor. I printed ten paper copies of my resume, and if that wasn&rsquo;t enough, I also ordered a NFC ring to flash my personal website onto. This way, when people wanted to learn more, they&rsquo;d be able to tap their phone against the ring to bring up my site, and I wouldn&rsquo;t have to fumble around typing my LinkedIn URL or pulling crumpled paper resumes out. I thought it&rsquo;d be a memorable way to leave a first impression: look, this candidate not only knows about web and distributed systems, but is making their resume available to me in a way I&rsquo;ve never seen before! I chose a slick double-sided titanium ring off <a href="https://store.nfcring.com/products/signature?variant=602072773">nfcring.com</a> and giddily wrote my site URL onto both chips.</p>
<p>Suffice it to say that no one scanned my ring during the conference. However, I still had the ring, and I wasn&rsquo;t about to wear it every day in the deranged hope I&rsquo;d be able to organically sneak it into conversation one day. I wanted to make a little project out of the ring, and after some very Emilie-core wordplay brainstorming, I happened upon the idea of a webring ring. You&rsquo;d be able to scan it, just like when I flashed my site URL onto it, but it&rsquo;d lead to a <a href="https://en.wikipedia.org/wiki/Webring">webring</a> of me and my friends&rsquo; blogs, and you&rsquo;d be able to navigate between sites on the ring by scanning it multiple times.</p>
<p>It didn&rsquo;t take long at all to build — a weekend and a Cloudflare Pages deep dive later, my webring ring was ready. I&rsquo;m calling it Webring², because it&rsquo;s a <code>web(ring)(ring) = web(ring)²</code>. Here&rsquo;s a demo video:</p>


<div style="display: flex; justify-content: center; margin-bottom: 1em">
	<video src="https://github.com/user-attachments/assets/0d54fa1d-c8c1-447f-80c4-9fa6e20035cd" autoplay loop>
</div>


<p>The source is available <a href="https://github.com/kewbish/webringsquared">here</a>. In this blog post, I&rsquo;ll go through the three main components of the project: the webring site itself, the mechanism to open different pages each time you scanned it, and the physical NFC ring. Along the way, I&rsquo;ll cover the history of early web search engines, some niche behaviour of WebRTC, and odd body modifications.</p>
<h2 id="if-you-searched-it-then-you-shouldve-put-a-ring-on-it">If you searched it, then you should&rsquo;ve put a ring on it</h2>
<p><a href="https://en.wikipedia.org/wiki/Webring">Webrings</a> are a collection of sites that link to each other in a cycle. Each site has &rsquo;next&rsquo; and &lsquo;previous&rsquo; links, which are wired together so by the time you&rsquo;ve hit the last site, its &rsquo;next&rsquo; link takes you back to the first site, and vice versa. The links were usually included in a commonly styled footer that everyone in the ring included on their site, and sometimes there&rsquo;d be a central directory listing to make sure that if someone&rsquo;s website went down, the ring didn&rsquo;t turn into an abbreviated line instead. There was typically a &ldquo;ringmaster&rdquo; who&rsquo;d manage the ring structure, moderating new applications to join or detangling awry linking loops.</p>
<p>Before search engines like Google or DDG, the early web subsisted on web directories. You couldn&rsquo;t just search across the whole web: you needed to have an explicit entrypoint to some site. (Before DNS, people even had to share IP addresses, not domain names!) Web directories bridged this gap by providing a central catalog of sites, neatly categorized for your perusal. <a href="https://en.wikipedia.org/wiki/DMOZ">DMOZ</a> was one such web directory, owned by AOL but managed by volunteers. Yahoo! also started as a <a href="https://en.wikipedia.org/wiki/Yahoo!_Directory">hand-curated directory</a> before pivoting to a more modern crawler approach.</p>
<p>Webrings were sort of like a branching-off point and alternative to directories, like a human-curated &lsquo;Recommended videos&rsquo; at the bottom of each site. Once you&rsquo;d found a page via a directory, it&rsquo;d be very convenient to be able to find other similar sites without going through the directory again. It&rsquo;s natural, then, that webrings were also used to boost SEO rankings, especially for early search engines in the era of PageRank, since they provide a guaranteed few links to/from relevant content. <a href="https://en.wikipedia.org/wiki/Backlink">Backlinks</a> were crucial then, because more backlinks from quality sites would boost your search result rankings. In some ways, webrings were a less-commercialized version of the linkfarms and SEO drivel that&rsquo;s pervasive on the front page of the web today.</p>
<p>Nowadays, it seems that webrings are seen as a cute nod to the web of the past. The major webring providers have shut down, and search engines have replaced much of the discovery functionality of webrings. The primary webring site, WebRing.com, was summarily end-of-lifed by Yahoo! fairly early on, in 2001, but other providers stuck around til through the 2010s. There are still modern webrings running, like <a href="https://webring.xxiivv.com/">this one by Devine Lu Linvega</a>, and every so often, <a href="https://news.ycombinator.com/item?id=38268706">a post</a> <a href="https://news.ycombinator.com/item?id=38177128">comes up</a> on Hacker News lamenting their relative demise. While poking through Hacker News, I also found this site <a href="https://webri.ng/">webri.ng</a> that lets you manage webrings by generating you the footer HTML to insert (bonus for a cool domain!). I&rsquo;m sure there are plenty of webrings still running, particularly personal ones like the one I started, hosted by a group of friends or colleagues. In my head, they&rsquo;re in the same semantic space as the cozy web, as little relics of delight that you might stumble upon from a quirky site.</p>
<p>Speaking of my webring, let&rsquo;s look into its HTML structure. The NFC ring has a URL record written on it, so when you scan it, all it does is open a website. I&rsquo;ll discuss why we have to use a single website in the next section, but for now, let&rsquo;s take a look at the site itself. The ring links to <a href="https://webring.kewbi.sh">webring.kewbi.sh</a>, which is a static Cloudflare pages site. It displays a single <code>&lt;iframe&gt;</code> with the current webring page, and the footer links navigate to the previous and next sites in the ring. The source is <a href="https://github.com/kewbish/webringsquared/blob/master/src/index.html">here</a> — the markup is very simple, simple enough to have been mostly generated by ChatGPT.</p>
<p>One of the more unique bits about this webring is its architecture. Webring² is a centralized display, linking to sites that are separately controlled by each of my friends. Using an <code>&lt;iframe&gt;</code> to dynamically link to their content and keeping a central navigation header retains the core experience of exploring a webring, but guarantees no broken links or downtime. Even if one of my friends&rsquo; pages goes down, their site won&rsquo;t load, but the navigation will still allow you to go to the next and previous sites. This lessens maintenance burden, since I won&rsquo;t have to run around asking the owners of the pages that link to the broken site to change their links. This also makes it easier to join and leave webrings: all the links are managed centrally on my link service, so I can localize changes just to that configuration file instead of requiring multiple people to update their links. Because this site is just a static HTML file, it&rsquo;s easy to rehost on another provider, providing additional future-proofing.</p>
<p>I claim no originality, since I was neither alive nor on the Internet for the webring heyday, but I don&rsquo;t think I&rsquo;ve seen this structure in any of the other (modern) webrings I&rsquo;ve found. I don&rsquo;t see any reason why this architecture couldn&rsquo;t have been supported by the early Web — Netscape added support for <code>&lt;frame&gt;</code>s, a predecessor to <code>&lt;iframe&gt;</code>s, <a href="https://en.wikipedia.org/wiki/Frame_(World_Wide_Web)#History">in 1996</a>, and sites were being hosted by servers already anyways. To be honest, I haven&rsquo;t dug into the history of WebRing.com or any of the other webring providers, so maybe that&rsquo;s indeed how they worked.</p>
<h2 id="web-whorls">Web Whorls</h2>
<p>The static Webring² website has links to navigate between sites in the ring, but I also wanted to build out an interaction where scanning the ring multiple times would automatically advance the user&rsquo;s &lsquo;position&rsquo; in the webring. The obvious way to do this is to somehow change the URL stored on the ring each time it was scanned, but there&rsquo;s no way to make a self-modifying record as far as I know. You could try making some standalone app to force the user to both read/write to the ring, but I wanted my site to work on the web, as was originally intended! This is also why I had to use the one-centralized-site architecture, since otherwise I wouldn&rsquo;t be able to change the view to the selected website.</p>
<p>If you go through <a href="https://github.com/kewbish/webringsquared/blob/master/src/index.html">the HTML</a> and <a href="https://github.com/kewbish/webringsquared/blob/master/functions/progress/%5Bipkey%5D.js">the Pages Function</a>, you&rsquo;ll see that the app is quite simple.</p>
<ul>
<li>In the HTML, we fetch from the <code>api.ipify.org</code> API to get the user&rsquo;s public IP, then pass this as an identifier <code>ipkey</code> to the Pages Function.</li>
<li>The Pages Function maps the IP address to the current position in the webring and returns the current URL alongside the current index and the list of URLs.</li>
<li>The frontend then displays the current URL in the <code>&lt;iframe&gt;</code>.</li>
<li>When the user clicks the &lsquo;previous&rsquo; or &rsquo;next&rsquo; links, the frontend makes a request to the Pages Function to set the current user&rsquo;s index.</li>
<li>This way, the next time the user taps the ring, the index will increment again in the Pages Function, and they&rsquo;ll be sent to the next site.</li>
</ul>
<p>This is well and good if you have a dedicated IP address, but nowadays your public IP will be shared by multiple devices on your network, or even at a higher level, by other households on your ISP. At this point, the site only maps an IP to a position, so if I scanned my ring and clicked &rsquo;next&rsquo; a few times, my parents on the same network would see my state instead of starting from the beginning. This isn&rsquo;t the end of the world — it&rsquo;s the whole reason that webrings are a cycle in the first place. However, I wanted to drill down more, so ideally each device would be able to have its own position in the webring. I came up with three potential approaches and prototyped one of them out. The other two were very interesting reading, but I decided they were a bit too invasive to implement, especially for a page of this scale (read: no real users).</p>
<p>The first idea I had was to find a way to figure out the user&rsquo;s local IP. This is the address that&rsquo;s used intra-network, and would uniquely identify the device among the others sharing the public IP. The WebRTC API seemed to promise a solution and path forward. The WebRTC API is used for real-time communication: video and voice in particular. It enables screensharing, streaming, and sending messages between peers. WebRTC needs to know the local IPs of devices in order to negotiate connection information between them. You can see this in action on <a href="https://net.ipcalf.com">net.ipcalf.com</a>, which will display a <code>.local</code> address, or by running JS similar to this Gist:</p>


<script src="https://gist.github.com/antyakushev/a5d153654e02036d81cb9aec21125bdf.js"></script>


<p>The address we get back is a <code>.local</code> address, not in typical IP octet format. That in itself is fine, since I only need some unique identifier for the device, and I don&rsquo;t care about what that ID looks like. You&rsquo;ll notice that if you refresh your tab, though, the <code>.local</code> address will change. This <code>.local</code> address is a <a href="https://en.wikipedia.org/wiki/Multicast_DNS">mDNS</a> protocol address — mDNS is like DNS but for small networks where you don&rsquo;t need a hierarchy of nameservers and can just address peers directly. It&rsquo;s a bit like <a href="https://en.wikipedia.org/wiki/Address_Resolution_Protocol">ARP</a>:</p>
<ul>
<li>The requesting device will multicast a request for the local IP address linked to the <code>.local</code> address.</li>
<li>The device matching the <code>.local</code> address will multicast back its local IP address as its response.</li>
<li>All devices except the one that matches the address don&rsquo;t respond to the request, but can read the response and cache it for future reference.</li>
</ul>
<p>At this point, you might realize that being able to access local IP addresses from anywhere on the Internet, just via a simple API call, feels a little iffy privacy-wise. That&rsquo;s why the WebRTC API uses mDNS instead. The browser will dynamically generate a <code>.local</code> address for you each time you create a connection and resolve it for you behind the scenes. This way, your local IP is never leaked into the Internet, but unfortunately that means your local mDNS address can never be used for identifying your device for webring purposes either. Notwithstanding the fact that the <code>.local</code> address kept changing on refresh, I think the API also threw errors on mobile Safari, though I can&rsquo;t be sure since I can&rsquo;t see the console logs. This WebRTC connection code is still <a href="https://github.com/kewbish/webringsquared/blob/96a5b2440f4fae69433ea84b2f8a342f0c1e49b3/src/index.html#L178">left in the HTML source</a>, but it&rsquo;s commented out.</p>
<p>At this point, I realized I should probably stop fighting the privacy protections that people smarter than me had come up with, but I couldn&rsquo;t help myself from looking into a couple of other ways to identify users. After trying out the WebRTC API, I realized I could quite trivially generate a UUID and store it into the browser&rsquo;s <code>localStorage</code> or as a cookie, and reference that as an identifier. (I&rsquo;ll get around to adding this one day, but it&rsquo;s not up on the webring site now quite yet.) While looking into cookies, I came across the concept of <a href="https://en.wikipedia.org/wiki/Evercookie">Evercookies</a>, which were self-reconstructing cookies that couldn&rsquo;t be deleted. Instead of just storing data into a cookie, <code>localStorage</code>, or the IndexedDB, Evercookies hide themselves into weird, niche storage mechanisms like <a href="https://en.wikipedia.org/wiki/Evercookie#Description">reading cookies from the RGB values of force-cached images</a>. Usually, the typical &lsquo;clear cookies&rsquo; option on major browsers just wipes the cookies themselves. If any other pieces of the cookies are left, however, like a piece left in a Flash Shared Object, the JS is smart enough to reconstruct and restore all the cookies back where they came from. <a href="https://github.com/samyk/evercookie">Here&rsquo;s the source of the Evercookie API</a> — it&rsquo;s really something, and the list of places where you can sneakily store data is worth a read through. Though it doesn&rsquo;t have anything to do with this project per se, <a href="https://samy.pl/csshack/csshack.js">CSS history knocking</a> stood out to me in particular as an interesting way to exfiltrate visited status. It&rsquo;s a little scary being aware of all the ways that you can get around the basic browser controls to remove your history or web footprint, and that it seems so clean and simple to do.</p>
<p>Perhaps even scarier are the possibilities laid out by <a href="https://en.wikipedia.org/wiki/Device_fingerprint">browser fingerprinting</a>. JS libraries can combine your user agent, screen resolution, timezone information, plugins, fonts, and more to create a mostly unique identifier for you. <a href="https://github.com/fingerprintjs/fingerprintjs">FingerprintJS</a> claims 40-60% accuracy, which is already impressive, but their <a href="https://fingerprint.com/">closed-source version</a> claims 99.5%. <a href="https://codepen.io/vsbeats/pen/RjMQex">See a demo here</a> for the open-source version of FingerprintJS to get a sense of just how much identifying information you&rsquo;re transmitting with every request. Or, check out the closed-source version&rsquo;s site — I opened the site in a regular Chrome window, then in an incognito window, then after restarting Chrome, and all three times it got my identifier right.</p>
<p>I was super surprised that even with the user agent, screen resolution, and other parameters that the more limited open-source version tracks, it&rsquo;s able to pinpoint users so precisely. I&rsquo;d have expected that there&rsquo;d be billions of users on the internet, millions within my country and using my same ISP, and probably in the thousands using the same browser at the same standard laptop resolution. Even taking browsing time into account, I&rsquo;d have expected maybe at least ten other folks matching my browser version and parameters to be on the Web at any given time, but it&rsquo;s been so far quite impressive. Again, sorting out proper cookies or browser fingerprinting felt like too big of a lift for my weekend project, so I didn&rsquo;t really consider adding the library. Certainly fun (and spooky) to play around with, though.</p>
<h2 id="the-right-hand-rule">The Right-Hand Rule</h2>
<p>We&rsquo;ve gone through the webring site itself and how I navigate between pages on the webring — all the software components that make the site fully usable in a browser. This brings us, finally, to the physical ring itself. My ring is the cheapest model off <a href="https://store.nfcring.com/products/signature?variant=602072773">nfcring.com</a><sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>. I was worried the company wasn&rsquo;t even in business, since their forum was inactive and their stock fairly low, but a quick email assuaged my concerns. I wasn&rsquo;t too fussy about the <a href="https://cdn.shopify.com/s/files/1/0259/9785/t/17/assets/NFC_Ring_Datasheet_Signature.pdf">datasheet</a>, since I didn&rsquo;t have particular requirements on the NFC chip, as long as it could hold a tiny URL.</p>
<p>NFC tags are pretty easy to read and write — just download a writer/reader app on your phone and you&rsquo;re set. To write Webring²&rsquo;s URL to the ring, I used the <a href="https://apps.apple.com/us/app/nfc-tools/id1252962749">NFC Tools</a> app. For most record types, you don&rsquo;t even have to download a reader if you have a recent smartphone, so you can just wave your phone near a tag to automatically open the contact or whatever data&rsquo;s stored on it. You can see in the demo video above that I can just tap my phone on the ring to scan it without opening any particular app. I was at a cybersecurity competition recently, hosted in an official government building, and several participants had a lot of fun surreptitiously writing their own data to the NFC-enabled visitor lanyards we were required to wear (This is your warning to not do this.) Some folks also brought their <a href="https://flipperzero.one/">Flipper Zeros</a>, which is a standalone device that can, among many other things, scan and emulate NFC cards, so there might have been some shenanigans with cloning hotel room cards. (Again, don&rsquo;t do this.)</p>
<p>To understand how NFC tags work, you&rsquo;ll need to take a throwback to high school physics, and the electromagnetism unit in particular. The high-level overview goes like this:</p>
<ul>
<li>NFC tags themselves, like the one in my ring, doesn&rsquo;t have a power source of its own. These are called passive NFC devices.</li>
<li>Your active NFC device, like your reader, has some power source. This power source can generate an electromagnetic field when you pass the current (electricity) through a coil.</li>
<li>Remember the right-hand rule from physics class? It turns out that if you put a coil into a magnetic field, you also get current back out. If you look closely at the NFC ring, you&rsquo;ll see a little coil of wire, which now can get some current running through it.</li>
<li>A capacitor is like a mini-battery: it charges up and can release all the power in a short burst.</li>
<li>This provides enough power for the NFC tag&rsquo;s microprocessor to create its own magnetic fields, which the phone can then read. It&rsquo;s like the NFC tag is wirelessly tapping power from your phone in order to transmit its own information. The official term for this is &lsquo;magnetic induction&rsquo;. Transferring power this way isn&rsquo;t very efficient, however, so it has to be done at very close intervals.</li>
<li>Data is stored on NFC tags in raw bytes, which can be formed into one of several record types <a href="https://gototags.com/nfc/ndef/record-types#nfc-forum">defined by the NFC forum</a>. These include records like URLs, contact information, WiFi passwords, or application-specific NDEF records.</li>
</ul>
<p>NFC tags typically differ in terms of their capacity and speed, and are categorized into one of <a href="https://nfc-forum.org/build/specifications">five types</a>. Type 1 tags are older and slower, and the tags generally go up in performance as their type number increases. The tag on my ring is the <code>NTAG203</code> type, which <a href="https://ubitap.com/ntag203">falls under Type 2</a>. It has 144 bytes of space, which is limited but more than enough for my single URL. I don&rsquo;t notice any speed issues, but I&rsquo;ll note that it can sometimes be difficult to scan the ring. I think the problems are due to the curved surface of the ring, but in the spirit of PEBKAC, are just as likely to be because I don&rsquo;t quite know where the NFC antenna is on my phone. I&rsquo;ve tried scanning the ring with a thinner plastic case, which works, but it wouldn&rsquo;t scan through some of my friends&rsquo; thicker cases (e.g. Otter) or wallet cases. Again, not sure if the problem is on me or the ring.</p>
<p>I was surprised by how long ago NFC tags existed, even on smartphones. By 2010, Nokia released the <a href="https://en.wikipedia.org/wiki/Near-field_communication#History">first NFC-enabled smartphone</a>, and it&rsquo;d already been used in public transportation networks in 2009. Today, I think the most prevalent use-case for NFC that most people have interacted with is wireless payments and digital wallets like Apple Pay, as well as transit cards and other tap-based ecosystems. NFC stickers are fairly cheap now too: I found some to bulk order on AliExpress from $0.03 a piece.</p>
<p>Here&rsquo;s an interesting aside: NFC chip hand implants have been around since at least 2015. It&rsquo;s the same underlying technology as a ring, but you don&rsquo;t have to remember to bring it with you anywhere anymore. <a href="https://www.jhsgo.org/article/S2589-5141(24)00057-4/fulltext">This paper</a> estimates that 50K to 100K people have some sort of chip in their hand, so if you maybe cut that number in half for NFC implants in particular, that&rsquo;s still a sizeable 25K. <a href="https://www.npr.org/2018/10/22/658808705/thousands-of-swedes-are-inserting-microchips-under-their-skin">A 2018 NPR post</a> says it&rsquo;ll run you about $180, but if you&rsquo;re a DIY hacker (which I&rsquo;d expect most people who&rsquo;d think about injecting a chip into their hand would be), you can <a href="https://dangerousthings.com/product/xnt/">buy a kit to insert it yourself</a> for as little as $69. When I was younger, I briefly considered getting an implant, just because it was <em>weird</em> and it&rsquo;d have been a hell of a fun fact, but I also don&rsquo;t have much of a use for it. Giving someone a high five to pass on your LinkedIn is cool, but a little too extreme for a one-day Linux conference.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Every time I build a small side project over a weekend, I find myself learning much more than I&rsquo;d have imagined. I try to prototype out unique ideas that I haven&rsquo;t seen done before, or at least ones that combine fields that I know of, but not fully understand. Building Webring² and <a href="https://kewbi.sh/blog/posts/240721/">my HTML Day 2024</a> have inspired me to humour myself more and keep occasionally hacking on ideas that catch my fancy. The self-contained, timeboxed nature of these projects makes them more approachable than returning to my long-running projects, so maybe this is all just productive procrastination.</p>
<p>This has been the story of how I built one Webring², but I&rsquo;ve been toying around with the idea of buying up a bunch of NFC rings for my friends so we can have a Webring² ring — a Webring³, if you will. We could use a system slightly different than the current one, where each ring statically links to its own &lsquo;starting position&rsquo; (the URL of the friend that has the ring) but can navigate to any of the other sites. On the other hand, we could use the current implementation, where we dynamically fetch the starting URL on scan and have all the rings use the same position in the webring, but I think this&rsquo;d be a bit less personalized for each person with a ring.</p>
<p>There&rsquo;s probably more untapped potential in doing fun (or cursed) things with the NFC ring — I haven&rsquo;t looked too far into the technical details, but I&rsquo;d reckon there&rsquo;s some hacky stuff I could do. Even though the ring is a passive tag, <a href="https://www.reddit.com/r/homeassistant/comments/113acfr/what_do_you_use_nfc_tags_for/?rdt=33530">there are some very unique ideas for automations</a> I could rip off. If you&rsquo;ve been thinking of getting into home automation, or just playing around with NFC in particular, go <a href="https://github.com/kewbish/webringsquared">take a look at the repo</a> and set up your own. I&rsquo;m looking forward to seeing more webrings (or Webring²s) in the future!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>To be fair, the other two were certainly available, but with my limited time there I didn&rsquo;t have much luck. Everyone simply redirected me to their online job board and I was busy during the preplanned mixers.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>It was one of the only manufacturers at this price point that had ring sizes small enough for my finger. I found several cheaper alternatives on Etsy and Amazon, but their ring sizes started at 10. For reference, that&rsquo;d probably be several millimeters too loose, even on my thumb. Small detail, but made me think about the target demographic and demand served a bit.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Compile Your Life</title>
      <link>https://kewbi.sh/blog/posts/240728/</link>
      <pubDate>28 Jul 2024</pubDate>
      <author>Emilie Ma (Kewbish)</author>
      <description>On front-loading forethought.</description>
      <content:encoded><![CDATA[<p>When I was <a href="https://blog.cloudflare.com/introducing-the-2023-intern-ets">interning at Cloudflare</a>, my manager taught me about the concept of a &ldquo;WIP cloud&rdquo; and drilled it into the team. A WIP cloud is all the dangling PRs, unfinished work, loose threads that you have in flight at once, and it&rsquo;s dangerous if you let it grow. A WIP cloud starts out fairly easy to manage: you&rsquo;re wrapping up a PR or have just put something up for review, and now find yourself blocked on others with some spare time on your hands. Being an eager engineer, you look for something else to work on, or perhaps start iterating on the next PR <a href="https://kewbi.sh/blog/posts/230611/">in your stack</a>. Then, you wrap that up — maybe your original PR is still waiting for review — and poke around for some other paper cut to solve. Over time, you amass more and more stuff to just keep on your radar for later.</p>
<p>And then all your PRs get returned at the same time, or all your JIRAs switch from &lsquo;Waiting for response&rsquo; to &lsquo;Awaiting team response&rsquo;. The WIP cloud grows too heavy and starts to pour. You&rsquo;re suddenly swamped. Now all of those little odds and ends that were easy to keep track of require attention all at once, and while already under pressure, you need to figure out how to prioritize and action on them.</p>
<p>I find myself feeling overwhelmed when I have a WIP cloud brewing, particularly during busy weeks at school or when I have soft deadlines approaching at work. The commonly-cited <a href="https://lawsofux.com/millers-law/">Miller&rsquo;s Law</a> states that we can only keep seven items in working memory. After that, we need to rely on context clues to recall things — it&rsquo;s like paging from disk when the values can&rsquo;t be found in the cache. When I hit those WIP cloud limits and memory cache misses, I can tell I don&rsquo;t do very well figuring out what to tackle on the fly.</p>
<p>I&rsquo;m the type of person that says yes to too much and expects a lot of herself, so in some respects I&rsquo;ve come to anticipate the WIP cloud before the storm. I try to keep WIP in mind when I go about my work, but avoiding it isn&rsquo;t the most important. It&rsquo;s what I do to process the WIP, plan it out, and reduce mental load of having to swap things in and out of my working bubble that matters to me.</p>
<p>I&rsquo;ve found something that works well for me: a cycle of collection, curation, and execution that I do ahead of time so I can focus in the moment when the WIP storm&rsquo;s passing by. The metaphor I use for it is <em>compilation</em> — just like compilers, put in some work before the action so you can optimize and take away some computational load while running.</p>
<p>For example, something many &ldquo;how to become a morning person&rdquo; articles mention is laying your clothes out the night before, so you don&rsquo;t have to think about it in the morning, when you&rsquo;re groggier and vulnerable to taking any excuse to stay in bed. This lets you take advantage of your current, more aware, state, and gives you more time to spot imperfections with your outfit (it&rsquo;s a very me thing to do, but maybe it&rsquo;s not a good idea to wear dress pants for a picnic after all).</p>
<p>Compiling your life introduces a split between a more deliberate preparation phase and an execution phase that&rsquo;s ideally as frictionless as possible. This is adjacent to the divide between <a href="https://thedecisionlab.com/reference-guide/philosophy/system-1-and-system-2-thinking">System 1 and 2 thinking</a> popularized by Daniel Kahneman&rsquo;s <em>Thinking, Fast and Slow</em>. System 1 is a faster, snap-judgement mode of thinking, whereas System 2 is slower and requires more mental calculation. We don&rsquo;t want the execution of our work to be done in System 1, per se — it&rsquo;s still important work and we need to be deeply focused for it too. But we want to remove all barriers to starting that work, so we don&rsquo;t want to be forced to plan what work we&rsquo;ll do as we&rsquo;re doing it to mitigate procrastination and bikeshedding. We want to be able to access what we&rsquo;ll do in System 1 mode, so we can spend our System 2 energy on building, creating, and achieving.</p>
<p>If you&rsquo;re like me, I think you should compile your life too; at least, the times of high pressure and stakes. Make use of more self aware states to make sure even your future unmotivated, frazzled self knows what to turn to. Taking time to do all the logistics, prioritization, and prework first makes the actual work much easier. I&rsquo;ve used these strategies to make it through six finals seasons and three internships so far. While I think it&rsquo;s a bad idea to minutely preplan downtime like this, I&rsquo;ve found it easier to decompress and step away from my responsibilities if I know I can rely on having precompiled what I need to do when I do return.</p>
<p>This post will walk you through how I compile parts of my life, spin off into some loosely adjacent metaphors on compilation, and give you a better sense of how I&rsquo;ve applied my strategies from hell weeks to hijack my habits.</p>
<h2 id="get-in-loser-were-going-planning">Get in Loser, We&rsquo;re Going Planning</h2>
<p>The first pass of compilation is planning — collecting and curating whatever you&rsquo;ll be working on. I first started doing my planning in batches in advance when it came to my first finals season. It&rsquo;s too easy to realize it&rsquo;s the last week of class and your first finals are in a few days. When you&rsquo;re in that high-stress mindset and feeling like you have too many chapters to review and practice problems to work through, the last thing you want to do is spend more valuable time figuring out what to study when. But that&rsquo;s exactly what I think led to my success in my first few years: I made sure to carve out just an hour or so to figure out a game plan, try my best to cover everything optimally, then forget about editing it and start to focus.</p>
<ul>
<li>I make a Google Tasks list each time I have a lot of work to organize. Google Tasks is rather slow and frustrating, but it&rsquo;s easy to drag around tasks on the calendar, which makes reorganizing work quickly easier.</li>
<li>I go through and dump out all the chapters, exercises, review sessions, flashcards, or other things I need to do. This is the collection part of planning. See below for how I do this for each class.</li>
<li>I go in order of the closest exam or whatever I&rsquo;m most worried about, and space out each task to load balance across the time I have left.</li>
<li>I go to the next group of tasks, and repeat the same spreading out of work.</li>
<li>I go over everything and make sure no one day is too heavy. I also edit in some buffer time at this point if I have free days, and a few smaller time blocks to reassess how things are going and adjust my plan if need be.</li>
<li>I now have a plan of everything I need to do on that day. I&rsquo;ll sometimes copy over tasks into <a href="https://calcurse.org/">Calcurse</a> so I can time block and plan on the per-day level.</li>
<li>Then, when I have a study session or wake up for the day, I just reference my list and get to work. I don&rsquo;t doom about having so much to do, and I trust in my past self to have allocated time properly.</li>
<li>Sometimes, things come up, and I need to reorder work or add more. I block out more explicit planning time, drag things around, then go back into execution mode where I don&rsquo;t think about the what, just the how.</li>
</ul>
<p>The way I dump out my tasks is also somewhat meta-compiled. I have this template for each course of what I need to reference for each chapter or unit. It might be something like the exercises in the workbook, the review questions at the end of each chapter, and listening and speaking exercises from Canvas, for my French class, and the slides, the PrairieLearn questions, the textbook exercises, the clickers, and my flashcards, for my operating systems class. Then, for each unit, I might have specific areas I want to focus on, so I&rsquo;ll allocate more time and exercises from those sections. This is a little like <a href="https://rustc-dev-guide.rust-lang.org/backend/monomorph.html">monomorphization</a>, a Rust compiler construct for creating explicit instances of generic functions for each type that they&rsquo;re called with. Here, I&rsquo;m creating explicit tasks from the coursework templates for each of the units I have to work through<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>I also take time to prioritize during this organization phase: the curation part of planning. Part of making it through the WIP cloud is knowing that to cut or delay (delegation isn&rsquo;t usually an option for students). When things are laid out across my week in Google Calendar, I can start to see when certain days are too heavy, and if I can&rsquo;t move things around, I&rsquo;ll need to decide what&rsquo;s most important to focus on. A key part of this strategy, though, is making these decisions once while planning, and perhaps scheduling in explicit touchpoints throughout the few weeks that I&rsquo;m planning ahead. I try not to touch the prioritization outside of this time so I have one less thing that I can do to procrastinate, but more on this later.</p>
<p>During finals week, I can barely find the motivation to drag myself from bed most mornings (especially during the Fall term when I have to wake up in the gloom and dark), so taking the time to plan in advance is helpful so I can start my day right away and know I can make progress.</p>
<h2 id="from-clothes-to-chrome-tabs">From Clothes to Chrome Tabs</h2>
<p>The next pass of compilation is what I call the precomputation phase — substituting constants and doing basic computation ahead of time. There are certain algorithm problems where it&rsquo;s more efficient to batch compute all the results at initialization, cache it somewhere, then access those results at runtime. That&rsquo;s exactly what this preparation stage is useful for in real life as well.</p>
<p>We&rsquo;ve all heard trite advice somewhere to lay your clothes out the night before to become a morning person. When you&rsquo;re tired and grouchy, having already made your decision to lay out your workout clothes and your work fit makes it easier to just get up in the morning and go. That&rsquo;s the same principle precomputation exploits.</p>
<p>You might have heard of the concept of a &ldquo;trigger list&rdquo;, an idea first developed in <a href="https://gettingthingsdone.com/wp-content/uploads/2022/06/GTD_Incompletion_Trigger_List.pdf">&ldquo;Getting Things Done&rdquo;</a>, or a list of all the things you might need to remember or think about on a recurring basis. For example, it might look something like:</p>
<pre tabindex="0"><code>- meals:
	- planning
	- restaurants for eating out
- outfits
- chores:
	- laundry
- cleaning:
	- bathroom
</code></pre><p>This precomputation phase takes this idea one step further. Run through the list of triggers you have based on the plan you have, and set up your environment so that you&rsquo;ve done as much of The Thing as possible without actually doing it. For example, after deciding on your workout fit, fill your water bottle, roll out your yoga mat, and set out your equipment. Pull up the video you&rsquo;re planning to follow, pair your headphones, and queue your favourite playlist. By putting in all this prep, you&rsquo;re priming yourself to get up the next morning and just do the thing. Besides, it&rsquo;ll be easier than putting everything back away again.</p>
<p>One of my first Python projects was a script that&rsquo;d open up all the tabs I&rsquo;d want to check through each morning for notifications, including my email, social media, and messages. I haven&rsquo;t applied quite the same level of janky automation to my studying, but I follow a similar routine. I wrap up each day by going through my todo list for the next session and opening up the textbooks, practice problems, exams, and study tools that I&rsquo;ll need. When I open my laptop the next morning, I&rsquo;m greeted not by a blinking screen inviting me to tab over and scroll through Hacker News for an hour, but by what I need to get done.</p>
<p>For work and personal projects, I do the same — at 5PM, or whenever I&rsquo;m done for the day with my side project, I take a few minutes to figure out what I&rsquo;ll get done the next day, then open or bookmark the tabs I&rsquo;ll need to get started. For work, this tends to be opening up my PRs on GitHub so I can refresh and check their statuses the next morning, or the service deploy page so I can remember to hit the button and kick off some tests. For personal projects, I open up my design files for reference or docs pages for the libraries I&rsquo;ll be using for my next steps.</p>
<p>This principle is inspired by the <a href="https://en.wikipedia.org/wiki/Mise_en_place"><em>mise en place</em></a> cooking technique, so it&rsquo;s fitting that I also apply it to my meal prep. I don&rsquo;t follow recipes usually, so I write up my own list of prep steps and from there, set out all my ingredients and cookware and utensils. The weirdest example of this is probably what I do to set up for breakfast: the night before, I&rsquo;ll get all my cookware (pan, bowl, etc.) in place so the next morning, I can just turn on the stove and start cooking<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>. This <em>mise</em> step is a textbook example of precomputation: doing the little things to get your station and environment set up so the actual cooking is much easier, and you&rsquo;re not scrambling around in your cupboards looking for a whisk while your sauce is scalding.</p>
<p>Collecting as much of the paraphernalia related to your work as possible ahead of time helps you avoid distractions. This is most obvious when it&rsquo;s applied to studying and work, but even in the kitchen or when I&rsquo;m doing chores, I find that not only knowing what I have to do, but also that I have everything in the right places to get it done, helps with removing all my mental blocks to getting in the flow.</p>
<h2 id="jit-compiling-and-spontaneity">JIT Compiling and Spontaneity</h2>
<p>You might think that this all sounds very rigorous and rigid, and it&rsquo;s supposed to be. Compiling your life is most effective for heads-down periods of life. There are times (e.g. finals week) where I don&rsquo;t want to think too hard about what I need to do and just execute. I do build in some escape hatches though: above, I&rsquo;ve mentioned allowing for checkpoints to rejig my schedule, say, in the middle of the week, if need be.</p>
<p>I also give myself the option to &ldquo;panic&rdquo; out and restructure at any time. However, I try to ensure that this decision is intentionally done — like an explicit context switch from my &ldquo;doing&rdquo; phase to &ldquo;planning&rdquo;. Forcing myself to only do so deliberately avoids situations where I don&rsquo;t want to actually work, so I make myself feel productive by reorganizing my time blocks, or revenge plan after feeling bad for not getting work done. It&rsquo;s also worth just recognizing what mode you&rsquo;re operating in at any time to be more cognizant if you find yourself flipping between modes often in order to better plan around that. <a href="https://linear.app/blog/planning-for-unplanned-work">This Linear blog post</a>, which inspired this post, also has some advice on planning for unplanned work. It&rsquo;s focused more on product work, but I think its ideas translate fairly well to areas of personal life.</p>
<p>There are plenty of times when I&rsquo;m less under pressure and I don&rsquo;t need so much of a drill-sergeant approach — in fact, I&rsquo;d say that most of the time putting so much effort into planning isn&rsquo;t fruitful for me. Planning and precomputation are useful when you have very clear goals for a shorter time horizon, when it&rsquo;s worth sticking to your metaphorical initially-thought-out guns. On the other hand, they&rsquo;re also premature optimization for lots of other situations. Your mileage may vary, and you&rsquo;ll have to define for yourself what sorts of times you need these tools and how far you&rsquo;ll take them.</p>
<p>For more daily-level plans, I try to use JIT compiling: I figure out what I&rsquo;ll do for the day the day-of, or at the start of a study session. I set aside some time to go through a less-structured version of what I have to do, including high level things I need to think about, and decide then. I timebox these times though, since I feel like it&rsquo;s super easy for me to get off track trying to figure out the best way to do something, when I just have to go do it.</p>
<p>This summer, I don&rsquo;t have as many strict responsibilities, so I&rsquo;m letting myself be looser with all this. I precompute mostly for menial, repetitive tasks, like cleaning and meal prep, and I&rsquo;ve been blocking in more time to let things come up.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Program, precompute, perform. This is, so far, my recipe for compiling my life, and this is how I&rsquo;ve gotten through the last few years of my university and industry career.</p>
<p>I&rsquo;ve been told this sounds robotic, but I&rsquo;ve realized it&rsquo;s just like being your own <a href="https://en.wikipedia.org/wiki/Secretary#Executive_assistant">executive assistant</a>. Executives tell their ABPs the high-level initiatives they want to focus on, the presentations and tasks they have to focus on, and the events they need to attend: all the execution work they need to do. Then the ABPs and EAs go out and do all the legwork, the organization, the prepwork, to make it happen. EAs are a separate person from the executive, which lines up well with my ideas of splitting up planning and prework into a distinct phase before execution. My notion of precomputation isn&rsquo;t even that novel: sure, maybe the EAs don&rsquo;t go to the extent of logging onto their exec&rsquo;s laptop to open up all their tabs for them, but they prepare summaries and readings and generally set up their mental environment. If the high net-worth individuals and successful businesspeople of the world have decided to spend money on outsourcing their planning and precomputing so they can focus on the executing, I think there&rsquo;s some value in doing the same for ourselves too.</p>
<p>The next time you start feeling overwhelmed, consider compiling parts of your work. Do as much of the pre-work and the hard thinking ahead of time, when you&rsquo;re in a planning mindset, as possible — as much of it as you can without actually doing it. Make the execution the easy part.</p>
<p>I still remember my manager intoning &ldquo;Don&rsquo;t let that WIP cloud grow!&rdquo; at most team strategy meetings. At my current internship I try to remind myself of that whenever I have a free moment and reflexively think of picking something new up. Sometimes I listen and I don&rsquo;t go for the shiny new thing, and sometimes I do. But when all the consequences of my pending, in-progress, &ldquo;waiting on action&rdquo; work hit at the same time, compiling my life helps me make sense of the chaos. Whenever my WIP storm touches down on my mental ground zero, I trust that I&rsquo;ve done the work ahead of time to make it through.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>I will admit this metaphor is a little stretched, but I really wanted to mention monomorphization. A throwback for those who know.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>I keep the food itself in my fridge though. I don&rsquo;t think <em>mise en place</em> is a good idea if you&rsquo;re not immediately preparing the food.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>HTML Day 2024</title>
      <link>https://kewbi.sh/blog/posts/240721/</link>
      <pubDate>16 Jul 2024</pubDate>
      <author>Emilie Ma (Kewbish)</author>
      <description>On the vestiges of HTML.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>July 13th last week was <a href="https://html.energy">HTML Day 2024</a><sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. HTML Day is a community-organized event where folks gather around the world to freewrite HTML. The meetups seem to take place generally in parks or beaches (so no Internet access) with fun prompts like &ldquo;make a website inspired by the sounds you hear&rdquo; or &ldquo;make a website inspired by your favourite, lesser-known element&rdquo;. Some folks even handwrite their HTML — note that the event descriptions state to bring a &ldquo;HTML-writing device&rdquo; or &ldquo;something to write HTML on&rdquo; and not &ldquo;a laptop&rdquo;. The intent is less of a &ldquo;Google all the things and make a technically challenging website&rdquo; and more of a &ldquo;go back to the roots of raw HTML and have fun&rdquo; vibe.</p>
<p>I was planning to go to my local HTML Day as well, but it was a bit of a transit trek. By the time I&rsquo;d gotten to one of my transfers, I decided just to head to a library and have my own little HTML day instead. Armed with a slice of surprisingly high-quality carrot cake from a cafe nearby, I sat down for an afternoon to hack away.</p>
<p>I&rsquo;d originally come up with some slightly cursed ideas with raw CSS: building a Shamir Secret Sharing tool with server-generated CSS files that could be recombined to regenerate the secret was my initial plan. I&rsquo;d also thought about making some kind of HTML emoji canvas with <a href="https://github.com/knobiknows/all-the-bufo">bufo emojis</a> as a little puppet show. Going back to my <a href="https://kewbi.sh/blog/posts/211031/">spaced-repetition enjoyer roots</a>, making a CSS-based Leitner system was on the list as well. I wondered if I could somehow rig up a hash function in CSS to get to a sort of blockchain, and I considered using CSS as an API as <a href="https://css-tricks.com/custom-properties-as-state/">mentioned in this CSS Tricks post</a>. However, these ideas all hinged around <a href="https://kewbi.sh/blog/posts/240303/">abusing</a> CSS instead of HTML. It&rsquo;s the one thing about HTML Day: HTML is supposed to be the star of the show.</p>
<p>I was feeling pretty uninspired at some point, so I looked to the <a href="https://html.energy/">html.energy</a> page for past event prompts. I found a <a href="https://d2w9rnfcy7mm78.cloudfront.net/22595115/original_569f17680cabc94a7555a7d764e94232.jpg?1688960301?bc=0">pic in their event gallery</a> that mentioned finding a lesser used HTML element and making a page around that, and I started thinking of older, retro (to me) tags like <code>&lt;marquee&gt;</code> and <code>&lt;blink&gt;</code>. They&rsquo;re what I think about when I imagine the Internet of the 90s/00s (please keep in mind I was not around for said Internet era): the &ldquo;the more I know&rdquo;-esque, Neocities-core, loud and gaudy and interactive pages. I don&rsquo;t know if these tags were ubiquitous then, but they&rsquo;re pretty well-used now by tongue-in-cheek people looking to recreate that aesthetic.</p>
<p>Unfortunately, they&rsquo;re also deprecated. In particular, <code>&lt;blink&gt;</code> isn&rsquo;t even implemented in modern browsers anymore — it has to be recreated via a CSS animation. I started thinking of other tags that had seen better days and were no longer implemented, and I set out on a quest to find the weirdest tags that I&rsquo;d never heard of and bring them back to life via a little extra CSS or JS. I started envisioning a circus with a freak show of resurrected tags brought back from the dead, but not quite behaving the same way: think PT Barnum crossed with Frankenstein.</p>
<p>The result was <code>1pt bar&lt;number&gt;'s travelling circus: html element freak show'</code> — an ASCII-art heavy little page showing off a few freaks of Internet nature. In this post, I&rsquo;ll expand a little on some things I learned while making the page, both about the tags themselves and the Web in general. This post is full of links to obscure pages and jumping-off points for further reading, and I hope it&rsquo;ll spark some rabbitholes of your own!</p>
<p>Here&rsquo;s an embed of <a href="/files/240721/html-day-2024.html">the site</a> if you&rsquo;d like to check it out:</p>


<div style="display: flex; justify-content: center; margin-bottom: 1em; background-color: white; overflow: none">
	<iframe src="/files/240721/html-day-2024.html" style="width: 100%" height="800" frameborder="0" ></iframe>
</div>


<h2 id="blink-twice-and-youll-miss-it"><code>&lt;blink&gt;</code> Twice and You&rsquo;ll Miss It</h2>
<p>The <code>&lt;blink&gt;</code> tag used to, as may be obvious, blink text. According to <a href="https://www.fastcompany.com/3015408/saying-goodbye-to-the-html-tag">this article by Fast Company</a>, it was the result of a joke turned challenge: engineers working on <a href="https://lynx.invisible-island.net/">Lynx</a> were laughing at some of their wilder ideas for the browser, seeing as it couldn&rsquo;t even blink text. One of the engineers took this as a dare, and returned the next morning with a working blinking tag. It was never standardized, and few browsers supported it, but up until 2013, Firefox supported it, and Google&rsquo;s WebKit fork was even named after it. There was also a <code>text-decoration: blink</code> CSS declaration available, but it&rsquo;s also deprecated and usually not supported.</p>
<p>One reason for its removal seems to have been accessibility concerns: the blinking makes it hard to read text and could potentially trigger seizures for those with epilepsy. But the other reason cited is its lack of standardization.</p>
<p>Part of the beauty of the web is standardization: for the most part, you can trust that things will render the same across browsers. However, there&rsquo;ll always be little differences, even in well-specified standards — how else would we be able to do browser fingerprinting even without user agent headers? It makes sense that browsers would want to reduce extra surface area for divergence and focus on the specification, especially since you can recreate its functionality with the rest of the standard.</p>
<p>To implement the blinking eye on the page, I used a looping CSS animation that would toggle <code>visibility: hidden</code> on and off. <code>visibility: hidden</code> differs from <code>display: none</code> in that it keeps the element&rsquo;s block present, so it doesn&rsquo;t shift around on the page, but stops rendering the element itself.</p>
<h2 id="keygen-and-early-web-auth"><code>&lt;keygen&gt;</code> and Early-Web Auth</h2>
<p>The <code>&lt;keygen&gt;</code> element was used to generate a public/private keypair to be used in forms to validate the server&rsquo;s response (yes, back when PHP was all the rage!) <a href="https://www.youtube.com/watch?v=KhGVPriid58">Here&rsquo;s a video I found of the tag</a>: the &lsquo;High Grade&rsquo; refers to the strength of encryption via the length of the generated key. <a href="https://www.wufoo.com/html5/keygen-element/">This page</a> lists 2048 as the &lsquo;High Grade&rsquo; encryption, which isn&rsquo;t nearly as low as I thought considering the feature was implemented well before 2016.</p>
<p>When a form containing a <code>&lt;keygen&gt;</code> had its submit handler called, a public/private keypair would be generated locally. The private key would be kept local, and the public key sent to the server and signed by the server&rsquo;s own certificate to create the client&rsquo;s certificate. This was later used to authenticate the user. Most (then-) modern browsers implemented <code>&lt;keygen&gt;</code>, including Netscape, where it originated, Opera, Firefox, and Safari, and the feature was used in quite a few places, including in early online banking. However, IE notably decided not to support the feature, which might have led to its eventual decline, deprecation, and <a href="https://github.com/w3c/html/issues/43">removal from the HTML standard</a>. <a href="https://stackoverflow.com/questions/59289545/why-has-firefox-dropped-support-for-the-html5-keygen-tag#comment104798273_59289545">This SE comment</a> seems to imply that client certificates were all the rage before being supplanted by passwords — it makes sense, since early Internet users were likely fairly technical in order to onboard in the first place, but this demographic and thus this need for easier-to-understand auth shifted as adoption among the general public increased. There&rsquo;s a <a href="https://web.archive.org/web/20160409081411/https://lists.whatwg.org/pipermail/whatwg-whatwg.org/attachments/20080714/07ea5534/attachment.txt">very in-depth doc here</a> that explains a bit more of the background context.</p>
<p>If you want to really fake a <code>&lt;keygen&gt;</code> element, <a href="https://www.chiark.greenend.org.uk/~sgtatham/keygen-fake/">this blog post</a> shows you how to do it. Surprisingly, as of a few years ago when this article was published, some CAs still required the use of a <code>&lt;keygen&gt;</code> element, and their official guidance was to install and use IE11 to work around the tag&rsquo;s removal in modern browsers<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</p>
<p>But if you&rsquo;re happy just making a little <code>&lt;keygen&gt;</code> that displays an ASCII key when clicked, as I&rsquo;ve done on the page, it&rsquo;s nowhere near as complicated. I felt like using JS was a bit too easy and besides the point of HTML Day, so I made a CSS-only click handler. The TL;DR is that we can wrap the <code>&lt;keygen&gt;</code> element in a <code>&lt;a&gt;</code> with some <code>href=&quot;#target&quot;</code>, and when the <code>&lt;keygen&gt;</code> (really, the <code>&lt;a&gt;</code>) is clicked, <code>#target</code> is appended to the end of the URL. Interestingly, there&rsquo;s a pseudo-element <code>:target</code> that allows you to style tags that are targetted, so I simply added a <code>&lt;span&gt;</code> with a key symbol and set that to <code>display: block</code> only when the element is targetted. The downside of this is that it&rsquo;ll jump to said target, causing a bit of a jarring visual effect, and if <code>#target</code> is removed from the URL, the key symbol no longer displays. I figured it was enough of a proof-of-concept even with these rough edges, though. This DigitalOcean post has more details <a href="https://www.digitalocean.com/community/tutorials/css-css-only-click-handler">here</a>.</p>
<h2 id="dyk-theres-a-v-tag">DYK: There&rsquo;s a <code>&lt;V&gt;</code> Tag?</h2>
<p>There a few special-purpose text formatting tags like <code>&lt;big&gt;</code>, <code>&lt;center&gt;</code>, <code>&lt;s&gt;</code> (strikethrough), and <code>&lt;u&gt;</code> (underline) that were also deprecated. Scrolling down <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element">this list</a> should give you a sense of the deprecated presentational tags — look for the red trash-can icon beside each element&rsquo;s name.</p>
<p>I also wanted to call out a counterexample of these text formatting tags getting deprecated: <code>&lt;small&gt;</code>. <code>&lt;small&gt;</code> was supposed to be the counterpoint to <code>&lt;big&gt;</code>, but <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/small">isn&rsquo;t deprecated</a>. This is because of its reclassification as a semantic element: the Mozilla docs state that it&rsquo;s intended to represent copyright and legal small print, and importantly, it represents these things <em>independently of its styled presentation</em>.</p>
<p>This is exactly the reason these tags were deprecated in the first place. While these presentational tags were part of previous HTML standards, they&rsquo;ve been deprecated because they focus on the the styling of some text instead of its semantics. Note that <code>&lt;b&gt;</code>, which wraps bold text, is by default rendered the same way as <code>&lt;strong&gt;</code>. However, again, <code>&lt;b&gt;</code> marks the content just as bold, whereas <code>&lt;strong&gt;</code> denotes some sort of emphasis. This gives the user the freedom to represent the semantics however they want: perhaps a user likes to see <code>&lt;strong&gt;</code> text italicized in a different font instead<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>.</p>
<p>If you&rsquo;re getting tired of all this deprecation and thinking &ldquo;to hell with the standard, I just want to have have presentational elements!&rdquo;, go right ahead. The proper way to create custom HTML elements is with JavaScript and the <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_custom_elements">Web components API</a>. You can use <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_templates_and_slots">templates and slot in your own content</a> and even <a href="https://developer.mozilla.org/en-US/docs/Web/API/Web_components/Using_custom_elements#registering_a_custom_element">register it for use in HTML docs</a>. Custom elements are very powerful because they allow you to hook into different lifecycle events, like attributes changing.</p>
<p>One glaring problem with custom elements, though, is that they <a href="https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name">must follow the standardized naming convention</a>. This forbids you from using a custom name like <code>&lt;leet&gt;</code> without a hyphen, making it obvious that you&rsquo;re using a custom element. This is fine for most (all) use cases, but for my HTML day page, I really wanted the markup to be as clean as possible and avoid relying on JS.</p>
<p>So imagine my surprise when I tried just writing <code>&lt;blah&gt;content&lt;/blah&gt;</code> and adding a simple <code>blah { color: red }</code> style and seeing the text brighten up on my screen. I didn&rsquo;t realize that browsers would parse this as valid HTML (they&rsquo;re <code>instanceof HTMLUnknownElement</code>). You can style these fake tags just as you would normal HTML tags, as long as they&rsquo;re accepted as a tag name: underscores and hyphens in the tag name work, but periods don&rsquo;t. I didn&rsquo;t look up the exact rules here, but I&rsquo;d expect you can probably find more restrictions.</p>
<p>On my HTML day page, I&rsquo;d already mentioned <code>&lt;s&gt;</code> and <code>&lt;u&gt;</code> as deprecated tags (they aren&rsquo;t, see footnote)<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>, and I just applied a little <code>text-decoration: none</code> to them to remove their strikethrough and underline respectively. I also thought it&rsquo;d be funny to round out the alphabet here, with the fictitious <code>&lt;r&gt;</code>, <code>&lt;t&gt;</code>, and <code>&lt;v&gt;</code> tags. Of these, I think the <code>&lt;v&gt;</code> element is most interesting: it represents a little graffiti tag (pun not intended) that has blue Comic Sans (or whatever your browser default <code>cursive</code> font is) angled on top of the existing text. I did this via a <code>:before</code> pseudo-element: I added <code>v { position: relative }</code> and <code>v:before { position: absolute; left: 0 }</code> in order to get the pseudo-element to display directly on top of the <code>&lt;v&gt;</code>&rsquo;s content. Then, by setting the <code>:before</code>&rsquo;s <code>content</code> property, I was able to add the extra graffiti text. Finally, I added a little extra styling to rotate the text as if it&rsquo;d really been tagged onto the underlying content: I didn&rsquo;t expect transforms to work on pseudo-elements properly, but <code>transform: rotate(25deg)</code> did the trick. In retrospect, it might have been nice to add some drop shadows to make it seem like the &lsquo;paint&rsquo; was dripping, but an effect to explore for later.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I came into HTML Day intending to hack together a funny page and move on, but I&rsquo;ve been able to learn more about how Web standards have evolved and a bit more about the history of HTML. As time went on, I can see the decisions to shift responsibility from more static technologies (HTML) into more dynamic ones (CSS, JS). I&rsquo;ve always thought of these three main Web languages as all wrapped up, listed as one big slash-delimited acronym on my resume. It&rsquo;s been interesting to reflect on the patterns of deprecation and how they&rsquo;ve very intentionally decreased possibilities for doing the wrong thing while separating each language&rsquo;s responsibility more clearly.</p>
<p>At first, coming into this whole deep dive, I&rsquo;d thought that deprecating tags was more restrictive, since it was encouraging people not to use more varied and diverse elements. Now, I think culling out-of-scope tags and focusing on these very delineated responsibilities is more freeing. The example that cemented this for me was that having clearer semantics, not mixing in presentational tags, and not implementing non-standard behaviour can allow users to specify how they want to view their semantics: for example, bolding an <code>&lt;em&gt;</code> tag or listing all <code>&lt;big&gt;</code> text in a different font style. By promoting clean semantics and removing possibilities for self-contradiction within the spec, users can trust the standard, and by extension their browsers, more.</p>
<p>Besides really enjoying the history, I learned that what I&rsquo;ve learned about HTML from modern web development via React et al. hasn&rsquo;t even scratched the surface of what (raw) HTML has to offer. I&rsquo;d previously considered myself fairly well-versed in HTML and CSS, but I&rsquo;ve realized that I&rsquo;m severely lacking in more of its history and its weirder corners. It&rsquo;s nice going down a little rabbithole, since the standard is so sprawling and there&rsquo;s so much to specify: there&rsquo;s bound to be interesting edge cases.</p>
<p>This exploration also puts into scale how complex web browsers are, yet how basic an initial set of tags that covers most functionality can be. In everyday dev, I probably only use 10-15 tags, whereas there are <a href="https://devdevout.com/html/how-many-html-tags-are-there">142 defined in the HTML5.2 standard</a> and probably many more non-standard ones, like <code>&lt;blink&gt;</code>. There are books covering <a href="https://browser.engineering/">how to build your own fully-fledged browser</a>, and I&rsquo;ve been thinking of skimming it to see if I&rsquo;d find web browser internals interesting. Once I&rsquo;d learned that <code>&lt;blink&gt;</code> wasn&rsquo;t implemented in modern browsers, I was considering having my HTML Day project being creating a custom fork of Chromium that automatically injected a CSS blink animation, but I figured with the time I had (and the battery, since I forgot my charger) it was something to leave for another day. It might be easier to figure out how to implement <code>&lt;blink&gt;</code> with a smaller browser like the one I&rsquo;d build with browser.engineering, so I might take a look.</p>
<p>Writing this little summary and building a small site was very fun. HTML Day was a well-timed excuse to build something for the sake of building it, with some loose constraints that were a great forcing function for my creativity. I&rsquo;m excited for the next events in August for HTML&rsquo;s birthday and what I&rsquo;ll learn there. Hopefully I&rsquo;ll be able to make it in person this time — I saw some Exquisite Corpse-inspired and handwritten HTML shenanigans that&rsquo;re really making me look forward to it.</p>
<p>If you didn&rsquo;t take a stab at anything for HTML Day, I&rsquo;d encourage you to find one of the deprecated tags in this post (or one of the supported ones in <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element">this list</a>) and try to figure out the weirdest edge cases and quirkiest uses you can think of for it! What you learn might just <code>&lt;em&gt;</code>aze you.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>As far as I can tell, July 13th isn&rsquo;t related to the history of HTML in any way, so I&rsquo;m assuming it&rsquo;s some arbitrary date picked by the organizers for people around the world to freewrite HTML. They also have an August series of events for HTML&rsquo;s birthday, but it&rsquo;s hard to pinpoint an exact date of HTML&rsquo;s launch, at least according to a cursory Google.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Arguably a sign that you might want to use a different CA.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>I&rsquo;ll also note that <code>&lt;b&gt;</code> is not deprecated in HTML5 anymore, and has specific use cases as the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/b#usage_notes">&ldquo;Bring Attention To&rdquo; element</a>.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4">
<p>While writing this post, I&rsquo;ve discovered that <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/s">neither are</a> <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/u">actually deprecated</a>, which is a little embarrassing.&#160;<a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>The Tireless Pupil&#39;s Talk Prep Primer</title>
      <link>https://kewbi.sh/blog/posts/240609/</link>
      <pubDate>09 Jun 2024</pubDate>
      <author>Emilie Ma (Kewbish)</author>
      <description>On delivering my first conference talk, in the midst of exams.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>A few weeks ago, I posted about my first talk: a <a href="https://ossna2024.sched.com/event/1aBNC/the-github-graph-characterizing-open-source-collaboration-patterns-emilie-ma-university-of-british-columbia">session about understanding open-source collaboration patterns</a> at <a href="https://events.linuxfoundation.org/open-source-summit-north-america/">Open Source Summit North America 2024</a>. I also posted a separate journal entry about <a href="https://kewbi.sh/blog/posts/240602/">my day-of experience</a>, which includes some more reflections on being a first-time attendee and speaker.</p>
<p>If you&rsquo;d prefer to watch my talk rather than read <a href="https://kewbi.sh/blog/posts/240526/">the previous post</a> for context, here it is!</p>


<div style="display: flex; justify-content: center; margin-bottom: 1em">
	<iframe width="560" height="315" src="https://www.youtube.com/embed/iUZaW_cjwYU" title="The GitHub Graph: Characterizing Open-Source Collaboration Patterns - Emilie Ma" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
</div>


<p>In this post, I wanted to list a few quick points about writing a talk that I&rsquo;d wish I&rsquo;d known before embarking on this rather harrowed adventure (to see why it was so stressful, see the <a href="https://kewbi.sh/blog/posts/240602/">previous post</a>.) It&rsquo;s by no means an exhaustive list, but I hope it&rsquo;ll be helpful to anyone in a similar boat of being incredibly busy while also prepping for a talk.</p>
<h2 id="giving-a-talk">Giving a Talk</h2>
<p>The research I presented in my talk was part of a project I&rsquo;d worked on for a Directed Studies course at university a few terms ago. As part of that course, I was required to give a final presentation summarizing my work (and in fact, I presented twice to two different labs!), so I&rsquo;d already gotten a set of slides done and a preliminary set of notes. However, that talk was primarily targetted towards my contributions to the project, the quantitative statistics and the tooling. It had a heavy focus on rather convoluted statistics and my own report as opposed to the more qualitative findings presented in the final paper. For OSSNA2024, I needed to reframe the talk for more of a general audience and highlight more of the big picture takeaways from our project.</p>
<p>In some ways, starting with an already fleshed out set of slides and a script was both a blessing and a curse. It was great to not have to start from scratch, which would have taken up valuable time, but it also lulled me into a false sense of security and made it much easier to procrastinate on making these more fundamental changes to talk pacing or structure. I applied for OSSNA2024 near the start of January, and heard back with an acceptance in February, so I had two full months to slowly chip away at these updates. Because I felt like I was so ahead of the preparation, however, I ended up only really focusing on my talk in mid-March, which didn&rsquo;t leave me with enough time to comfortably revamp the talk. I was balancing studying for finals season as well as a steady courseload, and with more urgent assignments and due dates always popping up, I kept deprioritizing talk prep and pushing it to later and later. I ended up having to pull some long, full-throttle days between when classes ended (the 11th) and my talk (the 15th), which was not ideal. I think of myself as a rather organized person who can estimate workloads and plan my time fairly well, but even I really dropped the ball on this process. If you take one thing away from this post with regards to starting public speaking for the first time, make it this: start earlier than you think, preferably right after you hear back that your talk has been accepted.</p>
<p>I worked on my script and slides in tandem: I think I speak better when I have a set of rehearsed sentences. I don&rsquo;t do well with just bullet points: I end up either reciting them, stammering while trying to find the right verb, or repeating the same adjectives and verbs over and over. The talk writing process was a cycle of adding a few sentences or a paragraph to my script, adding them to my slides, coming up with a visual, setting up animations, and repeating. I memorized my script (not as well as I&rsquo;d like) by repeating it over and over to myself until I knew the cadence and connections between slides. I&rsquo;d set aside half an hour each day to practice with just the script. Some days, I&rsquo;d take my after-dinner break or lunch break to rehearse as well: my friends once saw me pacing in circles in the hallway outside our club room muttering points to myself for an hour and were genuinely concerned if I was alright. In hindsight, I should have started practicing the script earlier with the slides, since it took some time to get the cues for animations and points right. The first few times I tried speaking with the slides, it felt very unnatural trying to juggle recalling my lines while trying to predict slide transitions.</p>
<p>Something I severely underestimated was how important the structure and the pacing of a talk was. I knew the gist of the raw information I wanted to impart, but it was only after several rounds of feedback from my professors that the talk started feeling more natural instead of like it was jumping all over the place. For example, I&rsquo;d previously put methodology at the end, since I thought people were more interested in what we were presenting than how we got that information. Later, I realized that sharing the &ldquo;how&rdquo; created valuable context for understanding the &ldquo;what&rdquo; and as per one of my professors&rsquo; suggestions, I moved it near the start of the talk. I also spent a lot of slides at the beginning reiterating various features of GitHub, which sluggishly dragged out the start, especially since the attendees were all open-source enthusiasts and would most probably already use GitHub. As well, my talk was covering collaboration patterns on GitHub, so we&rsquo;d created a list of these prototypical workflow types. Since I wanted to share as much information about our project as possible, I initially included summaries of all nine. After reading my talk out loud a few times and after feedback from my supervisors, I realized that it&rsquo;d be painful, but I&rsquo;d have to cut some of them out. Repetitive, overly detailed deep-dives into a topic aren&rsquo;t amenable to a shorter talk: listeners start tuning out after the first few points that appear similar at first glance but differ in super minute ways. Don&rsquo;t linger on any one section too long — try to divide your talk into roughly equally sized chunks for each subtopic. I think it&rsquo;s easier to keep people engaged when you cover a wider variety of material at a medium level of detail, particularly if some of that information is implications or real-world examples of the initial theory.</p>
<p>I did all my slide design in Figma. I wrote a little post about my experiences using Figma for presentations <a href="https://kewbi.sh/blog/posts/231231/">here</a> if you&rsquo;re interested in the general workflow. On top of that post, I&rsquo;d like to add that while Figma makes it very easy to design and share visually-appealing slides, the presentation workflow for serious talks is very much lacking. If you want speaker notes that are synced to the slides, you&rsquo;ll have to use comments, read from the tiny sidebar, open up two tabs, and use the follow cursor option: not a great experience. I ended up just memorizing my speaker notes and running from memory and the slides, but it would have been a nice safety net for my first ever talk.</p>
<p>On the topic of slide design, remember to visually highlight the key points you&rsquo;re making orally. For example, I tended to click through a series of bullet points talking about a graph without pointing out what part of the figure the point was referring to (e.g. &rsquo;the isolated nodes&rsquo; → should change the colour of or otherwise point out the bar chart for the &lsquo;size 1&rsquo; nodes) I would also sometimes make summarizing statements or talk about implications without writing them down on the slide, as I felt they were natural conclusions to draw from the rest of the points on the screen. It&rsquo;s helpful to make these TL;DR lines explicit, though, and I got a lot of head-nodding and sneaky-phone-camera-picture-taking when I clicked into one of these points.</p>
<p>One of the most helpful steps during this talk writing process was running through my talk and getting feedback on those runthroughs. If you have supervisors, mentors, or even just willing friends, it&rsquo;s very helpful to sit them down and rehearse to get a sense of how the talk <em>feels</em>, in terms of pacing, content, and depth. I recorded an early draft runthrough and shared it with my professors, who gave me plenty of valuable advice for where things felt too slow or where things needed more highlighting. This is why starting early is also so critical: more time means more runthroughs and more actionable improvements between runthroughs. I really wanted to present this talk to my friends to see what they&rsquo;d think of it and if they could follow it, since they come from an earlier stage in their career and have less exposure to open source, but I ran out of time.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I think there&rsquo;s still a lot I need to learn with regards to architecting a talk, defining its purpose and takeaways, finding my voice, and learning to speak with more confidence. I don&rsquo;t have a lot of experience with public speaking — I quit my school&rsquo;s debate club after one meeting — but it&rsquo;s something that I want to work on. When I envision my future career, it involves a lot of mentorship and knowledge sharing, and clear communication, particularly verbal, is a skill that&rsquo;ll aid me do that more successfully.</p>
<p>If you want more concrete advice on writing a talk, I&rsquo;d highly recommend <a href="https://mercedesbernard.com/blog/start-conf-speaking-idea/">Mercedes Bernard&rsquo;s series on conference speaking</a>. I also found <a href="https://ines.io/blog/beginners-guide-beautiful-slides-talks/">Ines Montani&rsquo;s page on making beautiful slides</a> good inspiration, though their style might be a bit over the top in some fields.</p>
<p>This will be my last OSSNA 2024 summary post, but I wanted to extend one last thank you to the organizing team and the Linux Foundation for letting me break out of my shell and give my first talk. I couldn&rsquo;t have asked for more inclusive and comfortable conference to start my public speaking career.</p>
]]></content:encoded>
    </item>
    
    <item>
      <title>OSSNA 2024</title>
      <link>https://kewbi.sh/blog/posts/240602/</link>
      <pubDate>02 Jun 2024</pubDate>
      <author>Emilie Ma (Kewbish)</author>
      <description>On rescheduling a final for my first conference talk.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Last week, I posted a summary of my first talk: a <a href="https://ossna2024.sched.com/event/1aBNC/the-github-graph-characterizing-open-source-collaboration-patterns-emilie-ma-university-of-british-columbia">session about understanding open-source collaboration patterns</a> at <a href="https://events.linuxfoundation.org/open-source-summit-north-america/">Open Source Summit North America 2024</a>. I was able to share my work with OSS folks, meet up in-person with some people I&rsquo;d only met online, and take in all the buzz in the brand new Seattle Convention Centre. If you&rsquo;d prefer to watch my talk rather than read <a href="https://kewbi.sh/blog/posts/240526/">the previous post</a> for context, here it is!</p>


<div style="display: flex; justify-content: center; margin-bottom: 1em">
	<iframe width="560" height="315" src="https://www.youtube.com/embed/iUZaW_cjwYU" title="The GitHub Graph: Characterizing Open-Source Collaboration Patterns - Emilie Ma" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
</div>

This post is a collection of little anecdotes from the day-of as well as my reflections on the overall experience. I'll briefly cover some tips on preparing for a talk in a separate post to come.


<h2 id="day-of">Day-Of</h2>
<p>Even though the conference was three days and I would&rsquo;ve had a ticket to all three, I unfortunately had a final at 8:30AM the day of my talk (the first day of the conference) and another at 7PM the day after. When I applied to speak, I was banking on the fact that my courses were upper level and smaller than the intro / 100-level courses that usually have their exams scheduled for the first few days of finals. But I was unlucky: the first day of the conference was also the first day of exam period, and I had two finals back-to-back. I was initially debating if I&rsquo;d even be able to make it to give my talk, but thankfully I was able to reschedule my talk for a later time so I&rsquo;d theoretically be able to book it from Vancouver, right after my first exam, to Seattle. And later, in another stroke of luck, I went to the professor for the first exam and successfully begged to be able to sit my exam during the final for another course they were teaching. I was incredibly surprised that there were no questions asked on his part, but I certainly wasn&rsquo;t complaining.</p>
<p>With my first exam cleared out of the way, I&rsquo;d be able to leave Vancouver in the morning of my talk and make it to Seattle by lunchtime. My parents were tagging along to sightsee in downtown Seattle, so we bundled into the car early on the 16th and headed out. On the drive there, I was trying to silently run through my talk script, but something about sitting shotgun and staring out at the highway passing by isn&rsquo;t very conducive for focus. I was aiming to run through the talk at least a few more times there. The drive was ~3h and my talk was ~30min, so I could have reasonably got through it 5-6 times, but I got through it about twice, in fits and starts. At this point, I was starting to feel uneasy and underprepared, but we were soon reaching downtown Seattle and I had to go back to navigating off the highway.</p>
<p>When I got dropped off at the venue, I was in awe. We were in the brand-new, Summit building of the Seattle Convention Centre, so there were plenty of tall ceilings, natural light, and cute seating areas. Everything was sparkling clean and impeccably professional, which perhaps I haven&rsquo;t come to expect given my typical university surroundings. It was nice feeling starry-eyed with the sunlight streaming in through the floor-to-ceiling windows, running around gawking at all the amenities, decor, and spaces. One of my favourite places in the center was this garden patio decorated with little fairy lights, outdoor wooden seating, little tree-lined pathways, and a view out into the center of downtown. It looked like something out of an IKEA late-summer-nights catalog, and I spent some time rehearsing my talk there as well as enjoying the free breakfast my second day.</p>
<p><figure><img src="/img/240602/patio1.jpg"/>
</figure>

<figure><img src="/img/240602/patio2.jpg"
         alt="Figure 1. The garden patio."/><figcaption>
            <p><em>Figure 1. The garden patio.</em></p>
        </figcaption>
</figure>
</p>
<p>I also really liked this seating area by the stairs: there&rsquo;s something about the impossibly high ceilings, comfy atmosphere, and just the sun that made it feel very cozy. If I sound like I&rsquo;m appreciating the sun a lot, it&rsquo;s because we 1) weren&rsquo;t getting this type of sun in Vancouver and 2) in UBC there are few spaces that capture the light so well. The warm tones of the wood and the sun made even the shadowier sections look inviting.</p>
<figure><img src="/img/240602/stairs.jpg"
         alt="Figure 2. The stairs seating area."/><figcaption>
            <p><em>Figure 2. The stairs seating area.</em></p>
        </figcaption>
</figure>

<p>When I arrived, I spent some time walking around the sponsor showcase. I&rsquo;d never been to a conference before and was surprised at the level of detail and theming that went into some of these flagship booths. AWS&rsquo;s booth was themed like a 90s diner, complete with the bar stools and a retro menu remixing AWS services and tools into burgers. There was even a little window where someone was manning a cookie giveaway (only after you&rsquo;d listened to their spiel, of course). The Gitbook stand had a barista, and the Microsoft booth had one of the largest flatscreens I&rsquo;d ever seen. There were old arcade game cabinets and carnival-style games: I saw a massive Jenga set and gingerly took a piece out for the fun of it. I was accosted by someone shoving an iPad in my face and promising me a Starbucks gift card for filling out a survey on how I perceived their company&rsquo;s open source strategy (which I indeed did, if not more out of confusion than anything else).</p>
<p>Initially, I was seeking internship leads, but I quickly realized most of the folks were there to sell the product and would just redirect me to the careers page. Alas, I&rsquo;d wasted ten printed copies of my resume for nothing. In preparation for the event, I&rsquo;d also bought a <a href="https://nfcring.com/">NFC Ring</a> so I&rsquo;d be able to share my website and contact information in a unique and hopefully memorable way. No one asked me for my information at the event, so I didn&rsquo;t have the chance to show off my very sleek titanium business card ring<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>After killing time for a bit, I met up with the program manager for one of the experiences that&rsquo;s changed my life. (I&rsquo;m being vague in case they don&rsquo;t want to be identified) I&rsquo;d only ever met them online, and they introduced me to some of their colleagues at the event. I also met the former Director of Open Source at the company that hosted said impactful event, which was pretty fun. I didn&rsquo;t do too much networking besides this, though, which is something I perhaps regret not taking advantage of.</p>
<p>One thing the PgM mentioned to me was that conference food is always not great — they&rsquo;d gone out for dimsum for a work lunch instead of taking the catering. I found this to be unfortunately kind of true. For lunch, we had sandwiches + pasta salad + fruit + a cookie + a drink, but everything was pre-boxed. To be fair, it was very filling and wasn&rsquo;t <em>bad</em>, but I&rsquo;m automatically biased against untoasted sandwiches, especially cold ones. I think given the choice, I&rsquo;d have preferred dimsum too<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</p>
<p>After lunch, I spent a few hours walking around in circles around the garden patio rehearsing my talk (and fidgeting with the light-up spinners I&rsquo;d grabbed from the sponsor showcase). My talk went alright. I covered the content in <a href="https://kewbi.sh/blog/posts/240526/">a previous post</a>, but it was great seeing it resonate with people and I do genuinely feel that they got something from it. There weren&rsquo;t a lot of people, since I was the last talk session and people were either tapped out, heading to external events, or grabbing cocktails upstairs at happy hour. I got good questions, though, and sparked some follow-up discussion points for future research. Talking to a mostly empty room is just as terrifying as a full one! I think I fumbled a lot in the beginning but found my stride halfway through. I forgot to repeat the questions into the mic, I missed some of my points, and I didn&rsquo;t get to share with as many people as I&rsquo;d hoped, but I really enjoyed the experience and found it very fulfilling.</p>
<p>I walked out post-talk feeling energized, relieved, and ready to nab as much swag as possible from the happy hour upstairs. With my heavy backpacks (besides my personal one, the PgM gave me another one with some swag), I triumphantly made my way up the escalators while Dua Lipa was blaring on the speakers. On my ride up, the mix of catchy pop – I think it was Don&rsquo;t Start Now – and much less stress, not to mention the beautiful afternoon sun, made me feel like I was on top of the world. The boost of confidence made me briefly consider trying to sneak a beer from the drink cart (purely for the comedy, I don&rsquo;t drink), but System 2 clicked in and I got a mock margarita instead.</p>
<p>Newly hydrated, I hit the sponsor showcase in search of swag. I&rsquo;d already gotten this custom OSSNA 2024 picnic blanket at checkin, so I&rsquo;d been lugging that as well as both my personal bag and a gifted backpack around the whole day. But after the happy hour, my backpack, both my pockets, and even the bag I was using to carry the gifted backpack were full with random knickknacks. I got a red RedHat hat. I got multiple fidget spinners (some of which lit up and flashed). I got a yoyo for my dad. I got a tote bag. I got a totebag to hold the totebag. I put one of my backpacks into the totebag that was holding the other totebag. I stopped for some appetizers and was eating outside the main hall, when I noticed an abandoned white cardboard cube. Out of curiosity, I snuck a look at it, and it turned out to be a GitHub mug. I returned it to the booth and asked if I could keep it, and learned that they&rsquo;d been giving away as a sweepstakes prize, which unfortunately I didn&rsquo;t win any of. A shame — those Lego flower sets would have been cool. At the end of the day, my arms were killing me. I saw someone with one of those grocery shopping wheelie carts full to the brim with tshirts and merch, and I was kicking myself that I hadn&rsquo;t thought of that. I went to Cheesecake Factory for dinner with my parents (a childhood favourite) and was showing off my swag. They were already impressed with what I&rsquo;d had in my bag before I&rsquo;d even started emptying my pockets, which were full of stickers, small toys, and a stuffed chameleon (thanks SUSE!). I was lucky we were driving back and had plenty of room in the car for the extra backpack — I can&rsquo;t imagine having to fly back with limited luggage.</p>
<p>The next day, I got up bright and early to make the free breakfast, which was better than the lunch but was still lacking toasted bagels. After breakfast, I stuck around for Linus Torvald&rsquo;s keynote talk — I didn&rsquo;t really take away much from it because I was a little busy fangirling. To this day, I still couldn&rsquo;t tell if the conversation was scripted or not, but it was really cool seeing one of the key figures in open source in real life and not just as some revered email handle. I did some French flashcards after the keynote, since my exam was in less than twelve hours, while I was waiting for the showcase to open up again. Didn&rsquo;t you have an exam to get to, you ask? This was very true, but my dad had seen someone with a <a href="https://en.wikipedia.org/wiki/Zephyr_(operating_system)">Zephyr</a> kite the day before and he was dead set on coming home with one. Thus, I was sent into the showcase right when it opened to listen to the spiel in exchange for a kite. When I got back into the car and we set out, my dad asked, very melancholically, why I didn&rsquo;t get two.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Unfortunately, I wasn&rsquo;t able to move my second exam, so right after his keynote, we headed back to Vancouver. We made it with a few hours to spare before my second final, but I hadn&rsquo;t really slept well so wasn&rsquo;t able to cram much. I made myself a shot of matcha, spedran a little more Anki, and prayed that the studying I&rsquo;d put in throughout the rest of the term would come in handy then.</p>
<p>Here are some brief lessons learned:</p>
<ul>
<li>Leave more time for attending other talks, instead of stressing about your own. Plan out the talks you&rsquo;ll attend in advance and look for topics far outside of your comfort zone, since conferences are a good way to find yourself in close proximity to experts in diverse fields.</li>
<li>Your talk will be okay, even if you feel that you underprepared. This might be a uniquely me thing — I&rsquo;ve been realizing I can be more cursory (for my definition of cursory) than I expect and still surprise myself.</li>
<li>Obviously, prepare earlier. Ask for feedback earlier, so you can go through multiple rounds of it and don&rsquo;t feel so overwhelmed by pages of notes in the days leading up to the conference. This also gives you the opportunity to be more comfortable during the first time you rehearse for feedback, so you can focus on content comments instead of criticism about missing your cues or whatnot.</li>
<li>Look for scholarships or reimbursements from the conference, your school, or your/external companies to cover costs. I was able to drive down to Seattle, avoiding flight costs, but the Linux Foundation also has grants available that covered my hotel costs. I was able to also get a scholarship from my university to cover the gas and miscellaneous fees.</li>
<li>Ask professors for help when it&rsquo;s needed. You&rsquo;re not alone, and even if it feels embarrassing to be frantically trying to prep days ahead of the talk, they can offer a more mature, experienced outlook.</li>
<li>Strategize how you&rsquo;ll get swag. Keep your backpack as empty as possible. Try to bring a tote bag and figure out how to binpack your swag based on your weight and swag size limits.</li>
</ul>
<p>Giving a talk is something I&rsquo;d certainly do again! I&rsquo;ve already applied for a few other CFPs with this same talk or other interesting things I&rsquo;d like to speak about. It&rsquo;s given me an opportunity to learn how to present myself and my work and start establishing myself as some sort of respectable resource while also meeting others and exploring a new venue/city.</p>
<p>Thank you again to the Linux Foundation for making this incredible trip and talk possible. Many thanks also to my parents for taking time off to drive me and support me day-of. And of course, thanks to my math prof for letting me move my exam and make it to give the talk that&rsquo;s left me feeling so energized, bold, and excited.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>I did forsee this, though, and to be honest I kind of just wanted the ring. I have plans for it in the future!&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Or Din Tai Fung, which I hear a lot about online and was just a few blocks away. My parents had been wanting to go, but they got lost — they&rsquo;d found the block but didn&rsquo;t look up to see the sign, and it was raining and they were hungry, so they went someplace else. They really should have used Google Maps and just asked me for an umbrella, since they were giving so many free ones away at the convention center.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>The GitHub Graph</title>
      <link>https://kewbi.sh/blog/posts/240526/</link>
      <pubDate>26 May 2024</pubDate>
      <author>Emilie Ma (Kewbish)</author>
      <description>On GitHub Issues, PRs, and all the links in between.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>In mid-April, I had the opportunity to speak at <a href="https://ossna2024.sched.com/">Open Source Summit North America 2024</a>, held in Seattle. I spoke about research that I&rsquo;ve been working with Professors <a href="https://dwyoon.com/">Dongwook Yoon</a>, <a href="https://www.cs.ubc.ca/~bestchai/">Ivan Beschastnikh</a>, and <a href="https://scholar.google.ca/citations?user=5kncGscAAAAJ&amp;hl=en">Cleidson de Souza</a> on: characterizing open-source collaboration patterns from the GitHub Issues and PRs that they comprise. I was nervous attending my first real conference, let alone speaking, but it was an amazing first experience. Even though I was only there for a day<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, it was an incredibly fulfilling one, and I&rsquo;m grateful to the organizing committee for making the conference a welcoming, engaging success.</p>
<p>I&rsquo;ll touch on more of my conference experience and some backstory (because oh boy, is there a backstory) in another post, but I wanted to first share my talk in post format. This article will be a transcript-style rehash of my talk based on my speaker notes, but if you&rsquo;d prefer to watch my talk rather than read, I&rsquo;ve also listed it here. The raw slides are available <a href="https;//emilie.ma/ossna2024">here</a>.</p>


<div style="display: flex; justify-content: center; margin-bottom: 1em">
	<iframe width="560" height="315" src="https://www.youtube.com/embed/iUZaW_cjwYU" title="The GitHub Graph: Characterizing Open-Source Collaboration Patterns - Emilie Ma" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" referrerpolicy="strict-origin-when-cross-origin" allowfullscreen></iframe>
</div>


<h2 id="talk-intro">Talk Intro</h2>
<figure><img src="/img/240526/1.png"/>
</figure>

<p>Hi friends! I&rsquo;m Emilie, an undergrad at the University of British Columbia and software developer. I&rsquo;ve recently had the privilege of working with Professors Cleidson de Souza, Dongwook Yoon, and Ivan Beschastnikh at UBC on the topic of understanding open-source development practices empirically, in the real world. We found that there&rsquo;s a lot of hidden context and unspoken patterns that GitHub and other development platforms don&rsquo;t highlight, and today, I&rsquo;m going to show you how we revealed them. We analyzed over fifty large open-source projects hosted on GitHub and developed a novel graph-based perspective that we&rsquo;re calling the PR-Issue Graph.</p>
<figure><img src="/img/240526/2.png"/>
</figure>

<p>Today, I&rsquo;ll cover our methodology, this PR-Issue graph&rsquo;s attributes, and our workflow type definitions. You&rsquo;ll walk away with a new outlook on managing open-source collaboration, able to recognize common workflow patterns and what they might mean for your community. I hope this talk will spark some discussion and brainstorming over how we can be mindful of these workflow types as we lead open source development efforts.</p>
<h2 id="about-github">About GitHub</h2>
<figure><img src="/img/240526/3.png"/>
</figure>

<p>How many of you are familiar with GitHub? It&rsquo;s a developer platform built on top of the version control software Git. You&rsquo;ve probably already heard of it in some of the previous talks. GitHub is a popular choice among open source projects as a central platform for collaboration.</p>
<figure><img src="/img/240526/4.png"/>
</figure>

<p>On GitHub, community bug reports, feature requests, or general discussion about projects are done on issues. On the slide are a couple examples of projects we&rsquo;ve studied. I&rsquo;d like to highlight that issues have a designated status. You can see that on the left, the issue is open, which usually means it hasn&rsquo;t been addressed; and on the right, it&rsquo;s closed, meaning someone has fixed the issue or the discussion has been deemed off-topic or closed.</p>
<figure><img src="/img/240526/5.png"/>
</figure>

<p>New code, perhaps addressing these Issues, is merged into projects via Pull Requests, or PRs. They also have statuses: open, if it&rsquo;s undergoing or will undergo review; closed, if the work was unsatisfactory or extraneous; and merged, if it&rsquo;s been accepted and integrated into the project. People discuss and review code in PRs. As well, folks can link to Issues in a PR: for example, if a PR fixes an issue that&rsquo;s already been reported, contributors will typically link to the issue within their PR to create an explicit connection between the two.</p>
<figure><img src="/img/240526/6.png"/>
</figure>

<p>Here, that link has an explicit &lsquo;fixes&rsquo; type. GitHub will automatically create two types of links for you: &lsquo;fixes&rsquo; or &lsquo;duplicate&rsquo;. If you mention a keyword associated with &lsquo;fixes&rsquo; or &lsquo;duplicate&rsquo; with an issue number, GitHub will create a link with the appropriate type. Here, the link was created with the keyword &lsquo;closes&rsquo;, which is associated with the &lsquo;fixes type&rsquo;.</p>
<figure><img src="/img/240526/7.png"/>
</figure>

<p>If we frame this as a collaboration graph for a second, we start to see something basic but interesting emerge. Let&rsquo;s consider the PRs and issues as nodes, and the links between them as edges. We can model the different node types and statuses: so here, purple means merged, green means open, and red means closed, just like in the GitHub UI. This is a graph-based visualization of the example I&rsquo;ve been showing: we have a problem (Issue 8150, the red square), and we have a solution (PR 8156, the purple circle), the PR fixes the Issue, and there&rsquo;s nothing else connected to this work.</p>
<figure><img src="/img/240526/8.png"/>
</figure>

<p>Here&rsquo;s another example of this graph based perspective, this time with an explicit &lsquo;duplicate&rsquo; link taken from a project called discord.py. Here&rsquo;s a visualization of what that looks like. The problem reported in this issue on the left was marked as a duplicate of this other issue on the right. The issue on the right was created earlier and covers the same problem of a missing field.</p>
<figure><img src="/img/240526/9.png"/>
</figure>

<p>Prior work in software engineering research has focused on these links extensively. While the examples I&rsquo;ve shown have explicit link types that are detectable and supported by GitHub, about 85% of links on GitHub don&rsquo;t have a &lsquo;fixes&rsquo; or &lsquo;duplicate&rsquo; relationship, according to <a href="https://www.cs.ubc.ca/~bestchai/papers/cscw21-pr-references.pdf">Chopra et al</a>. Researchers have been primarily trying to classify these blank links into richer categories than just &lsquo;fixes&rsquo; or &lsquo;duplicates&rsquo;, and many papers have built several distinct taxonomies for doing so, including link types like &lsquo;dependent&rsquo;, or &rsquo;enhanced&rsquo;. Some work has also been done to do this automatically, with NLP classifiers.</p>
<figure><img src="/img/240526/10.png"/>
</figure>

<p>However, let&rsquo;s take this idea one step further. We were interested in &lsquo;zooming out&rsquo; of the prior, very focused research on individual links. Our research is the first to look at multi-node clusters of issues and PRs as a graph. This graph perspective grants us more context, as we simply have more metadata and relationships to examine, which in turn gives us a richer understanding of the work practices associated with each type of graph. For example, with more context, we can understand larger implications about the development work practices in a project, like if developers break their work down into small chunks for review, or if there&rsquo;s a lot of competition in certain areas of the project. This graph perspective is what we&rsquo;ve nicknamed GitHub&rsquo;s PR-Issue Graph, and for the rest of this talk, I&rsquo;ll show you what lurking insights about open-source collaboration we&rsquo;ve found hidden in it.</p>
<h2 id="methodology">Methodology</h2>
<figure><img src="/img/240526/11.png"/>
</figure>

<p>You might be wondering how we did all this analysis. We chose to analyze GitHub as our platform of choice because of its popularity, its data availability, and the diversity of projects hosted on it. We initially scraped 56 popular projects on GitHub, based on a prior sample by <a href="https://www.cs.ubc.ca/~bestchai/papers/cscw21-pr-references.pdf">Chopra et al</a>. These cover a variety of topics, like machine learning with projects like mlflow and foundational technologies like gRPC. We downloaded the contents, metadata, and links of more than ninety thousand nodes. We used a diversity sampling technique to generate a sample of sixty clusters, or subgraphs, in which each link was manually coded into a list of extended link types. From there, we identified some repeated structural patterns that we thought could represent work practices in software development.</p>
<figure><img src="/img/240526/12.png"/>
</figure>

<p>Next, we imported the issues and PRs and their metadata into <a href="https://neo4j.com/">Neo4j</a>, a graph database software, and created reusable queries to search for all occurrences of these collaboration patterns. Onscreen, you can see an image of the built-in query browser visualizing some results.</p>
<figure><img src="/img/240526/13.png"/>
</figure>

<p>We also developed an image visualization module and interactive explorer tool that we used to streamline manual coding and validate our findings during interviews with open source developers. Here&rsquo;s what this looked like.</p>
<h2 id="project-characterization">Project Characterization</h2>
<figure><img src="/img/240526/14.png"/>
</figure>

<p>Let&rsquo;s start with some characterization of the projects we studied. We found all the connected components, or clusters of connected issues or PRs, and measured their sizes and frequencies, which is shown in this bar chart. The x-axis here shows component size, and the y-axis show the number of clusters of that size on a log scale.</p>
<p>Cluster sizes are important, as they give us an immediate intuitive idea of how collaboration is normally structured: we can understand if people tend to build on previous work, making larger clusters of connected nodes, or if they create one-off PRs or Issues.</p>
<p>We found that cluster sizes followed a power law distribution, with many isolated nodes not connected to anything else and a few very large components with lots of nodes and interlinking. We found that there are ten times as many isolated nodes than 2-node components, which is unusual. You might think with how GitHub is structured around collaboration and documentation, there&rsquo;d be a lot of PR to Issue links, or problem-solution pairs. Instead, we observed a lot of distinct problems or solutions that don&rsquo;t apply to or aren&rsquo;t linked to each other.</p>
<p>This power law distribution can help maintainers predict growth and appropriately allocate resources: power law distributions often indicate the presence of a few highly connected and influential hubs of nodes, so when we observe larger clusters starting to form, we can know, oh, okay, it&rsquo;s likely that work and collaboration will continue to grow.</p>
<figure><img src="/img/240526/15.png"/>
</figure>

<p>We also hypothesized that connected components of different sizes represented different types of work. We found that small clusters of nodes had more issues (shown in blue), which represents that they have more problems, fewer closed issues or merged PRs, so the work is left more unfinished, and a shorter duration between first and last update, indicating small clusters of nodes tend to represent isolated problems.</p>
<p>On the other hand, large connected components had fewer issues with more merged PRs and a longer duration. We might think of large connected components as more mature and active initiatives in a project, whereas isolated PRs or issues might represent one-off contributions.</p>
<p>Again, this can help with prioritization: larger clusters represent these critical areas where lots of high-impact collaboration is happening, so it&rsquo;s worth taking a look to see how those issues are being managed. This is also useful for encouraging diverse contributions: developers new to open-source might just want to tackle a one-off issue, so smaller clusters or isolated issues might be a good place to start. On the other hand, developers looking to tackle a challenging core problem might want to start looking at the open issues in one of these large clusters or use them as reference documentation for past design decisions.</p>
<h2 id="workflow-type-definitions">Workflow Type Definitions</h2>
<figure><img src="/img/240526/16.png"/>
</figure>

<p>Next, I&rsquo;ll cover the cornerstone of our work: our workflow type definitions. Let&rsquo;s start by taking a look at one of these clusters of issues and PRs. Here&rsquo;s an example from the <a href="https://github.com/Rapptz/discord.py/">discord.py</a> project, a library used to build chatbots and other automations for the app Discord. Here, someone is requesting a feature — something to do with adding <code>invoke_parent</code>. Then, two folks have come along to create their own implementations of this feature. sudosnok on the left proposed an approach, but it was vetoed by the maintainer of the project. A few days later, SebbyLaw submits their own implementation, which is eventually merged. Note that both PRs reference the original issue with those &ldquo;fixes&rdquo; keywords I mentioned before: sudosnok used &ldquo;closes&rdquo;, and SebbyLaw uses &ldquo;resolves&rdquo;. Let&rsquo;s visualize this as a graph. This is actually an example of one of our workflow types: the competing PRs workflow type. The competing PRs workflow type abstracts this example a bit by allowing for more competition, and more of these closed PRs.</p>
<figure><img src="/img/240526/17.png"/>
</figure>

<p>These workflow types are associated with work practices, like &lsquo;breaking down complex work into small chunks&rsquo;. Each workflow type also has a prototypical graph structure, as shown here. These graph structures were combinations of four types of metadata constraints: node type, status, authorship, and creation timestamps. We&rsquo;ve defined nine prototypical examples of workflow types: I&rsquo;ll go through a couple today.</p>
<figure><img src="/img/240526/18.png"/>
</figure>

<figure><img src="/img/240526/19.png"/>
</figure>

<p>Sometimes, contributors are eager to offer their own implementation of a task, and begin working on one while not communicating, which we observed in our competing PRs workflow type. The discord.py example I just showed earlier was one of these. It has a graph structure of a closed issue, this red square, connected to multiple PRs, with only one PR being merged, this purple circle. These PRs are created by different people, represented by the little people icons labelled A and B.</p>
<p>As in the discord example, you might have a feature request that multiple contributors start working on in parallel without &lsquo;claiming&rsquo; the issue or otherwise communicating, and now you have multiple candidate implementations to review. Its associated work practice, or in this case, malpractice, has an implication that there was some wasted work due to poor communication, although competing PRs also allowed projects to be picky about what they merged. That discord.py example showed how the maintainer called out a performance implication in the first PR that they didn&rsquo;t like.</p>
<figure><img src="/img/240526/20.png"/>
</figure>

<p>Another painfully familiar issue in open source is duplicate issues, where contributors report similar problems that are duplicates of previous discussions. Redirecting them to other, established discussions, takes valuable maintainer time. This is captured in our duplicate issue hub workflow type. Its structure consists of a issue, this leftmost red square, connected via &lsquo;duplicate&rsquo; links to many other issues, the red squares on the right. The <code>t=0</code> notation means that this hub issue, Issue 1, was created before the other duplicate issues on the right.</p>
<p>This happens if a bug goes out in a release, for example, many folks might report it at the same time without first searching through the other issues posted to GitHub, causing additional maintenance burden. Though this was one of the workflow types we first thought of and observed in our query refinement process, it turns out that duplicate hubs are actually rather infrequent. We observed only 15 instances of them, over all 90K nodes.</p>
<p>However, I&rsquo;ll note that when issues are highly noticeable, as with breaking changes, these duplicate issue hubs can grow quite large. Here&rsquo;s another example from the discord.py project: issue 5867 caused by a breaking change on the underlying app&rsquo;s end was connected to 11 duplicate issues. When maintainers notice high-growth or large duplicate issue hubs, it&rsquo;s worth considering how the change can be better communicated and made noticeable for users.</p>
<figure><img src="/img/240526/21.png"/>
</figure>

<p>To perhaps combat some of the miscommunication that cause duplicate issue hubs, projects also tend to publish updates about recent work. Here&rsquo;s an example from the <a href="https://github.com/apache/dubbo/">apache/dubbo</a> project, which employs a bot to create weekly Issues as a status report. It lists all the merged PRs from the last week. We observed this in our Integrating PR/Issue hub workflow type: its structure is a central PR or issue, as shown on the left, linked to many merged PRs, so those purple circles you see on the right.</p>
<p>The dubbo project used issues to collect reports, but some projects also use a PR: for example, listing all the PRs merged into the latest release candidate before merging that release candidate PR into the mainline branch.</p>
<p>This workflow type has a temporal constraint: the central PR tends to be created <em>after</em> the merged PRs. In practice, this typically models a release or documentation workflow, where maintainers aim to surface work after the fact so the community is more aware of what initiatives are occurring.</p>
<figure><img src="/img/240526/22.png"/>
</figure>

<p><a href="https://kewbi.sh/blog/posts/230611/">Stacked PRs</a> and <a href="https://graphite.dev/">Graphite.dev</a> are becoming more popular recently: if you&rsquo;re not familiar with Stacked PRs, they&rsquo;re a workflow for creating small, incremental PRs that build on each other and that facilitate code review and dev velocity. For example, I might make a small PR to update the backend, then a small PR to update the frontend, then a small PR to update the docs.</p>
<p>Our Dependent PRs workflow type models this type of workflow. Its graph structure is a series of PRs referencing one another in a chain, with a limited set of authors, usually just one. This workflow type is regarded as a good practice as it makes changes easier to understand and ship without blocking implementation work on a review.</p>
<figure><img src="/img/240526/23.png"/>
</figure>

<p>Finally, we found that developers tend to sometimes overdeliver in their PRs, addressing multiple issues at once. Here&rsquo;s an example of a PR taken from the <a href="https://github.com/grpc/grpc-web">grpc-web</a> project. A single PR fixes many issues that are, at first glance, unrelated. PRs like these will be more difficult to review and give feedback for, since the fixes are all mixed up in each other. This workflow is captured in our Divergent PR workflow type. It has the structure of a merged PR, this purple circle, that fixes several linked issues at once, these red squares.</p>
<p>This can be both positive, as when the linked issues are related or have the same underlying fix, or negative, as in the grpc-web example when the issues are unrelated. Again, negative divergent PRs violate the general principle of small, easily-understood PRs addressing a single issue.</p>
<h2 id="workflow-type-comparison">Workflow Type Comparison</h2>
<figure><img src="/img/240526/24.png"/>
</figure>

<p>Let&rsquo;s now talk about some ways these patterns compared to one another. We wanted to understand how frequently each workflow type arose in projects as it would explain the most common ways engineers work. We ran each of our queries across all 90K nodes, and counted up the number of matches from each workflow type. We found over a thousand matches of our workflow type definitions.</p>
<p>What&rsquo;s more was that we found that these patterns weren&rsquo;t evenly represented across projects: some workflow types were more frequently used, and we hypothesize that they&rsquo;re more natural or embedded in software development culture. For example, the Consequent Issue-PR workflow type we identified was very popular : that&rsquo;s an issue solved by a PR, which creates another issue. It represents the typical pull-based development model of Issue-PR well, so it wasn&rsquo;t surprising that that was the most frequent workflow type. Another example: we didn&rsquo;t see a lot of competing PRs, which implies that there&rsquo;s usually limited wasted work.</p>
<p>This might be useful to keep in the back of your head as a benchmark: if your project has many more duplicate issue hubs or competing PRs than what we observed, that might be a sign to re-evaluate your issue reporting or code review workflows.</p>
<figure><img src="/img/240526/25.png"/>
</figure>

<p>Finally, we observed that workflow types are fairly representative of the projects. 52% of all nodes that could have been in a workflow type – so, in a cluster with some other nodes and some links, were in a workflow type. Most projects contained at least one match, with larger projects tending to have more matches. This is a graph of the number of nodes in projects to the number of workflow types we observed in said project, with each dot representing a project, and you can see this general upwards correlation. You can see the largest projects, like <a href="https://github.com/App-vNext/Polly">App-vNext/Polly</a> and <a href="https://github.com/apache/dubbo/">Apache Dubbo</a>, had the most workflow type matches, with about 150 matches each.</p>
<p>To us, this indicated that there&rsquo;s some connection between project maturity leading to more organized collaboration and higher usage of these structured workflow types. This was consistent with the fact that the projects that used no workflow types, like <a href="https://github.com/roboguice/roboguice">roboguice</a> or <a href="https://github.com/go-chi/chi">go-chi</a>, were all relatively small, with only a couple hundred contributions. If your project has a very high number of workflow types, this represents that your project tends to have highly structured collaboration, which can be good.</p>
<figure><img src="/img/240526/26.png"/>
</figure>

<p>These were our takeaways from examining workflow type matches. But we were also curious what open source developers — you all — thought. We validated our definition and visualization tools with open-source developers in a series of six interviews. They focused on introducing developers to the interactive explorer tool preloaded with their project.</p>
<figure><img src="/img/240526/27.png"/>
</figure>

<p>All developers agreed workflow types would help make better decisions on aspects of the development process. Some examples taken from our interviews: someone noted duplicate issue hubs might indicate a need for change in the documentation or bug reporting process, another person came up with the unique idea that workflow types can help prioritize and direct maintainership. If you see a competing PRs cluster, for example, but you see one of the PRs is part of a divergent PR cluster that resolves multiple issues, you might want to review that solution first. Our interviewees all noted that the visualization tools were useful for understanding inter-dependencies between features, providing valuable context that GitHub doesn&rsquo;t.</p>
<p>Finally, some interviewees rightfully highlighted that workflow types are limited because they don&rsquo;t examine the content of the issue, but we hope the visualization tool making even the initial surfacing of collaboration patterns easier is a first step.</p>
<h2 id="implications">Implications</h2>
<figure><img src="/img/240526/28.png"/>
</figure>

<p>Our work has wide-ranging implications. First, we&rsquo;ve seen how examining the sizes of clusters of linked issues and PRs can demonstrate the type of work it contains. Because clusters tend to be either very small or grow to be very large, this can predict growth in certain areas of the project and in turn inform resource allocation and prioritization.</p>
<p>As well, we&rsquo;ve seen that the visualizations of the graph perspectives can help navigate between initiatives and surface issues or PRs where additional effort is high impact, something our interviewed developers noted. The WorkflowsExplorer tool can be used to figure out which PR among a competing PRs workflow type is best to review, as I brought up before, and to visualize dependencies between features in development.</p>
<p>The tool can also help visually find problem areas in a project, where there are outsize numbers of competing PRs, duplicate issue hubs, or other forms of wasted work.</p>
<p><a href="https://dl.acm.org/doi/10.1145/3338906.3338949">Hirao et al.</a> argued that code review and duplicate issue identification tools can be improved by closer inspection of the links between nodes, among several other factors. Our approach does just that, and even extends it by analyzing multiple links within a cluster of nodes. Another implication of our graph perspective is that it&rsquo;ll allow us to further improve these tools: we can use our insights on cluster sizes to improve good-first-issue detection.</p>
<p>But the biggest next step for our work is talking more with developers like you. I&rsquo;ve already spoken about some of the developer interviews we&rsquo;ve conducted, but if you&rsquo;d like to work with us on understanding the collaboration patterns in your project, please get in touch or find me after this talk!</p>
<h2 id="talk-conclusion">Talk Conclusion</h2>
<figure><img src="/img/240526/29.png"/>
</figure>

<p>Today, I&rsquo;ve covered our novel graph-based perspective and our ideas for the workflow types definitions. The core plus of our approach is that it can be easily automated, making it easier for maintainers to identify and curb unwanted types of collaboration. As well, I&rsquo;ve highlighted some insights that this graph perspective has revealed and how we can make use of them to steer your communities in a better direction. Think of this PR-Issue graph as a Grafana dashboard that lets you monitor your project&rsquo;s collaboration health: it acts as a global point of reference for understanding your project as a whole and can give you early alerts when things might be going south. Again, reach out if you&rsquo;d like to work together with us!</p>
<hr>
<p>Thank you so much to the Linux Foundation for organizing the conference and making my first speaking experience such a memorable one. I thoroughly enjoyed the conference and am looking forward to speaking at others in the future — it&rsquo;s one of my goals for 2024!</p>
<p>Keep an eye out for the next post in this series where I&rsquo;ll cover more about the day-of experience, my hectic scheduling that I somehow pulled off, and lessons learned both from speaking and attending.</p>


<style>
	img {
		margin-bottom: 1rem;
	}
</style>


<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>The conference was smack in the middle of my first few finals — I even had to beg a professor to reschedule my first one — and I needed to rush back to Vancouver after my talk to make my second exam, so I was only able to stick around for one day.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Hanky-Janky</title>
      <link>https://kewbi.sh/blog/posts/240303/</link>
      <pubDate>03 Mar 2024</pubDate>
      <author>Emilie Ma (Kewbish)</author>
      <description>On mischief and a hacker&#39;s mindset.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p><a href="https://jvns.ca/blog/2022/03/08/tiny-programs/">Julia Evans</a> wrote a blog a while ago about writing tiny personal programs — the kind of thing where a website or service has some friction in behaving as you want it to, and you bust out some Python or Bash to wrestle it into compliance. Because the original site wasn&rsquo;t working as intended, these scripts tend to use features not intended for general consumption, since if the features were integrated into the main software you&rsquo;d probably not be writing the script in the first place. Some examples include manually inspecting web requests to hit the same internal API endpoint, or scraping HTML and parsing it with BeautifulSoup. As well, these scripts are usually written for a single user or maybe a small group of users, so it&rsquo;s reasonable to slap it together as fast as possible without much regard for its scalability or maintainability. If you only have a couple users, it&rsquo;s easier just to give them a detailed list of instructions and constraints (&lsquo;don&rsquo;t press the big red button until you&rsquo;ve typed into this text field!&rsquo;) than worry about handling edge conditions gracefully. When you see someone write a script like this, what words come to mind?</p>
<p>Two that spring to mind for me are <code>hacky</code> and <code>janky</code>: they&rsquo;re hacky, because they work around the limitations of what&rsquo;s presented, usually in an unintended way; and they&rsquo;re janky, because they&rsquo;re delicately cobbled together and fragile. I also find that <code>hacky</code> and <code>janky</code> both tend to be synonyms of <code>mischief</code>, and this sort of well-intentioned mischief and app misuse is what I&rsquo;d like to touch on today.</p>
<p>This janky mischief has a spectrum of seriousness. On one hand, you have Evans&rsquo; scripts, which mostly serve some real-world problems, like finding vaccine appointments. On the other, you have satirical (sorry, I meant very deeply serious) conferences like <a href="https://sigbovik.org/">SIGBOVIK</a> and <a href="https://programmingwithstyle.com/posts/howihackedmycar/">humorous stories on HN</a> that just hack for the sake of it. The stories I&rsquo;ll share in this post lie somewhere in between — my workarounds all do serve a genuine purpose, but I also find the way I went about implementing them very comedic<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>This is a post about my recent hacky hanky-panky and a hacker&rsquo;s mindset. You shouldn&rsquo;t do any of the following, in order to save time and have more confidence in your workflows, but maybe they&rsquo;ll inspire you to pull some hacky mischief yourself.</p>
<h2 id="copy-as-png">Copy as PNG</h2>
<p>I&rsquo;ve recently been building <a href="https://nested.name">NestedName</a>, a site to find <a href="https://en.wikipedia.org/wiki/Domain_hack">domain hacks</a> with your name. For example, it&rsquo;d help me find the domains <code>emil.ie</code> and <code>emilie.ma</code>, the latter of which I do own. I&rsquo;ve been planning for a soft launch and some outreach, so I&rsquo;ve been working on an animation for Twitter describing NestedName and its features as a little intro reel.</p>
<p>The sane thing to do would be to use a video recorder app, as my friend quickly pointed out. There are several tools that record your screen, then zoom in on your cursor and where you&rsquo;re typing to generate smooth, polished demo videos. But I didn&rsquo;t know of these beforehand, and anyways I wanted some specific animations in my video, so I thought I&rsquo;d just hand-animate it.</p>
<p>All my design for NestedName happens in Figma, so I thought I&rsquo;d look into plugins for animation within Figma so I could easily reuse design assets. I&rsquo;d already <a href="https://kewbi.sh/blog/posts/231231/">abused Figma for presentations before</a>, so I knew animations wasn&rsquo;t too far of a stretch. I was able to find a couple, including <a href="https://jitter.video/">Jitter.video</a>, <a href="https://www.figma.com/community/plugin/733025261168520714/figmotion">Figmotion</a>, and <a href="https://www.figma.com/community/plugin/889777319208467032/motion-ui-and-games-animation">Motion</a>. Jitter&rsquo;s free offering had a watermark, Figmotion was nice but wasn&rsquo;t able to animate between several frames, and Motion, while being the most intuitive, had a free tier with a 2s export limit, far too low for my ~20s goal. These tools also all relied on manually creating keyframes and adjusting animation durations, which was tedious and frustrating.</p>
<p><a href="https://canva.com">Canva</a> is another design tool I&rsquo;ve used. It boasts an impressive selection of community-created templates, useful for when I need an impressive-looking poster for a class without wanting to start from scratch. They also have a video editing tool and basic animations available: think &lsquo;pan&rsquo;, &lsquo;appear&rsquo;, and &lsquo;rise&rsquo;. After fighting various Figma plugins for an afternoon, I decided to just roll with whatever Canva had available and try animating with Figma instead.</p>
<p>Canva&rsquo;s free design tools are less powerful than Figma&rsquo;s though, since they&rsquo;re aimed at different markets. For one, Canva doesn&rsquo;t allow you to import custom fonts if you&rsquo;re not on their paid tier, and its font library, while extensive, also lacks the Google fonts that I&rsquo;m using with NestedName. A good idea at this point would perhaps to go back to find an appropriate screen recorder so I&rsquo;d be able to just record the NestedName interface and use Canva to edit on top of it. However, I decided a reasonable, rational, and clearly-thought-out alternative was to go into Figma, copy each text block as a PNG, and paste it into Canva as an image. I&rsquo;d then animate the individual textblocks as if they were text elements, and stitch the final animation together with Canva. This required a lot of exporting and copy-pasting: if you&rsquo;re ever in my boat, a good Figma shortcut to know is <code>Ctrl-Shift-C</code> for &lsquo;copy as PNG&rsquo;.</p>
<p>Canva&rsquo;s animation interface is more intuitive than manual keyframes, as it&rsquo;s mostly drag-and-drop and click-to-select for animations. This also means it&rsquo;s less powerful unless you&rsquo;re on the paid version, but even then the additional features are very limited.</p>
<ul>
<li>For one, you can&rsquo;t delay animations, so they all play in sequence at the start of the page. I wanted to delay some animations, though, so I&rsquo;d duplicate the page in Canva, set the first page&rsquo;s duration to be longer, and only apply the animation to the second page.</li>
<li>If I wanted to delay an animation after a page transition like a crossfade or wipe, I&rsquo;d create an empty interstitial page, set it to have a short duration of 0.3s, then have my main animated page.</li>
<li>Canva&rsquo;s animations on each page play in sequence following a heuristic from top down, from left to right. I had to rearrange some of my pages so the animation order would be correct, or otherwise use my workaround of creating several pages to animate one &lsquo;visual&rsquo; page.</li>
<li>You can&rsquo;t change the direction of certain animations on the free tier, so if you want to have an element fly in, it can only fly in from the left. Take this into consideration when laying out slides.</li>
</ul>
<p>On the whole, the animation experience was quite straightforward, and I found the point-and-click interface to be a better workflow than manually creating keyframes. Even if it required a lot of hacky text rasterization and animation tool misuse, you can&rsquo;t really tell in the final video. You can see the finished product <a href="https://twitter.com/nestedname">here</a> — while you&rsquo;re there, feel free to follow and stay tuned for more updates!</p>
<h2 id="githubdb">GitHubDB</h2>
<p>I wrote a <a href="https://github.com/kewbish/matter">static RSS feed aggregator</a> a few years ago, and as part of that project I wanted to add bookmarks. However, I wanted to avoid setting up another server as much as possible, because I was already using up all my then-free Heroku credits on running the CORS proxy for the site. Of course, I realized that I could just add a few endpoints to the CORS proxy app to handle bookmarks as well, but I also wanted to avoid setting up my own authentication as much as possible, which would have required setting up MongoDB or another free database provider<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>. Too much effort, I reckoned.</p>
<p>Clearly, though, outsourcing authentication to a GitHub OAuth app was much easier. Then, I could just store my bookmarks as comments on a GitHub issue in the same private repo I already use to store my notes, so my bookmarks would be accessible from GitHub as well! <a href="https://twitter.com/fortysevenfx/status/1343587407799738368">There&rsquo;s even prior art</a> for the idea, though I came up with it separately.</p>
<p>Using GitHub issue comments to store and read bookmarks from is perhaps my most egregious misuse of GitHub, but I&rsquo;ve also used it for sharing unlisted files and portfolios. Last year, I was applying to research assistant positions at my university and needed to submit a portfolio of prior work. I could have set up a separate unlinked portfolio page, but I also wanted to host several large demo videos, and while I could do that with Netlify, I wanted to send the portfolio ASAP rather than fiddling with styling another page. So, I threw everything into a private, unlisted Gist and sent the link to my professor. Little known fact: Gists can be cloned and committed to just like normal Git repos, so while the Gist interface doesn&rsquo;t let you upload binary files directly, you can just push them from the command line.</p>
<p>Recently, I&rsquo;ve also been considering using GitHub Mobile as a mobile text editor app for my blog posts. I make this arbitrary delineation between my time at home: &lsquo;upstairs&rsquo; being work in my office, and &lsquo;downstairs&rsquo; being time in the living room, maybe with a tablet. I&rsquo;d like to better utilize some of my &lsquo;downstairs&rsquo; doomscrolling time, so I&rsquo;ve downloaded GitHub mobile and plan to use it to read through and edit some of my drafts, which are themselves committed into my private notes repo.</p>
<p>I have this concept of &lsquo;free-driven development&rsquo;: making software architecture or process decisions motivated purely on keeping everything within the free tier of service providers. Using GitHub as a free, private database was one such decision. I think this concept also gels well with the hacker&rsquo;s mindset of finding workarounds to artificial pricing limits.</p>
<h2 id="smtp-please">SMTP, Please</h2>
<p>When I first bought the <code>kewbi.sh</code> domain, I wanted to set up email so I could send and receive emails from a nice <code>hey@kewbi.sh</code> address. Receiving email to this address was easy enough with mail forwarding from Namecheap, but sending mail was a little more complicated. I didn&rsquo;t want to sign up for Google Workspace, which is paid, and I also didn&rsquo;t want to switch to another email provider, which would also likely be paid.</p>
<p>However, there&rsquo;s a relatively well-known workaround to send mail from another domain via the Gmail SMTP servers. It involves generating an app password for the Gmail account you want to use to send emails from, then selecting the Gmail SMTP servers in the configuration and and using that app password as authentication. You can read more about it <a href="https://emailforwardmx.com/knowledgebase/14/Send-mail-with-your-domain-using-Gmail.html">here</a>. I&rsquo;m convinced this probably isn&rsquo;t against ToS, but I&rsquo;m also very aware it&rsquo;s not supported and is likely unintended. Like with most of the other workarounds above, I&rsquo;m relying on undocumented behaviour, which I realize could change any time, taking my whole workflow with it. But if that happens, I&rsquo;ll just hack together another solution — no biggie.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Part of being a hacker is this ability and willingness to bend (software) boundaries and go beyond what you&rsquo;re given at face value. A friend once said they had a thesis that the world is malleable, and I think that&rsquo;s even more so for self-described hackers. We have the skills, or determination to pick up the skills, to navigate beyond what&rsquo;s expressly presented: to misuse Canva, GitHub, Gmail, and more. Even if it&rsquo;s janky, I think that hacky workarounds have their own charm.</p>
<p>An example of free-driven development in the real world: I recently soft-launched <a href="https://nested.name">NestedName</a>, a site to help you find unique domains with domain hacks and unusual TLDs. I think this blog&rsquo;s domain (<code>kewbi.sh</code>) is pretty clean, and I own my full name as a domain (<code>emilie.ma</code>) as well. Quirky domains are something that I nerd out about often, so I wanted to make a site to help folks find them too — check it out, if you haven&rsquo;t already.</p>
<p>I run NestedName for completely free, and there&rsquo;s a fair bit of hackiness behind the scenes. For one, the frontend, dynamic open graph image generation function, DB, and backend are each hosted on separate providers (Cloudflare Pages, Vercel, Supabase, and Fly.io, respectively). For another, I was using an awkward heuristic from the free Cloudflare DNS API to determine if a domain was taken, which proved to be insufficient, as I kept receiving messages about during launch. None of the code follows good design patterns, and when adding new features I try to bodge them in with as little refactoring as possible. It&rsquo;s a fairly small codebase, so it&rsquo;s been feasible so far, and it&rsquo;s been nice not to have to think too hard and just keep shipping.</p>
<p>I find myself dealing with perfectionism and a desire to &lsquo;do things right&rsquo; sometimes. A little mischief around what&rsquo;s possible to make happen tends to take the edge off some of that navel-gazing. I think the hacker mindset embodies this almost rebellious attitude towards the prescriptivism and limits of software: it brings some of the fun back to building. It&rsquo;s just plain fun to dive deep into odd backward compatibility details or be proud of yourself for figuring out a complicated, multi-step, workaround not knowing that another tool exists. As corporate, walled-garden software has grown entrenched in every aspect of our lives, I think we need a little more hanky-panky and creativity in how we (mis)use it, and I hope this collection of mischievous ideas has inspired you to try breaking some limits and exploiting little-known features yourself<sup id="fnref1:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>I&rsquo;ve been reading about design patterns lately for my Software Engineering class, and I take no small amount of satisfaction in my small rebellions against the prescribed best practices. Cohesion, avoiding duplicated code, and refactoring magic numbers? Who needs that?&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Assuming good faith, of course!&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a>&#160;<a href="#fnref1:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>The QoS of QS</title>
      <link>https://kewbi.sh/blog/posts/240225/</link>
      <pubDate>25 Feb 2024</pubDate>
      <author>Emilie Ma (Kewbish)</author>
      <description>On self-tracking UX and how we can improve it.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>I came across <a href="https://ericchiang.github.io/post/spotify/">this post by Eric Chiang</a> recently. They downloaded their past ten years of Spotify listening data into a big ZIP and conducted their own version of Spotify Wrapped. They graphed their most listened-to artists, how those artists changed over time, their listening time distribution across the day, and their favourite albums from a particular year. It looks like a fun time capsule and nostalgia trip — the perfect application of some hacky scripting skills.</p>
<p>The post ends off with a call to explore your own data a little more, which got me thinking about the work Chiang did to retrieve all their data, write scripts to process it, and visualize it. All these steps are manual processes: if you want to do something like this, you&rsquo;d better have some time on your hands and a hankering to wrangle with Matplotlib.</p>
<p>You should also have some idea of what exactly you want to find or visualize — otherwise, wading through the hundreds of thousands of raw data points without a goal in sight gets overwhelming. Clearly, as seen on the <a href="https://news.ycombinator.com/item?id=39350541">HN discussion</a>, folks do have a lot of ideas for what they&rsquo;d like to visualize (e.g. finding one-hit wonders or songs that are correlated with some other data dimension like the weather). What&rsquo;s the barrier, then? Why aren&rsquo;t we seeing everyone&rsquo;s unique graphs?</p>
<p>Right now, extracting your data from cloud services like Spotify, YouTube, GoodReads, or others requires a lot of <em>effort</em>. Services like Spotify that provide a one-click download button are already making it easier, compared to having to roll your own scraper, but there&rsquo;s still activation energy in seeking out your data and taking the time to visualize it. Because the bottleneck is in the data, I think people tend to end up collecting the data for a particular visualization in mind, rather than the other way around.</p>
<p>But I think that&rsquo;s backwards — to me, it makes more sense to explore your data with visualizations to aid you, unless you have a particular research question in place. For folks who&rsquo;re just trying to get a sense of their data without a specific goal,</p>
<p>This is a post about navigating your data, the Quantified Self community, and how we can make data spelunking more compelling.</p>
<h2 id="quantified-self">Quantified Self</h2>
<p><a href="https://quantifiedself.com/">Quantified Self</a> is a movement broadly centered around <em>tracking</em>. Large swathes of the community are focused on health tracking: one&rsquo;s weight, bodyfat percentage, number of calories burned per day. However, other types of tracking are common: usage of time, mood, carbon footprint due to flights taken, and so on.</p>
<p>People interested in self-experimenting (or inspired by the pretty result graphs) tend to be drawn to QS: it presents some order in our lived experiences, and gives us levers to continue improving our lives. I recently wrote about <a href="https://kewbi.sh/blog/posts/240218/">checkpoints</a>, and I think QS data collection is the extreme manifestation of checkpoints. Collecting tens or hundreds of data points on ourselves a day gives us something to look back on and helps visualize the deltas between timesteps.</p>
<p>QS took off with the adoption of IoT devices and trackers, like the popular FitBit or Apple Watch. These made health data salient and readily available, for the first time. With the advent of SaaS companies and their general trend towards walled gardens, though, our data is becoming more inaccessible and opaque.</p>
<h2 id="quality-of-service">Quality of Service</h2>
<p>I&rsquo;d say the user experience of quantified self tracking is generally very poor. Take the Spotify example: Chiang had to submit a request on a form probably created solely for compliance, then wait up to thirty days for their data to be processed and returned to them. Then, they had to comb through the data to identify points of interest and write a whole bunch of visualization scripts.</p>
<p>This was for a relatively open data faucet, and a single app at that, though. There are folks who&rsquo;ve written whole tool libraries to process and collate every aspect of their lives. <a href="https://beepb00p.xyz/hpi.html">Karlicoss&rsquo;s HPI</a> package brings together their browser history, texts, health data, TODOs, and more into a nice Python interface. I particularly like their motivation for the project:</p>
<blockquote>
<p>[O]nce the data is available as Python objects, I can easily plug it into existing tools, libraries and frameworks. It makes building new tools considerably easier and opens up new ways of interacting with the data.</p>
</blockquote>
<p>They emphasize the ad-hoc-ness and interactivity that I think the QS experience should be like. Our data are artifacts that we created, and I think we should be able to seamlessly pick and choose from what we&rsquo;ve made to augment and inform what we&rsquo;ll continue to do.</p>
<p>On the other hand, I understand that making straightforward ways to access raw user data probably isn&rsquo;t the best use of engineering resources for a business, who&rsquo;d rather be building their core product instead. There are few who are motivated enough to want their data, so to a business a rarely-used &lsquo;Export my data&rsquo; form suffices.</p>
<p>If most apps won&rsquo;t support the extensive data tracking and collation QS relies on, then, what will? The answer, in practice, is a spreadsheet. Julian Lehr <a href="https://julian.digital/2020/02/23/my-quantified-self-setup/">wrote about their Airtable-based setup</a>, and Felix Krause <a href="https://krausefx.com//blog/how-i-put-my-whole-life-into-a-single-database">wrote about their Telegram bot → SQL database workflow</a>. Both have automated aspects of their data collection based on publically available APIs, but both also have some sort of manual update habit.</p>
<p>In some sense, bringing all your life&rsquo;s data into spreadsheets is the opposite extreme of keeping it all locked away in some SaaS: it&rsquo;s now extremely easy to process and pull into other visualizations or projects, like Karlicoss&rsquo;s work. The user experience is intuitive, though decidedly less captivating than most aesthetic tracker-specific apps.</p>
<p>In my ideal world, we wouldn&rsquo;t have to be explicitly collecting all of our own data: it&rsquo;d export itself, and we&rsquo;d be able to access it anytime from some central, private store. There&rsquo;d be visualizations automatically generated from data<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, reminders and ideas for trends that were detected, and more straightforward data connections between apps. But, for now, spreadsheets are a start.</p>
<h2 id="conclusion">Conclusion</h2>
<p>To me, current QS tools feel clunky, clinical, and both overwhelming and underpowered. However, I think reframing QS as an inquisitive and explorative activity can help us design better interfaces and processes for it. As well, viewing it through a lens of nostalgia and rediscovery makes for some interesting ideas. I once built <a href="https://github.com/kewbish/phasis">a tool</a> to scan through your notes in a Git repository and resurface notes that you hadn&rsquo;t edited in a while or reflected on, like spaced repetition for your thoughts. While the data I was working off of was less granular than daily health updates and relied on the heuristics available in Git history, this data was also collected <em>ambiently</em>, unlike today&rsquo;s QS tooling.</p>
<p>QS ties into many of my thoughts on <a href="https://kewbi.sh/blog/posts/211114/">metadata</a> and <a href="https://kewbi.sh/blog/posts/210124/">personalizable software</a>, and it&rsquo;s no surprise to me that the ideas that immediately come to mind revolve around richer interactive data formats and <a href="https://kewbi.sh/blog/posts/231126/">translating between data sources</a>. As I mentioned in the introduction, self-tracking also speaks to me as a form of reflection on how I&rsquo;ve changed, but in a quantitative format that&rsquo;s harder to handwave. While I won&rsquo;t be creating a <a href="https://howisfelix.today/">full public life dashboard</a> anytime soon, I&rsquo;m inspired by that level of self-understanding and dedication to making some sense of the strange way of being we call life.</p>
<p>I used to create QS-level stats on my writing output on this blog, and in a now-unpublished post, even stats on the reading I&rsquo;d done over a year. I don&rsquo;t compute any metrics on my writing anymore, since I think it&rsquo;d be fairly disappointing to see my few-and-far-between posts. I&rsquo;d like to change that though: I think lately my perfectionism has been leading me to take this blog a little more seriously than I should. I&rsquo;d like to start writing smaller, less polished posts more frequently, as opposed to forcing out 2k-word-long vomits whose core theses I get too attached to but can&rsquo;t seem to express properly. Instead, here&rsquo;s to the <a href="https://austinkleon.com/2020/12/10/quantity-leads-to-quality-the-origin-of-a-parable/">pottery parable for prolific work</a> and Alice Maz&rsquo;s recent reminder to me that <a href="https://alicemaz.substack.com/p/you-can-just-do-stuff">I can just do stuff</a>!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>Perhaps in the era of ChatGPT, automatically creating little scripts or visualizations like this might be feasible.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Checkpointing</title>
      <link>https://kewbi.sh/blog/posts/240218/</link>
      <pubDate>18 Feb 2024</pubDate>
      <author>Emilie Ma (Kewbish)</author>
      <description>On finding reminders to reflect.</description>
      <content:encoded><![CDATA[<p>Checkpoints are ubiquitous in games. I grew up playing <a href="https://roblox.com">Roblox</a>, and a popular genre of games I&rsquo;d play was &ldquo;obbies&rdquo;, or obstacle courses<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. These had hundreds or thousands of stages, where your blocky character would leap from precariously angled platform to platform. You&rsquo;d dodge the &rsquo;lava&rsquo; tiles and the rotating Wipeout arm, holding your breath until you landed safely on the spawnpoint, emblazoned with a sawblade icon. Sometimes, you wouldn&rsquo;t quite make it: you&rsquo;d clip the edge of an obnoxiously saturated red block. You&rsquo;d teleport back to the previous checkpoint, groan, and start delicately maneuvering again.</p>
<p>Checkpoints in games were primarily used for saving the current state of the game to disk so the player can load it again in the future. I think most people expect savepoints in games nowadays. Games without checkpoints, like Bennett Foddy&rsquo;s <a href="https://en.wikipedia.org/wiki/Getting_Over_It_with_Bennett_Foddy">Getting Over It</a> feel extra frustrating: you make all this progress, only to not have any record of it and no way to get back to where you were before.</p>
<p>Productivity and mindfulness habits like journalling and weekly reviews bring video game checkpoints into our everyday lives. When you think back to the past year, what does your mind land on? Folks naturally fall back on the start and end of projects, new adventures, and major milestones as a sort of personal checkpoint in their life.</p>
<p>I think it&rsquo;s fairly common for people to get caught up in the swing of things, jump from task to task, forget the wins they&rsquo;ve earned, and end up feeling like they haven&rsquo;t made any progress towards their goals and intentions at the end of the year (itself another checkpoint). Explicit checkpoints serve to highlight these landmarks, even if they&rsquo;re not as grandiose as what one set out to accomplish. Just like Roblox obby spawnpoints, checkpoints give us a chance to appreciate the progress we&rsquo;ve made and create opportunities for reflection. Checkpoints let us stop and <em>think</em> a little, before continuing to move forward.</p>
<p>This is a post about framing the ways we self-reflect as checkpoints. While forcibly gamifying productivity is usually a bit of a gimmick, the concept of game checkpoints is one that I think clearly maps to the way our minds center around past milestones.</p>
<h2 id="checkpoints-as-deltas">Checkpoints as Deltas</h2>
<p>Intuitively, checkpoints are like landmarks that demarcate single, instantaneous moments in time. The New Year might be a checkpoint. Graduation, finding your first job, or hitting a milestone of newsletter subscribers might be as well. They&rsquo;re a natural way for your brain to keep track of time and organize events: checkpoint X happened, then next checkpoint Y, and so on. However, I also see checkpoints as a way to visualize progress. To me, checkpoints are more about recalling the deltas in between checkpoints — about reflecting on the journey, not the final destination.</p>
<p>If you&rsquo;ve ever visited the visual, more artsy, Bullet Journal community, you&rsquo;ll know about habit trackers. The Bullet Journal method is a popular way to organize your planning, and habit trackers are a common extension to the core &lsquo;method&rsquo;. Most folks create grids or bar charts each month with a row for each habit to track and columns for each day, then find creative ways to decorate their tracker throughout the month. Many have noted that the visual cues of the tracker and its presence close to their daily planning pages remind them to complete their habit, if only so they can have the fun of completing a tangible marker of progress. When you&rsquo;re in between checkpoints in Roblox obbies, you want to keep going successfully through to the next checkpoint. With bullet journalling, habit trackers play the same role: people are motivated to make it to the next checkpoint, especially with such a visible reminder each day. Habit trackers serve as progress bars IRL, and the process of creating a new tracker for each month&rsquo;s setup acts as a checkpoint.</p>
<p>Steph Ango&rsquo;s <a href="https://stephango.com/40-questions">40 questions to ask yourself every year</a> is another example of using checkpoints to reflect on deltas. I particularly like question 18: &ldquo;Compared to this time last year, are you: happier or sadder? Thinner or fatter? Richer or poorer?&rdquo; While these are shallow, arbitrary binaries, these questions tacitly invite us to think about the events along the year that caused us to turn out happier (or sadder) and why. Some questions are also rather targetted (question 26: &ldquo;What was your greatest musical discovery of the year?&rdquo;) so your answer might not be from the last few months. I find that I typically suffer from recency bias when reflecting, so questions like these helps to zoom out from the hot new discoveries fresh in my mind from the later bit of the year, to think about my mindset from the beginning of the year. Ango&rsquo;s call for us to complete these questions each year makes the yearly habit a checkpoint and opens up opportunities to compare your life delta across years.</p>
<h2 id="checkpoints-as-interrupts">Checkpoints as Interrupts</h2>
<p>A core idea of Daniel Kahneman&rsquo;s <em>Thinking, Fast and Slow</em> is that our brains operate in two tracks: System 1, the impulsive, fast-acting mode that handles emotional reactions and quick decisions; and System 2, the slow, logical mode that activates when we do deeper thinking and visualize mental models. Our mind&rsquo;s default track is System 1, and part of what Kahneman shows is that it takes some effort to engage System 2. For example, our brains often operate with inherent stereotyping (System 1), and we need to take conscious action and be aware of our biases in order to treat people fairly (System 2).</p>
<p>Productivity checkpoints, like the reflection activities mentioned above, are opportunities for this context switching to occur. It&rsquo;s easy to run in System 1 all the time, but we need some System 2 thinking every so often to learn from our past mistakes. To borrow my operating system class&rsquo;s terminology, checkpoints are hardware interrupts to let our System 2 software run. Checkpoints force a stricter delineation between your typical state of action and a reflective state of mind. Because checkpoints are like landmarks, they&rsquo;re times for us to catch our breath, spinning down System 1 for a bit, which gives System 2 an opportunity to jump in.</p>
<p>Another common productivity habit is the weekly review. I most like Ben Kuhn&rsquo;s <a href="https://www.benkuhn.net/weekly/">take on the process</a>: reading life advice essays that resonate and motivate you, review what happened over the week since the last review (a checkpoint!), then write on a list of impromptu and recurring prompts. Reviewing your progress and reminding yourself about your intentions and goals week-to-week is useful, since otherwise you often forget about your resolutions and get caught up easily in the daily monotony. Even small, granular checkpoints like weekly reviews can be useful — checkpoints aren&rsquo;t just for yearly, exhaustive, or otherwise mentally &rsquo;expensive&rsquo; reflection.</p>
<p>Making checkpoints a habit curiously allows you to leverage your System 1 to shut itself down. By making checkpoints a weekly, recurring process, your System 1 can start to automatically internalize that it needs to let your System 2 get a word in edgewise. This is also why habit trackers seem so effective for folks: filling in the habit tracker becomes a habit, so it feels odd if you haven&rsquo;t completed the habit and can&rsquo;t tick the box.</p>
<h2 id="checkpoint-creation">Checkpoint Creation</h2>
<p>While I was talking through the idea of this post with a good friend, they asked if checkpoints were encountered or actively created. I think there are examples of both. Birthdays, the start of a new quarter, and New Year&rsquo;s are sort of societally imposed checkpoints. You don&rsquo;t choose to pass them by: they&rsquo;re stamped into your calendar as givens. These types of checkpoints are not actively initiated, but are still just as valid for checking in with yourself. As a bonus, their socially recognized nature makes you more likely to be in a thoughtful mood, making it less effortful for your System 2 to take over to reflect.</p>
<p>On the other hand, creating checkpoints via productivity habits for yourself is intentional. These require more activation energy to get started with and to build the habit for: you&rsquo;re doing it for you, and no one is reminding you to commit.</p>
<p>One unique activity I see as a &ldquo;created checkpoint&rdquo; is applying to jobs and programs. I have a personal thesis that people should submit at least one application per year (swap out &lsquo;one&rsquo; and &lsquo;year&rsquo; for the frequency appropriate to your current life phase). Every time I fill in an application for something, I get to really dial in on my values and how they&rsquo;ve changed since the last form I filled out. I take the opportunity to &ldquo;Tell me about yourself&rdquo; to think about what makes me <em>me</em> now, what made me <em>me</em> previously in my last application, and what&rsquo;s changed in between. I add new lines to my resume, remove old ones to make room for new achievements, and reword bullet points to better match what I&rsquo;m interested in now. Each application is one of my checkpoints, and even if I don&rsquo;t get to see what I wrote ever again, I still find it a useful exercise in recalling how I&rsquo;ve grown over time. If you choose to create more reflection checkpoints via this route, a nice side effect is that you&rsquo;ll likely get access to some new resources and opportunities along the way.</p>
<p>Creating checkpoints should be done carefully and mindfully, though. Some checkpoints are more emotionally charged than others. For me, career-focused applications are a delicate balance: I try to be proud of what I&rsquo;ve achieved recently, but find it hard to write about things effectively. (&lsquo;Effectiveness&rsquo; is also subjective here, and depends what my intention for the checkpoint is.) It&rsquo;s hard because you have all the vibes and vague ideas of personal missions and ambitions in your head, but reifying that into words on paper is challenging. For opportunities I&rsquo;m really excited about, I also naturally focus on my successes and spinning my experiences a certain way. If I fill in a form and realize I haven&rsquo;t really done anything new, or that there haven&rsquo;t been any recent relevant achievements, that can feel a little disappointing. This all puts some more stress into the process, which really shouldn&rsquo;t be what checkpoints are about.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I think checkpoints speak to me especially because <a href="https://kewbi.sh/blog/posts/210725/">I&rsquo;m so drawn to lists and neat organization</a>. Framing my personal productivity habits as checkpoints helps me compartmentalize and create structure on which I can reflect. I surround myself with a lot of busy people — there&rsquo;s a whole other discussion to be had on what the point of all this busyness is, but busy people in particular need checkpoints. I know all too well that being busy makes me go into whack-a-mole mode, where I&rsquo;m just putting out fires for the day to day without thinking about my overarching goals. Little checkpoints, like trackers, weekly reviews, and job applications, bring a reminder of intentionality back to my life.</p>
<p>Maybe I&rsquo;ll amend my thesis from above: people should create at least one checkpoint each year, just for the sake of having a checkpoint. Checkpoints should be about pushing yourself to break out of your usual cycles of work without taking yourself too seriously. Reflect on how you&rsquo;ve changed and what&rsquo;s fueled that change since the last checkpoint, and take a pause. Then, just like in the Roblox obbies of my childhood: keep going, keep growing, and keep making your way onwards to your next checkpoint.</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>When I was in elementary school, we had to share laptops in pairs, so obbies were a way both students could play at the same time. We&rsquo;d have one of us manning the spacebar to jump and the other controlling the character&rsquo;s WASD movement. It made for good bonding.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    
    <item>
      <title>Presenting in Figma</title>
      <link>https://kewbi.sh/blog/posts/231231/</link>
      <pubDate>31 Dec 2023</pubDate>
      <author>Emilie Ma (Kewbish)</author>
      <description>On NeovimConf 2023 and making slides in Figma.</description>
      <content:encoded><![CDATA[<p>I gave a lightning talk recently at <a href="https://neovimconf.live/">NeovimConf 2023</a>, sharing a bit about my personal notetaking system in Vim. The content of the talk was similar to my previous <a href="https://kewbi.sh/blog/posts/210815/">A Plaintext Zettelkasten</a> post, with less Zettelkasten theory and more Vim keybinds. The conference was streamed live on Twitch, and I got to chat a bit with folks while watching my (prerecorded) talk. Here&rsquo;s the embed:</p>


<div style="display: flex; justify-content: center; margin-bottom: 1em">
	<iframe width="560" height="315" src="https://www.youtube.com/embed/1a6AEJxH_Dk?si=KuoX7d_z8oiCxX96" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
</div>


<p>I&rsquo;d highly recommend checking out some of the other talks — the talk playlist will be updated <a href="https://www.youtube.com/playlist?list=PLhlaLyAlbLlr-usEauWLPy4O2ggAvZuKl">here</a>.</p>
<p>People seemed to like my setup and appreciate how I nerded out over it, which was heartwarming<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. I also got some good feedback on my slides&rsquo; aesthetic (you can see them in the video) and a few questions on how I made them.</p>
<p>This is a short post on creating presentations in Figma, with a few links to resources I&rsquo;ve used that might make your design experience a little easier.</p>
<h2 id="why-figma">Why Figma?</h2>
<p>I designed and exported them all in Figma, which I think is a fairly unconventional use for the tool. I&rsquo;ve previously done my Directed Studies (a research course) <a href="https://gist.github.com/kewbish/fcf9f3e4b919a3cb1fa3c889611ce9e2">slides in Figma</a><sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> and had good experience doing so. Figma is already the defacto design tool for many web developers, so it&rsquo;s a good choice for presentations too if you have Figma components or libraries you want to reuse.</p>
<p>I don&rsquo;t use traditional presentation tools like Powerpoint or LibreOffice Impress, since I find it hard to get started with a blank (or very generic) slate. In the past, I&rsquo;ve used Canva for small presentations like these since it has such a vast library of templates — the little things like extra clip art or background assets really makes slides look polished.</p>
<p>I tried Figma for slides recently, first for my Directed Studies slides, then for this lightning talk, because I&rsquo;ve had pre-existing assets in Figma that I wanted to reuse in high quality in my presentations. For my Directed Studies project, I had diagrams from our paper; for my lightning talk, I wanted to use the branding elements from my website, like my gradient and sparkles. Figma makes it easier to design things more precisely than Canva with autolayout, and it&rsquo;s nice to be able to pull from my Figma library without converting to a flat-file image format and back.</p>
<h2 id="workflow">Workflow</h2>
<p>Throughout this post, I&rsquo;ll be using my Directed Studies slides as a running example. Here&rsquo;s what my Figma file looked like:</p>
<figure><img src="/img/231231/figma-overview.png"
         alt="Figure 1. Slides overview"/><figcaption>
            <p><em>Figure 1. Slides overview</em></p>
        </figcaption>
</figure>

<p>You can create slides with Frames in Figma. Click the grid Frame icon, or press <!-- raw HTML omitted -->F<!-- raw HTML omitted -->. Select <code>Presentation &gt; Slide 16:9</code>.</p>
<p>I like to create a base frame for my slides, so I can have a consistent background. Once you&rsquo;ve designed this, you can select frames and <code>Ctrl-C</code> / <code>Ctrl-V</code> to place them in series. Figma lays them out automatically in a nice line, which makes scrolling through a presentation easier. Creating slides out-of-order is a little more annoying, since you&rsquo;ll have to drag all the frames into line, so I tend to work through my slides in-order.</p>
<p>After I&rsquo;m done with my slides, I use Figma&rsquo;s Prototype tool to wire the transitions up. You can create a new Flow by clicking on your title slide frame, then right-clicking and selecting &lsquo;Add Starting Point&rsquo;. Then, in Prototype mode, you can hover over the side of a frame to wire it to the next slide. I set each transition to &lsquo;On click, navigate to [frame for next slide], instant&rsquo;. There are some animation options available though, like wipes, dissolves, and notably, Smart Animate, which smoothly animates between objects duplicated across frames. This part is a little tedious, but I haven&rsquo;t found a plugin that&rsquo;ll do it for me yet.</p>
<figure><img src="/img/231231/slide-transition.png"
         alt="Figure 2. Transitioning between slides"/><figcaption>
            <p><em>Figure 2. Transitioning between slides</em></p>
        </figcaption>
</figure>

<p>Finally, you can present with the Play button in the upper-right hand corner. You can move between slides with the arrow keys, as in Powerpoint.</p>
<figure><img src="/img/231231/press-play.gif"
         alt="Figure 3. Demoing the presentation"/><figcaption>
            <p><em>Figure 3. Demoing the presentation</em></p>
        </figcaption>
</figure>

<p>You can also export each slide as a PNG by selecting all your frames and heading to <code>Design &gt; Export &gt; PNG &gt; Export X layers</code>. I used this in my NeovimConf talk, as I recorded my webcam separately from my slides.</p>
<h2 id="miscellaneous-tips">Miscellaneous Tips</h2>
<p>For in-slide animations, I duplicated a slide multiple times and added Prototype transitions between each subpart of the slide. I used this for animating bullet points that appeared on each keypress. You might be able to implement this more efficiently with Variables, but I typically only have at most three subparts per slide, so I haven&rsquo;t explored this yet.</p>
<figure><img src="/img/231231/inslide-transition.png"
         alt="Figure 4. Not a very DRY presentation"/><figcaption>
            <p><em>Figure 4. Not a very DRY presentation</em></p>
        </figcaption>
</figure>

<p>For page numbering, I&rsquo;ve used <a href="https://www.hypermatic.com/pitchdeck/">Pitchdeck</a>, a Figma plugin, in the past. You can add the plugin normally via the Figma Components menu, but beware some features like PDF export and such are paywalled. Pitchdeck is quite fully-featured and appears to do the in-slide animations I&rsquo;d be looking for, but I found their interface unintuitive and a little overpowered for my needs.</p>
<p>To add slide numbering, open Pitchdeck and click the Page icon in the upper-left of the plugin window. Toggle &lsquo;Enable auto slide numbers&rsquo; to on. You can customize slide numbering styling here as well, which I think is a nice way to tie into the rest of your presentation branding. If you&rsquo;re using my janky method of duplicating slides for in-slide animations, Pitchdeck will see each individual frame as a new slide to number, so I resorted to deleting everything except the last subpart of my animation, running the auto-slide numbers, then recreating my animation. Try to add slide numbers once at the very end if you forsee this happening.</p>
<figure><img src="/img/231231/pitchdeck-numbering.png"
         alt="Figure 5. Adding slide numbering in Pitchdeck"/><figcaption>
            <p><em>Figure 5. Adding slide numbering in Pitchdeck</em></p>
        </figcaption>
</figure>

<p>A parting tip I&rsquo;d give is that it really helps if little things like asset theming ties in well together. I was able to reuse the metallic gradient I use for titles on this blog (see this article header) for my titles as well as for my webcam frame and its decorations<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>.</p>
<h2 id="conclusion">Conclusion</h2>
<p>I&rsquo;m far from a Figma power user, but it&rsquo;s fairly easy to create cohesive presentations in Figma even with basic tools. I&rsquo;d love to reuse my NeovimConf template for future talks (with different content, of course!)</p>
<p>Speaking of speaking, I&rsquo;d like to apply for more opportunities in 2024. Writing and rehearsing my NeovimConf talk was a great learning experience in terms of Vim content, even though I&rsquo;d already done quite a bit of tinkering myself, not to mention very validating to get to chat with other Neovim-adjacent folks and be able to share a bit about my unique workflows. I have a lot to learn in terms of storytelling and talk structure — I got feedback from a friend mentioning how they thought I was listing off keymaps without showing how they fit together well in a system. Figuring out how to explain things you&rsquo;re passionate about in an accessible way is trickier than it seems, especially since you have all the pictures and mental models in your head and it&rsquo;s easy to assume others do too. Public speaking is also far out of my comfort zone. This was a pre-recorded talk, but I&rsquo;d like to challenge myself to give something live if I have the opportunity.</p>
<p>Thank you again to the NeovimConf team for putting together and hosting such a fun conference! I met plenty of fellow Vim nerds and learned many fun tricks, and all in all had a great time. Can&rsquo;t wait to rewatch the talks and see what NeovimConf 2024 holds!</p>
<div class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1">
<p>I will try not to fangirl too hard over the fact that the <a href="https://www.youtube.com/c/theprimeagen">Primeagen</a> said, and I quote: &ldquo;this notetaking stuff is pretty dang cool&rdquo;.&#160;<a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2">
<p>Did you know that Gists on GitHub are just like full repositories? You can <code>git clone</code>, commit other files, and push to them. The default Gist web UI doesn&rsquo;t allow for uploading binary files, so I used this workaround to host my slides in a Gist repo.&#160;<a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3">
<p>You can click any element, go to <code>Fill &gt; Styles [the four dots icon] &gt; +</code> to copy an element&rsquo;s fill for reuse. This saved a lot of time compared to having to copy-paste fills between everything.&#160;<a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</div>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
