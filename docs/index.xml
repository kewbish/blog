<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Yours, Kewbish - a collection of </title>
    <link>https://kewbi.sh/blog/</link>
    <description>Latest Yours, Kewbish posts</description>
    <managingEditor>(Emilie Ma ◦ Kewbish)</managingEditor>
    <lastBuildDate>Sun, 07 Mar 2021 20:05:24 -0800</lastBuildDate>
    
	<atom:link href="https://kewbi.sh/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Towards Web Monetization</title>
      <link>https://kewbi.sh/blog/posts/210307/</link>
      <pubDate>07 Mar 2021</pubDate>
      <author>Emilie Ma ◦ Kewbish</author>
      <description>On speculations about the future of WM.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>It&rsquo;s funny how scholarship essays can prompt thinking on topics you thought you&rsquo;ve forgotten, and spark new thoughts even after you&rsquo;ve penned your profile and sent it off to the selection committee. I applied to something recently, in which I had to go through the usual drivel of describing far-off plans for my future. I talked a bit about open source and a bit about leadership, but the part that&rsquo;s stuck with me was a part about impacting the future of the web. &lsquo;Reinventing the web&rsquo; seemed a bit lofty and grandiose, so I chose to focus a bit about my experience with Web Monetization.</p>
<p><a href="https://webmonetization.org/">Web Monetization</a> is something that&rsquo;s been on my mind&rsquo;s back burner since the hackathon <a href="https://dev.to/devteam/announcing-the-grant-for-the-web-x-dev-hackathon-winners-1nl4">Dev.to</a> hosted. (I&rsquo;ve written a post about the hackathon over <a href="https://kewbi.sh/blog/posts/200531/">here</a>, if you&rsquo;re interested.) If you&rsquo;re not familiar with Web Monetization, I highly recommend checking their website out, and looking at some of the projects and discussion that&rsquo;s sprung up around it. A four-way partnership between Mozilla, Creative Commons, Dev.to, and Coil, the hackathon encouraged people to build new toolkits to implement WM to work with and extend web environments. I&rsquo;d initially gone into it purely for the technical challenge <del>and for a chance at merch</del>, and had approached my second project, a GitHub revenue sharing Chrome extension also based on WM, with a similar perspective.</p>
<p>However, as I&rsquo;ve continued to see articles pop up every now and again about WM, I&rsquo;ve started to think a bit more about the monetization models of the web today, and how WM can potentially augment, extend, and change them. For example, there&rsquo;s these big tech giants who are <em>stealing all our data</em> and <em>greedily injecting ads wherever they can</em> and generally not doing very privacy-, or even human-friendly things. There&rsquo;s the counter-argument and justification that content has to be paid for in some way in order to produce it with any acceptable quality. There&rsquo;re perfectly rational people who would really rather not have to pay for anything, but have gotten roped into a couple larger publications and subscription instead of smaller, indie ones because bigger sources provide a higher sheer volume of content to consume - and hey, that technically equates to better money spent, right? There&rsquo;s the Substack revolution, and the rise of the independent web while people espouse the benefits and inherent aesthetic qualities of a more open web. There&rsquo;ve been ad-blockers, ad-blocker blockers, and ad-blocker blocker blockers, and who knows how long the war between corporation and Chrome extension will go on.</p>
<p>Web Monetization, to me, is a better fit for the &lsquo;indie web&rsquo;, as they call it, rather than larger, more clunky companies. With clear examples of hiding ads for paying users (a model that exists already), adding new content for paying consumers (augmenting the private subscription model), and sharing revenue (simplifying a model), they&rsquo;ve come up with an alternate pathway for monetization besides slapping ads between a couple paragraphs. Most of the sites I can see potentially adding this are the types of sites that don&rsquo;t even have ads in the first place, and it&rsquo;s an interesting possibility to investigate this more passive stream of revenue.</p>
<p>I&rsquo;ve been thinking about Web Monetization and the opportunities it presents ever since I wrote the essay. It&rsquo;s an interesting way to add new monetization streams on the web and rework existing ones - however, like most things, I think there&rsquo;s still some steps to be taken before we can see how WM will evolve and adapt<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<h2 id="project-check-ins">Project Check-ins</h2>
<p>Before I step into some of the issues and future possibilities I see in WM, I&rsquo;d like to check in on the state of some of my own projects in the WM area, and see how they&rsquo;re doing as WM evolves.</p>
<p>Let&rsquo;s start with <a href="https://github.com/kewbish/revshare">kewbish/revshare</a>. Long story short, it&rsquo;s a Javascript library with a couple custom web components to split payment. Instead of sending everything through to a central payment pointer and letting whoever&rsquo;s in charge of accounts to share revenue, all users need is a single JSON object linked to a rather janky component. This would update the monetization tag that&rsquo;s required to stream micropayments, and therefore change the stream of revenue. (Imagine an editor, writer, and photographer working together on an article - this way, they can split money according to their agreed-upon percentages, without having to deal with doling out the cash themselves.) People seem to still be using the project somewhere (or perhaps the NPM statistics are simply lying to me) - as of the writing of this post, I have something like 6 downloads this week. It&rsquo;s a small number, but it&rsquo;s infinitely more than what I&rsquo;d expected, and it&rsquo;s nice to know people are out there somewhere in the world using it.</p>
<p>Interestingly, as I was checking up on the general state of Web Monetization earlier this year, I noticed that WM had linked their own <a href="https://webmonetization.org/prob-revshare">revshare generator</a>, which does the same thing as Revshare, but in a probably easier-to-use format. While I&rsquo;m slightly miffed (no, I&rsquo;m really not, no one much was using the revshare project anyway, and I&rsquo;m happy that there&rsquo;s an easier way to split payments than loading in a JSON object and using scuffed custom web components), it&rsquo;s good to see that they&rsquo;ve started coming up with some of their own tools to facilitate solving some of the issues I&rsquo;d been having when I started out.</p>
<p>The second project I&rsquo;ve worked on involving WM is <a href="https://github.com/kewbish/revshare-gh">kewbish/revshare-gh</a><sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, which is Revshare, but with GitHub Sponsors payment pointers and a little dependency kickback. GitHub Sponsors has a custom field or two in which project maintainers can fill in a WM payment pointer from whatever provider, which then gets added to the monetization tag, feeding creators a bit of revenue while people browse the repo. It also splits about 50% to whatever dependencies the project uses, if a WM payment pointer is present in the dependency repo&rsquo;s GH Sponsors tag. The idea was that open source maintainers could make a bit of cash off people browsing their repos, and also give some back to the projects that helped build it up.</p>
<p>As I&rsquo;ve continued to think over this idea, I&rsquo;ve realized that there&rsquo;s two main issues. One, there&rsquo;s a bit too much friction between the user (not the owner of the GH repo, but the user who&rsquo;ll be paying). Revshare-GH was built in the form of a Chrome extension, and I&rsquo;m not sure people would be willing to take the time to install and add their GH token to provide more support to maintainers. Even if you&rsquo;re paying, there&rsquo;s not any value added to the repo, and I don&rsquo;t think any fancy special content can be loaded, since Markdown doesn&rsquo;t have access to Javascript. Yes, I could rig up an external service to connect exclusive content locations to people who choose to donate, but I think that&rsquo;s best handled on the GH side of things. If GitHub itself includes WM tags as a repo option, this friction would be gone, and I&rsquo;d be inclined to think that people would be more enthusiastic about the project. Two, the amount of revenue kicked back to the creator would be minimal, and I&rsquo;m not sure if people would bother to include their payment pointer and ask their consumers to set something like this up for a couple cents a week (more on this a bit later). From my own browsing habits, I tend to only check repos out for a couple minutes, skimming the README and perhaps looking into a bit of the code if I&rsquo;d like to borrow a technique. If I&rsquo;m looking at the documentation, I&rsquo;ll stay for a bit longer, but oftentimes docs are hosted elsewhere from GitHub, meaning that the standard method of WM would likely work better there anyway.</p>
<p>Regardless of the problems I&rsquo;ve found, I&rsquo;m still happy with these two projects. They solved problems back when they were being created, which was the entire point of the exercise of working on them anyway.</p>
<h2 id="we-need-more-providers">We Need More Providers</h2>
<p>Coming back to WM itself, I think one of the more glaring issues seems to be adoption, specifically with WM providers. There are only a couple wallet providers, one or two search engines and browsers, a handful (though a healthy one at that) of platform integrations, and only one payment provider, Coil. That seems to be a bit sparse.</p>
<p>Part of this seems to be the feedback loop where companies don&rsquo;t see the benefits of investing in creating a payment processor for a niche area of monetization when there isn&rsquo;t widespread adoption and low profits to be made. In turn, because there&rsquo;s low adoption among existing companies, users perhaps don&rsquo;t see the point of creating a whole new account and subscribing to yet another service. Developers see that few people have accounts, and without a wallet at one of the few providers, might decide that the possible revenue would be too low to bother spending valuable time on it. And without high-profile companies integrating WM into their products, competing companies wouldn&rsquo;t bother to use WM, and so the cycle continues.</p>
<p>When I was participating in the Dev.to hackathon, I&rsquo;d honestly not have bothered to make a Coil account if they weren&rsquo;t giving a couple months of it away for free. (I&rsquo;m also not legally allowed to reap any of the benefits yet, which is part of the reason I haven&rsquo;t bothered to WM any of my sites or posts, but perhaps I will sweet talk my parents into something if I ever feel like it.)</p>
<p>Perhaps another part of this is that the <a href="https://webmonetization.org/specification.html">spec itself</a> hasn&rsquo;t been finished yet, and hasn&rsquo;t gone through whatever magic goes on at Google and Mozilla and all the tech giants before something gets integrated into major browsers, if at all. There still seems to be a good amount of activity on the spec and the GitHub, so I&rsquo;m excited to see how WM will spread and be adopted if something like Chrome adds it as an API. With it as a default option available in the browser, the potential audience of WM work is opened up from just tech-nerds with niche browsers (no shade), to a more general audience<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>. Developers, payment processors, wallet providers, and content creators will be more inclined to start WM&rsquo;ing their content - instead of a couple cents here and there, perhaps WM can start augmenting and eventually acting as a proper stream of revenue.</p>
<h2 id="for-the-consumer">For The Consumer</h2>
<p>Articles on WM generally center around the possibilities of revolutionizing the monetization models prevalent on today&rsquo;s web by shifting away from ads and towards user-initiated micropayments. While WM certainly has the capabilities to prompt a move away from ads (it even has a handy example on its docs detailing exactly how to do so), I think it&rsquo;ll take a lot of time and promotion before WM starts growing to something that even a decent fraction of an app or content creator&rsquo;s userbase will readily have.</p>
<p>With the ads-based models that seem to be the standard on the web, users don&rsquo;t have to physically (well, digitally) fork over any payment. The money creators make is not <em>directly</em> from you, but is still from you - your data, your analytics, and your preferences. The important thing, though, to note, is that the consumer never sees any of this, and even though the news has hopefully blasted the fact that companies are building scarily accurate profiles about you without your knowledge, it&rsquo;s taken for granted that things are &lsquo;free&rsquo; on the web. I&rsquo;ve asked my parents about this before, and they seem pretty nonplussed (&lsquo;I have nothing to hide - try to make me buy whatever you want&rsquo;).</p>
<p>Even if people pay, things seem to be easier and seem to be more &lsquo;worth it&rsquo; by supporting existing, larger organizations. A subscription to an online newspaper gives a reader access to exclusive breaking news, and hundreds of stories. A Patreon subscription might only give access to a couple of posts - and same goes for some of the new custom platforms creators are using to sell early access, special, or otherwise gatekept content. In order for WM to gain a wider adoption, I think it&rsquo;s necessary to shift people more towards indie sites, or towards sources of monetized content, so people feel comfortable with the process. Besides the technical limitations today (I don&rsquo;t think managing ILP wallets is something that most people would bother with to get started - I&rsquo;d think twice), it&rsquo;ll take time for the internet to shift to accept these models of monetization, and to trust in paid content. An interesting thing to note about the Substack revolution (is that what they&rsquo;re calling it?) is that it&rsquo;s hopefully prompting people to ask where they get their content from, and to contemplate the value of what they consume - is it worth a couple dollars a month? Hopefully, this, and other micro-monetization movements will pave the way for WM, and get people more comfortable with the idea of having to pay for things.</p>
<h2 id="conclusion">Conclusion</h2>
<p>WM is genuinely pretty cool. I think it&rsquo;s a possible stepping stone in the long pathway towards a more indie web community, and in the meantime, a nice way to get a couple cents where you otherwise might not have. It might also be a step to get people to more actively seek ways to control who&rsquo;s taking their data and money, but at the cost of having to knowingly give away money. It&rsquo;s interesting to ponder how WM can potentially rework monetization models that are now the norm, but it&rsquo;ll take a lot of adoption and investment into spreading the API first.</p>
<p>There are a lot of &lsquo;but&rsquo;s in the thoughts I&rsquo;ve been having about WM, but (haha, another one) I think it&rsquo;ll come with time. The recent uproar around NFTs (hey, even the local news aired a segment) proved that people are interested in this whirlwind of new money coming into cryptoart, and who&rsquo;s to say the same attention won&rsquo;t eventually turn to micropayments and other methods to monetization? Hopefully, widespread adoption and user comfort will increase with time, and we&rsquo;ll get to see WM as a cornerstone of a new age of the web.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Also, in an interesting turn of events, another article about Web Monetization popped up on <a href="https://news.ycombinator.com/item?id=26375857">HackerNews</a> just as I was going to write this, and there&rsquo;s some interesting discussion happening in the comments. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>I have a vague feeling that if I don&rsquo;t mention Aadi for giving me the idea (thanks buddy), he&rsquo;ll be at least somewhat annoyed, so I&rsquo;ll add this here. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>They say RSS died away because it was never integrated directly into the browser, with explicit features to follow and interact with feeds. I&rsquo;m not entirely sure of the truth behind that, but I think that by increasing the size of the WM userbase, people will be more incentivized to use it, especially if it&rsquo;s built into a popular browser in an easy-to-understand way. <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>CPSC 110: Week 2</title>
      <link>https://kewbi.sh/blog/posts/210221/</link>
      <pubDate>21 Feb 2021</pubDate>
      <author>Emilie Ma ◦ Kewbish</author>
      <description>On designing data in Racket.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Somehow through the whirlwind couple months it&rsquo;s been, I&rsquo;ve neglected to touch CPSC 110 at all. I&rsquo;ve been mostly focused with fixing <a href="https://github.com/kewbish/matter">Matter</a> up and adding all the quality-of-life features I&rsquo;d want in order to designate it a main information source. But that&rsquo;s besides the point: I&rsquo;ve decided I want to finish as much of CPSC 110 as I can before spring break, or at least during it. At the latest, I&rsquo;d like to sort everything out by summer, and see if I can finagle myself a spot in the summer session (fingers crossed).</p>
<p>I&rsquo;ve made myself a proper CPSC 110 repo and even bothered to figure out how to convert GUI DrRacket files into ones Vim can handle, so hopefully I&rsquo;ll be more motivated to solve the problem sets properly. Before I dove into this week&rsquo;s material, I had to rewatch most of week 1 to relearn the function recipes again, but I&rsquo;ve made more notes this time round (and referred to the ones on my blog - I told y&rsquo;all it would come in handy). Going into the data definitions section wasn&rsquo;t actually much of a challenge once I went through and watched the videos again.</p>
<p>The design recipes, as Kiczales mentions, are becoming ingrained into my memory now. It&rsquo;s very intuitive how they all slot together, and though sometimes it feels extremely repetitive to keep making examples and stubs, I can see why it helps when debugging more complex parts on top of the recipe. This week, I&rsquo;d gotten ahead of myself and briefly tried to do things with structs, but that really wasn&rsquo;t the point of this week yet (I&rsquo;m told it&rsquo;s part of week 3.). It&rsquo;s rather surprising to see how each recipe and definition builds on the others, though sometimes I&rsquo;m left wondering if all these conventions are really all that useful.</p>
<p>If you&rsquo;re uninterested in wrangling with data definition recipes, this might not be very fascinating, but I think keeping this as a record of what I&rsquo;ve been doing with Racket will be helpful for later revision.</p>
<h2 id="notes">Notes</h2>
<p>Week 2 deals with designing data, and how to create data definitions that work with the function definition recipe.</p>
<ul>
<li>cond expressions are if statements with multiple branches
<ul>
<li>use square brackets to test the question =&gt; <code>[(Q) A]</code></li>
<li>if only else body =&gt; the then block is evaluated instead</li>
<li>evaluation steps: evaluate the first expression&rsquo;s Q block
<ul>
<li>if it&rsquo;s false, it gets removed from evaluation</li>
<li>keep evaluating and removing until you meet a true block, then return the answer</li>
</ul>
</li>
</ul>
</li>
<li>data definitions =&gt; information represented in problem domain, and restricts what is allowed
<ul>
<li>type signature comment, what it is</li>
<li>interpretation of what the data is supposed to represent</li>
<li>examples of the data =&gt; &lsquo;one of&rsquo; comments</li>
</ul>
</li>
<li>atomic non-distinct =&gt; can&rsquo;t break into meaningfully smaller pieces
<ul>
<li>now have a data driven template =&gt; <code>fn-for-x</code>, then have a body from the table
<ul>
<li>never actually use it, so keep it commented</li>
</ul>
</li>
<li>when atomic non-distinct =&gt; <code>(... x)</code>, if distinct, then just <code>(...)</code>
<ul>
<li>write a comment detailing the data driven template body type</li>
</ul>
</li>
</ul>
</li>
<li>following the HtDF recipe is easier to understand + already learned metadesign
<ul>
<li>function recipe is independent to data definitions, so don&rsquo;t need to learn a new one</li>
</ul>
</li>
<li>interval data definition =&gt; numbers within a certain range
<ul>
<li>when giving type comment, use range =&gt; use proper interval notation</li>
</ul>
</li>
<li>enumeration =&gt; two or more distinct values
<ul>
<li>for rules used, add &lsquo;one of&rsquo;, and the number of cases / subclasses</li>
<li>use a cond to represent each case in body</li>
<li>don&rsquo;t need to use examples =&gt; add comment to explain redundancy</li>
</ul>
</li>
<li>itemization =&gt; two or more categories, but one or more of which isn&rsquo;t distinct
<ul>
<li>for example, a preflight, postflight, and inflight altitude</li>
<li>type guard required for each case if mixed data types</li>
<li>last condition will be an else, because we know that by process of elimination it must be that value
<ul>
<li>if all remaining data types are same data type, no guard needed</li>
</ul>
</li>
</ul>
</li>
<li>amount of tests will differ based on the data
<ul>
<li>with an interval =&gt; closed boundaries and midpoints (~3)</li>
</ul>
</li>
<li>when using HtDF with own data definitions =&gt; can reuse template
<ul>
<li>function recipe and prompt gives information about tests, etc</li>
<li>design behaviour of function while designing tests</li>
</ul>
</li>
</ul>
<h2 id="conclusion">Conclusion</h2>
<p>I actually managed to work my way through the lab and problem set while trying to learn the material at the same time (not very fun, do not recommend because you&rsquo;ll be very confused at the conventions that the example solution assumes), so I developed my own way of doing things the first time. It was interesting to contrast how I took shortcuts the first way round: not putting down enough <code>check-expect</code>s or ignoring the stub parts of recipes. Again, sometimes it really does feel like a chore to have to repeat the steps over and over again, but maybe that&rsquo;s part of how you learn things<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>Spending a month and a bit away from Racket, then suddenly returning was a bit disorienting at first - I had to familiarize myself with the syntax again, and the various builtins. The way I write Racket has been tinted a lot by the procedural way of doing things that&rsquo;s been prescribed by the course, so it was an experience to go from writing essentially whatever fit without much proper testing (Matter), to having to make testing an integral part of the programs.</p>
<p>I&rsquo;d forgotten how much fun listening to 2x lectures was - I suppose it&rsquo;s just part of the natural recursion<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>. I&rsquo;ve been trying to make CPSC a priority in my free time (of which I have very little - oh, the woes of senior year), so hopefully I&rsquo;ll be back next week with either more notes or a proper post. I have ideas for both, but we&rsquo;ll see.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>No matter how many times Kiczales repeats the fact that whatever semicolons is a comment and whatever semicolons is for a stub or purpose, I cannot remember. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>I don&rsquo;t think I&rsquo;ve gotten far enough in for Kiczales to have made the joke yet, but I&rsquo;m still somehow aware of this. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>After Code-in</title>
      <link>https://kewbi.sh/blog/posts/210214/</link>
      <pubDate>14 Feb 2021</pubDate>
      <author>Emilie Ma ◦ Kewbish</author>
      <description>On GCI&#39;s impacts over the last year.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Yes, today is Valentine&rsquo;s, and today is three days before something is due, but today is also exactly one year after I wrote the first post on Yours, Kewbish. (I think I thought the date would be funny, but that&rsquo;s besides the point.) I know absolutely everyone says this, but it&rsquo;s hard to believe it&rsquo;s been a year already since then. The span of time between last February and now feels like ages ago, but it also feels extremely short. Quarantine and the endless routines of work have morphed time into some non-Newtonian fluid, and I can&rsquo;t make sense of how it&rsquo;s been an entire year since then.</p>
<p>In this past year, I genuinely feel like I&rsquo;ve gained so much (yes, I know everyone says this as well): in terms of friendships, experiences, and skills, even though it&rsquo;s mostly been behind a screen. Essentially living online has its challenges, but I honestly wouldn&rsquo;t regret the past year. I never did a proper year in review, so maybe this might be a nice place to catalogue my progress over the last three hundred something days.</p>
<h2 id="gci">GCI</h2>
<p>GCI stands for Google Code-in, one of Google&rsquo;s sadly now terminated competitions, and the subject of <a href="https://kewbi.sh/blog/posts/200214/">my first YK post</a>. In short, several thousand teenagers from across the world slaved away day and night for two months to make at least somewhat useful contributions to open source. It&rsquo;s aimed to introduce the grand world of open source to a larger teen audience, and in that respect, I think it&rsquo;s accomplished its goal excellently. Despite the slight dip in my grades and general impact to my mental health, I wouldn&rsquo;t have gotten to where I am without the competition. Though I would hesitate to repeat the experience, I&rsquo;m glad I participated: it&rsquo;s served as an accelerator for my development in, well, development.</p>
<p>In retrospect, GCI may not have been the best at encouraging people to go in-depth into technologies, but it&rsquo;s an excellent opportunity to explore a large amount of areas in open source. (It leans heavily on breadth, though to succeed, you&rsquo;ve also got to balance in depth with more difficult tasks.) The list of areas GCI introduced me to includes, but is not limited to: bash scripting, Linux, VMs and trying to get those to network, KML + other Google Earth-specific features, Arduino, and a bunch of different languages and scripts. I&rsquo;ve probably already forgot all the tasks and problems I puzzled through in my spare time those seven weeks, but I&rsquo;m sure there&rsquo;s much more that I&rsquo;ve learned.</p>
<h2 id="experiences">Experiences</h2>
<p>Besides inspiring me to investigate these areas, GCI also prompted me to go discover a host of development opportunities and companies that offered internships and programs. I&rsquo;ve had decent successes, and I can&rsquo;t help but trace their inspirations and origins back to GCI.</p>
<p>I think one story particularly stands out: after GCI, through some mostly unrelated posts, I learned about Dev.to, another technical community, which was running a hackathon at the time. Originally, I had planned to participate just for the participation prizes, but I ended up <a href="https://github.com/kewbish/revshare">surprisingly winning</a>. I was in physics class when they announced the winners, and it took me approximately the duration of one practise problem to actually realize I was on the list. With the work from this hackathon, I continued to work on <a href="https://github.com/kewbish/revshare-gh">another smaller project</a>, which became my CS50 project. I&rsquo;m still regularly checking in on the Web Monetization proposal every so often, and I&rsquo;m excited to see how the implementation and adoption of other WM ideas go in the future. I can see so many connections between the programs I&rsquo;ve participated in in the past, and despite COVID, I&rsquo;m grateful for where I&rsquo;ve come to with these projects.</p>
<p>I genuinely credit GCI with rapidly accelerating my skills, as well as with letting me meet a bunch of amazing mentors, developers, and friends. There are too many to list and link (and I&rsquo;d feel rather bad about missing people), so I&rsquo;ll just leave this in as a very appreciative acknowledgement of everyone in the community - y&rsquo;all know who you are. Without GCI, I don&rsquo;t think I&rsquo;d have applied to various fellowships, participated in a myriad of hackathons, started writing this very blog, or even switched to Linux<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. It&rsquo;s truly unfortunate that the program&rsquo;s shut down - I would have had so much fun mentoring in later years. Oh well.</p>
<h2 id="writing">Writing</h2>
<p>I also want to touch briefly on writing, and this blog in general. I started writing more frequently because of Dev.to (they had a badge for streaks that I may or may not have wanted as a cosmetic). I built a rhythm there, but continued it even as I drifted away from crossposting there. Though I cringe when I look back on older posts, I think Yours, Kewbish has still been a valuable way to keep track of what was in my mind and when last year. It&rsquo;s only been a year, but keeping memories alive on my blog will be a fun way to look back when I&rsquo;m a bit older.</p>
<p>Maybe it&rsquo;s just my subjective opinion, but I also think my writing style and skills have slightly improved throughout this experience. I think that writing so often led me to begin to understand what my voice is, and I look forward to continuing to develop it as I grow. Part of it&rsquo;ll come with time, I hope, but having regular posts to write also made me realize what ideas I had that I wanted to share with <del>the, what, four people who read my blog</del> the world. I&rsquo;d like to continue writing here as frequently as I can - I&rsquo;ve plotted out a bunch of ideas I have for things I&rsquo;d like to share, if I have the time.</p>
<h2 id="conclusion">Conclusion</h2>
<p>A lot has happened this year. I think 2020, while it was perhaps not the best year in other regards, was the first year I became more involved in programming, furthering not only my technical skills, but also introducing me to many experiences and opportunities. I&rsquo;ve made a lot of friends, a lot of memories, and had a lot of fun this year despite everything that&rsquo;s been going on in the world, and I&rsquo;m grateful for that. There won&rsquo;t be a GCI in 2021, but there&rsquo;ll be other opportunities for me to have a go at. I don&rsquo;t know what my GCI, or my yearly accelerator, will be this year, but I have a feeling it might be university.</p>
<p>I suppose this wouldn&rsquo;t be complete without thanking whoever&rsquo;s reading this: thank you for tolerating my overly nerdy, sometimes long and windy, very quirky writing, and thank you for following along as I try to figure out what I&rsquo;m developing. I&rsquo;d be writing this regardless, even if it were to an audience of none, but thanks for getting all the way here<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>I also suppose GCI is therefore responsible for me being called &lsquo;Linux kid&rsquo;, but it&rsquo;s tolerable and endearing enough. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>Unless you&rsquo;re reading this in voice, and I&rsquo;m deafened in the corner, in which case I will rescind my thanks. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>A Month of Articles</title>
      <link>https://kewbi.sh/blog/posts/210207/</link>
      <pubDate>07 Feb 2021</pubDate>
      <author>Emilie Ma ◦ Kewbish</author>
      <description>On tracking every single article I read in January.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>I&rsquo;ve been thinking more about the things I read: content, perspective, and contribution to my mindset in some form. As of now, content-wise, I prefer a mix of technology, meta-productivity, or knowledge-building. I don&rsquo;t have a preference as to perspectives, but contrasting thoughts from very passionate and very noncommital points of view can be interesting. Recently, I&rsquo;ve been mostly focusing on thinking about how what I read fits in, contribution-to-knowledge-wise.</p>
<p>This series of thoughts started with my self-study of maths, physics, and some CS over the summer. I was reading a lot of drier information each day, but most of it was material I needed to cover (well, not needed, but wanted to, for the sake of preparation) and properly remember. Trying to take clear and concise notes to build a library of reference material I could look back to later was not the most innovative summer project, but at least it helped me build a sense of what I liked in content, and what role I wanted consuming that information to play in my daily life.</p>
<p>While trying to teach myself, I started to notice that there were certain information &lsquo;aesthetics&rsquo; that I tended towards. I have a thing both for older, pre-&lsquo;CSS is important&rsquo; era university sites, where profs simply share their knowledge without any ulterior motive; and newer sites that perhaps contained intriguing interactives, or more casual information sharing. My article aesthetic now is similar - I tend towards indie personal sites, rather than &lsquo;popular&rsquo; blogs with share buttons plastered all over. However, finding those articles and websites is pretty difficult - how do I search for &lsquo;small blogs that write generally about programming but in a easy-to-understand way&rsquo;?</p>
<p><a href="https://findka.com">Findka</a>, so far, has been eerily good at recommending things that I&rsquo;m actually interested in - I suppose the closer and more active user base has something to do with that<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. Despite not having the popularity of other forums like r/programming and dev.to, it strikes a nice balance of articles both aligning with and outside my interests. It&rsquo;s become much easier to find a couple articles to read a day to satisfy my productive procrastination needs, rather than having to scroll through other sites with a much higher noise to signal ratio.</p>
<p>However, I still found that I was trying to skim through a bit too much each day. I was still alt-tabbing to go off on blog post tangents when I&rsquo;d set out to do something completely different, and I wanted to try to curtail that as much as possible. With the new year, and all the vague self-improvement energy that saturates the internet, I decided to track every article I read for the month of January (spoiler: I have somehow trained myself to subconsciously continue this, well into February). I was looking to see what insights I could gain, and observe if consciously tracking content would make a difference in what and why I was reading.</p>
<h2 id="the-rules">The Rules</h2>
<p>I&rsquo;ll go into how I tracked and counted these articles exactly in a bit, but I&rsquo;d like to explain my materials and methods first. (I will try my best not to turn this into a giant lab report, but as I edit this, I can see that I&rsquo;ve somewhat failed.) I imposed a couple of rules on what counted as an article to track or not, mainly to keep statistics more consistent.</p>
<ul>
<li>I&rsquo;d keep forum-like sites out of the article count - things like Reddit, Lobste.rs discussions, Twitter threads and StackOverflow pages wouldn&rsquo;t count.</li>
<li>Speaking of StackOverflow, programming tutorials and other technical references also weren&rsquo;t included. Documentation for libraries, looking up commands, or following some walkthrough to set something up, for example, fall into this category.</li>
<li>Content required for schoolwork was not included as well - the point of this experiment was to track what I was reading outside of school, not how much I was studying.</li>
<li>I allowed myself to skim the first paragraph-ish to determine if I&rsquo;d like to read the article fully or not without tracking the article, and then log the page. I was definitely also allowed to stop reading the post at any time, but by any point after the first hundred-ish words, the article would already be tracked.</li>
<li>Every single article besides that would be counted - blog posts, Reddit and Twitter links, Findka recommendations would all count towards the day&rsquo;s total.</li>
</ul>
<h2 id="the-graphs">The Graphs</h2>
<p>So we&rsquo;ve come to the graphs, of which there are only two - I think they encapsulate the data well enough. One shows a total of articles read per day, with a three day rolling average, and the other shows a distribution of the times I read any article each day.</p>
<figure>
    <img src="https://i.imgur.com/0ChbUQV.png"
         alt="Figure 1. A graph showing articles read per day"/> <figcaption>
            <p><em>Figure 1. Articles read per day.</em></p>
        </figcaption>
</figure>

<p>You can see a large spike in the beginning of the experiment - I&rsquo;ve coloured those bars a darker grey because I don&rsquo;t think they represent what I was actually reading at the time. If I go back through the Google Sheet (more about technical implementations in the appendix) that houses all my responses, there&rsquo;s a lot of repeated links clustered very close together, so I&rsquo;m going to assume I was trying to figure out how to make the technical bits and pieces work together.</p>
<p>There&rsquo;s also a pretty significant dip in the middle of the experiment - it was already coming to the end of term, and there was a steady influx of homework, leaving less time for reading. It&rsquo;s interesting to see how homework has such a significant impact on what I can consume content-wise, but that&rsquo;s sort of expected anyhow.</p>
<p>I&rsquo;d also like to mention that I went from 5 Findka articles a day, to 3, somewhere in that second week, which ended up increasing back to 4 in the third. I&rsquo;ve been increasingly turning to Matter and Findka (on Matter, yay RSS feeds!) more instead of scrolling through aggregators, so a fluctuation in articles there generally correlates with changes in reading.</p>
<figure>
    <img src="https://i.imgur.com/CAnUol8.png"
         alt="Figure 2. A graph showing time distribution for article readings per day."/> <figcaption>
            <p><em>Figure 2. Time distribution for article readings per day.</em></p>
        </figcaption>
</figure>

<p>This figure shows the timestamps of each log. There are two main bands around morning and afternoon - more on that later.</p>
<p>If you&rsquo;d like some raw numbers:</p>
<ul>
<li>I read 174 articles over 26 days - short and long form are included</li>
<li>That averages to around 6.69 articles a day over the entire range</li>
<li>Each week, I averaged a different number of articles:
<ul>
<li>The first week (I was doing a lot of testing with my Shortcuts and things), I averaged 9.5 per day</li>
<li>The second week, I averaged 4.6 articles a day</li>
<li>The third week, I averaged 4.4 articles per day</li>
<li>For the last week of the experiment, I averaged 5.5 a day</li>
</ul>
</li>
</ul>
<h2 id="the-findings">The Findings</h2>
<p>I suppose that this would be the discussion part of this pseudo-lab report, so let&rsquo;s get into some expectations, findings and takeaways.</p>
<p>My hypothesis going into this entire tracking experiment was that by being more conscious about what and when I was reading, I&rsquo;d manage to self-regulate more impulsive reading sprees, and check the productive procrastination that sometimes ticks in. Before I started this, I had a bit of a reflex to just Ctrl-T, open up a new tab, and sort of spam whatever into the omnibox before my brain consciously processed what I was doing, and then close the tab. (Oddly enough, I ended up not going down those rabbit holes most of the time anyway, but it was a bit annoying to accidentally keep opening and searching around for things to procrastinate with.) I suppose the hypothesis was very well supported - I took more notes and tried to limit myself to a couple reading sessions a day.</p>
<p>In the rules, I explicitly stated that I wouldn&rsquo;t include Reddit, Twitter, or discussion threads in the totals for each day. I thought that this would lead me to spend proportionally more time there, but I don&rsquo;t think it&rsquo;s made a significant difference. I think that having to explicitly log what I was reading while giving myself planned time to read reduced the urge to go look for something to read well enough. At the moment, I go through my Findka, Matter, and Nitter in the morning, and I&rsquo;ve realized that there&rsquo;s really no point in checking much more frequently - people don&rsquo;t create meaningful content in 15 minute intervals. It feels more satisfying to go through a larger chunk of content anyways, though I can&rsquo;t measure how much of this was due to the tracking in any quantifiable numbers. Creating a regular schedule for reading through things, and trying to keep myself accountable with the log, was surprisingly useful.</p>
<p>Speaking of surprises, tracking every single link I&rsquo;d read over the past month has built up sort of a library effect. While retention of article content isn&rsquo;t something I&rsquo;ve explored in my data at all, I have less of an issue finding really great posts and then losing them in my browser history. I know that everything I&rsquo;ve read is in a central location, and it&rsquo;s much easier to find things in one place than to search for that place, and then for the article I&rsquo;m looking for<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>. (It&rsquo;s also probably useful to mention that I do generate summaries of what I&rsquo;ve read each week to review and see what I&rsquo;d like to take away from the content I&rsquo;ve been consuming.) I find that I can at least vaguely remember what I&rsquo;ve read better - especially since I try to consciously choose better articles to &lsquo;commit&rsquo; to when I track them.</p>
<p>Going back to the raw data, and the charts I put in the section above, it&rsquo;s interesting to see how the amount of schoolwork (a non-tracked item, but something I can very clearly remember) has an impact on my reading. It&rsquo;s probably just because of how I organize my days - if I really have homework to catch up on, I&rsquo;ll work in the time that I have scheduled out for checking various social media, which pushes the reading to the next available block of time (which, if I&rsquo;m busy, would be in a while). It&rsquo;s also interesting to see that, even with heavy workloads, I kept up with most of my recommendations and reading, never going a day without reading at least something. I think it&rsquo;s valuable to set aside time to see what others have written about, so that&rsquo;s a habit I think I&rsquo;d like to continue.</p>
<p>If I scan the time logged for each article logged, I can see two main blocks - morning and night. (Disregarding the first couple days - those longer series are probably from when I was testing out my system.) It&rsquo;s interesting that I read very consistently at night, and a bit less, though still very consistently, in the mornings. (Let&rsquo;s pretend the ones in the middle are me during breaks and not me █████ █████████████ in █████.)</p>
<p>I have no other data to check my totals against (I can&rsquo;t exactly just search up blog post total articles spent), so I also have absolutely no idea how my consumption compares to the average population. Maybe I spend a lot more time compared to other people, maybe I don&rsquo;t. I&rsquo;d be interested to see how others perform this experiment and how it changes their views, but it&rsquo;s also not a data comparison I&rsquo;m entirely that interested in.</p>
<p>In terms of sources of error (always a fun section to write in labs), I can&rsquo;t think of much besides a) not balancing for word counts and b) mixing the testing / development data in with the actual end data. I don&rsquo;t think it makes too much of a difference for point a if you consider ideas absorbed instead of purely articles read, or their length. In terms of point b, I think it&rsquo;s fine to just ignore days 6 through 8, and pretend I started the entire experiment a little later.</p>
<h2 id="conclusion">Conclusion</h2>
<p>In lab reports, this is the part where I try to convince you how relevant this research is, and how it can be applied. In terms of relevance and application, there&rsquo;s not much else besides being a bit more aware of what content you consume. That, and keeping extremely detailed data on your reading habits, which might appeal to some. I wouldn&rsquo;t recommend this to someone, nor would I advise against it - it&rsquo;s pretty fun to do, and an interesting dataset to analyze later.</p>
<p>There was an interesting article <a href="https://junglegym.substack.com/p/the-t-shaped-information-diet">about the T-shaped approach to content</a> that I read recently, which discusses the types of information that you choose to consume. That was something I tried to keep in mind throughout the experiment, and I think that, considering my findings and my managing to train myself not to unconsciously alt-tab away to be unproductive when I work, the experiment can be considered a success.</p>
<p>In the future, I might like to take a look at how I use forum sites: an area that I specifically left out of this post. That, combined with more productivity-oriented research, might be an interesting area of self-experimentation. I can&rsquo;t figure out a way to analyze the subject matter or word count of each post, but I&rsquo;m pretty happy with the data I&rsquo;ve managed to collect so far. I&rsquo;m still continuing this experiment - I&rsquo;ll probably continue to track everything this year. Because of how I designed the Chrome extension and the Shortcut (see appendix A for other relevant technical magic), the friction of adding a new article is close to none, meaning I&rsquo;ll be more likely to continue using it anyway. It&rsquo;s become a new reflex anyway, and I think having this big of a dataset and these new trends to analyze at the end of the year will provide additional interesting insights.</p>
<p>P.S. I&rsquo;ve found another person who does a similar tracking - <a href="https://twitter.com/fortysevenfx/status/1343587407799738368">link to their thread here</a>.</p>
<h2 id="appendix-a-technical-digressions">Appendix A: Technical Digressions</h2>
<p>This is the part that fellow nerds might find interesting, but that you should feel free to skip. Some of the work I did with the tracking inspired the <a href="https://kewbi.sh/blog/posts/210124/">hyperpersonalization</a> post I wrote earlier, while I was continuing this experiment on my own. I&rsquo;ll try to briefly explain how everything gets logged, and leave some trails for interested parties to pursue.</p>
<p>I knew right off the bat that I wanted the process of logging to be as friction-free as possible - that meant a maximum of one click away on my laptop, and from the share sheet on my phone. Instead of trying to rig up some complicated API and spin up a Heroku server to host my app, I decided to go a simpler route: a simple Google Form, linked directly to a Google Sheet. The form has a field for the URL of the post and notes (I didn&rsquo;t end up writing too many notes as I read, but rather later at the end of my week during my review), and automatically fills in the exact time the form was submitted.</p>
<p>However, I obviously wouldn&rsquo;t <em>fill in a form manually</em> - we have automation to overengineer! Google Forms have a great link function, where you can autofill and submit a form from just a link. From the form link, something like:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">https://docs.google.com/forms/d/e/{id}/viewform/
</code></pre></div><p>you can get to something like</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">https://docs.google.com/forms/d/e/{id}/formResponse?usp=pp_url&amp;{key}={val}&amp;{key}={val}&amp;submit=Submit
</code></pre></div><p>You can get this from getting a prefilled link within Google Forms itself.</p>
<p>I managed to bodge together a Chrome extension with this fetch (and a couple lines to display a badge), which I then bound to a keyboard shortcut. I also slapped this fetch into a iOS Shortcut by enabling share sheet for the shortcut, and getting the URL from the input to put into a &lsquo;Get Contents of URL&rsquo; block. I can then log articles from my phone and my laptop super easily, which was a major reason the experiment went so well. I expect there&rsquo;s a similar shortcut-maker for Android, but iOS Shortcuts feel so snappy to make. You might also want to reference <a href="https://www.reddit.com/r/shortcuts/comments/bp735g/how_to_add_rows_to_google_sheets_from_a_shortcut/">this brilliant guide</a>, and adapt it for whatever platform you&rsquo;re planning to track on.</p>
<p>I then wrote a simple Python script to persist a &lsquo;row last read&rsquo; count of the Sheet in a file, and parsed the CSV values since the last pull with <code>csv</code> and <code>requests</code>. That all gets sent into a Markdown file for me to process and read through at the end of the week. I can also download a full CSV file to process the data in an external app directly from Sheets.</p>
<p>None of the above is open source at the moment, but I trust the guide and the Internet can get you to what I&rsquo;ve managed to do in much shorter time than it took me to even try to figure out how to do it.</p>
<p>In terms of <a href="#the-graphs">the graphs</a>, those were generated with a little bit of pivot table magic in LibreOffice Calc. The first required summing each day together, and the other was created by just inserting a normal chart and editing the major gridlines to fit with the whole times-as-decimals that LO does. It took much more time than I&rsquo;m willing to admit, but all in the name of science, right?</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>I can&rsquo;t figure out if it&rsquo;s just a relatively small number of users, or really similar tastes, but it&rsquo;s got to the point that my friend(s?) have made a game out of trying to figure out which articles I submit, with scary accuracy. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>This is part of the reason why I also built Matter - it&rsquo;s one place to look for things, as opposed to over several different aggregators. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>Hyperpersonalization</title>
      <link>https://kewbi.sh/blog/posts/210124/</link>
      <pubDate>24 Jan 2021</pubDate>
      <author>Emilie Ma ◦ Kewbish</author>
      <description>On extending and making personal tools.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>A few months ago, I applied for an internship somewhere. It was a pretty standard application for a pretty standard development position. List your specialties, why you wish to apply, what makes you a good candidate. Have a 250 word input to cram your life&rsquo;s goals and achievements. Upload your resume, mindlessly fill demographic information, do you wish to forward a copy of your responses to your email, click send. A cookie-cutter application, nothing special.</p>
<p>One of the main parts of the application was to upload a major project, and write a little bit about it. They&rsquo;d consider the size, purpose, application, and several other characteristics of the given code sample, apparently, and this was a key point of evaluation for the position. What I submitted is irrelevant to the point, but I remember submitting the application with a worrying thought in the back of my mind.</p>
<p>As I was going through past participant&rsquo;s blog posts and collecting any shreds of insider information, I realized that there was a clear divide between &lsquo;their projects&rsquo;, and &lsquo;my projects&rsquo;. Theirs were so much more complex, integrating many technologies, and actually had an obvious industry or consumer application. My science fair project<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> - certainly not &lsquo;clean code&rsquo; by any regards - seemed very small in comparison.</p>
<p>Through this application, I realized that I really didn&rsquo;t have any &lsquo;big&rsquo; projects. My largest project was not my most complex, or anything that&rsquo;d I&rsquo;d deem representative of my skill. My more &lsquo;complicated&rsquo; projects were more components to be mishmashed to extend or work with other software, not individual applications.</p>
<p>I&rsquo;ve been thinking about my work recently over the New Year, and I&rsquo;ve come to conclusion that I&rsquo;ve preferred to write small tools for myself. No one else (well, okay, maybe <em>very</em> small amounts of people) will probably use them, and that&rsquo;s okay for now. I&rsquo;d eventually like to work on bigger projects, but I&rsquo;d also like to make sure that those projects are something I&rsquo;m personally invested in, and not something I&rsquo;m developing for the sake of my resume or something. At the moment, I haven&rsquo;t found an idea or something that I&rsquo;d want to work on - plus, senior year and the associated heavy workload.</p>
<p>However, I still think there&rsquo;s an interesting area to be explored with &lsquo;small software&rsquo;. In this post, I&rsquo;d like to highlight two (and a half) toolkits I&rsquo;ve used to make the aforementioned personalized software. Consider this a combination of thoughts regarding making extremely customized software for a small user base, and a year (± three years) in review.</p>
<h2 id="prelude---roblox">Prelude - Roblox</h2>
<p>Roblox has been described as both a highly addicting platform, and a highly creative engine. (If you don&rsquo;t know what Roblox is, go look it up - the development and monetization side of things is especially interesting.) I don&rsquo;t think I&rsquo;ve seen a community that&rsquo;s been more inspired to share games (barring perhaps Minecraft, which shares similar traits). Even though I was maybe ten, I still managed to wrangle a couple small obbies (essentially 3D platformers) and story adventures out. The Roblox community, as I remember it, was a hivemind of kids teaching other kids how to program. I&rsquo;m sure that there were a good chunk of competent adult programmers, but as a kid (maybe it was just selection bias), I remember looking up to those channels churning out Lua tutorials each week.</p>
<p>Roblox was my &lsquo;in&rsquo; to game development. It&rsquo;s nowhere as complicated as Unity, and it&rsquo;s a great example of something that&rsquo;s literally child-proof yet has an ample system for expansion. I had no experience with proper programming or game design, yet the system of prefabricated assets and drag-and-drop configurability made it super easy to get started. Lua was too complicated for me to understand, but with assets, I managed to bodge together a CTF game for me and my classmates. It was only for us, and was, looking back at the previews I can see on the Roblox site, absolutely horrible. It was just a tiny map with several biomes and &lsquo;hidden&rsquo; flags (the concept of randomization and terrain generation was still several years to come) - but it was something. Something that I&rsquo;d made, and proudly showed off, climbing up several rungs in the 5th-grade social hierarchy as <em>the</em> Roblox dev.</p>
<p>While Roblox is a proper standalone platform, I included it here because it has a sort of whimsy that I find mirrored in the other two (eco)systems that I want to touch on today. That first spark of ownership is something that&rsquo;s sort of addicting to the right people, and probably a good explanation to the infinite server forks my friends had. Roblox gave budding devs a platform, and held their hand until they stepped into the infinite world of Lua and &lsquo;proper&rsquo; scripting. I think that&rsquo;s kind of fun - not just because it&rsquo;s so easy to use, but also because it actually makes game development open, and encourages little kids towards creation, and little bit away from mindless consumption<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</p>
<h2 id="chrome-extensions">Chrome Extensions</h2>
<p>An interesting approach to building hyperpersonalized tools is by extending yet another tool. One of the best examples of this is browser extensions - what better to customize than the very tool you&rsquo;re spending most of your online life in? I already use my browser to consume most of my content, and to keep in touch with people, so I personally think investing some time into making the browser exactly what I&rsquo;d like it to be is a worthwhile investment.</p>
<p>If you&rsquo;re a developer, or have any experience with JS, Chrome extensions are relatively easy to get started with - a manifest.json and a couple small HTML / JS files later, and you&rsquo;ve got a working extension. Because they&rsquo;re so easy to use, they&rsquo;re what I generally turn to in order to facilitate and automate basic actions that I do often. I&rsquo;ve made ones recently for <a href="https://github.com/kewbish/revshare-gh">Revshare for GH</a>, and one that I&rsquo;m using at the moment for tracking some interesting experimental data (blog postmortem of self-research to come in a couple weeks). Both took relatively short times to build - one was a CS50 project, which took a month-ish, and one was done in literally an hour. The difference? Whether I chose to make it a &lsquo;proper project&rsquo; - more on this later.</p>
<p>There&rsquo;s something very fun in playing with and manipulating what&rsquo;s shown on a page, especially when it&rsquo;s something just you&rsquo;ll use.With the way Chrome makes it relatively easy to add and iterate on your own extensions by loading unpacked folders somewhere, I can justify taking a couple hours to slap something together to fix a &lsquo;minor problem&rsquo;. Of course, there&rsquo;ll be &lsquo;minor problems&rsquo; that a lot of people share, or that you&rsquo;d like to make aware to others - this is when publishing an extension might come in handy. But for the majority of my &lsquo;minor problems&rsquo;, it seems that no one else has them, so for now, I&rsquo;m content to continue hacking away with &lsquo;hyperpersonalized&rsquo; things.</p>
<h2 id="shortcuts">Shortcuts</h2>
<p>Shortcuts (on iOS, though I&rsquo;m sure there&rsquo;ll be an Android equivalent <em>somewhere</em>) is another example of extending an ecosystem to personalize it. As with Chrome extensions, people have made amazing things - I&rsquo;ve seen <a href="https://www.jacksondame.com/vestigory/get-started">entire life management and tracker apps</a> made in it, as well as very slick widget apps and integrations<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>. It&rsquo;s sort of like a hybrid automation and Siri extension system, but I use it mainly for its automation capabilities and integrations. I don&rsquo;t think I&rsquo;ll ever get into iOS development, but Shortcuts lets me make what is essentially a proper app - I can enable it in the Share Sheet (the little popup when you&rsquo;d like to share something) and I can make it do rather complicated things with APIs and files. It&rsquo;s an interesting attempt by Apple to finally give people some much-appreciated customization and a way to make apps without shelling out for a license and diving into learning Swift.</p>
<p>Using the right tool for the right job is something that I often ignore, but I&rsquo;ve recently been trying to decomplicate most of the things I make (which, historically, have been very overcomplicated). A couple weeks ago, I was trying to make a little form for a tracker, and was toying with the idea of making a PWA of some sort, connecting it to some GitHub repository issue<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>. In short, it would be very complicated, but good fun to code. However, I resisted the urge to immediately go create a new repo - I&rsquo;d rediscovered Shortcuts earlier that week. It was surprisingly pain-free to drag and drop a bunch of blocks together to POST data to a Google Sheet (probably a better way of storing information as opposed to an issue thread), as well as make it available to interact with from the browser bar.</p>
<p>Another interesting thing with Shortcuts is that it&rsquo;s the very embodiment of the entire &lsquo;no-code&rsquo; thing that&rsquo;s supposed to become popular enough to take over my job right about when I graduate university (/s. Maybe.). I don&rsquo;t have a lot of Shortcuts rigged up at the moment, but I&rsquo;d agree with <a href="https://www.reddit.com/r/shortcuts/">r/Shortcuts</a> that the entire process of making one is very <em>satisfying</em>. Sometimes the smaller screen size of my phone makes it a bit difficult to drag things to the right places, and sometimes copy-pasting things around can be a hassle. Still, I think there&rsquo;s a sort of whimsy in building your own &lsquo;app&rsquo; that even non-technical people can take advantage of. Again, there&rsquo;s that hyperpersonalization people can get. Instead of waiting for someone to solve your problems for you with a proper app, you can slap something else together in Shortcuts.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Returning to the internship application: my GitHub has a significant population of these tiny creations - be it extensions, small scripts, and personal utilities. Microapps, as I&rsquo;ve decided to call these small little one-user extensions and automations, are something that I&rsquo;d like to continue to explore. I keep returning to the word whimsy to describe these microapps, and that&rsquo;s because whimsicalness is exactly what I see in making these. The ease of iteration and production is sort of a fascinating idea, and one that I&rsquo;ll always keep an eye out for. I realize there&rsquo;s something sort of ironic in actively sharing microapps, but hey - maybe I&rsquo;ll help one person who has the very specific problem that I do, and that&rsquo;s more than enough.</p>
<p>By taking the pressure off to make something that&rsquo;s useful for other people, or that&rsquo;s polished enough that you&rsquo;d be willing to shamelessly promote it everywhere, I feel like I have the freedom to focus on having ideas that&rsquo;d benefit me first. I&rsquo;d have that freedom anyway, but by plastering &lsquo;this is hyperpersonalized, don&rsquo;t attack me if it&rsquo;s broken in one of these edge cases&rsquo; over the project mentally, it feels like I have more room to figure things out. While I&rsquo;m happy to, and do, share most of my work, I&rsquo;d rather not add more stress to maintain something I don&rsquo;t believe in anymore, or that I&rsquo;m forcing myself to do for no good reason.</p>
<p>I think this can serve as an effective sieve of ideas - a bunch of ideas flow in, and you filter them in or out depending on whether you yourself are emotionally drawn to the idea. Ideally, you&rsquo;d find a happy medium of &lsquo;helps people&rsquo; and &lsquo;helps me&rsquo;, but that might not be the case all the time. I&rsquo;m still very young - I have a vague idea of what I&rsquo;d like to do, and what I&rsquo;d like to work on in the meantime to get myself to that end direction. For now, I&rsquo;m leaning on the side of &lsquo;helps me&rsquo; - there&rsquo;s something very satisfactory in building smaller tools that benefit my own workflow.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>I don&rsquo;t know why I need to preface this, but no, I did not <code>import random</code>. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>I also find it really amazing that Roblox actually has a system to properly pay their developers. I&rsquo;m pretty sure if I&rsquo;d known as a kid that I could have saved up a couple Robux, I&rsquo;d have put much more time and effort into trying to monetize my hobby - I was a very entrepreneurial type of kid. I remember seeing <a href="https://www.cnbc.com/2019/09/23/college-student-video-game-creator-made-millions-from-jailbreak.html">an article (might have been this one)</a> about the creators of Jailbreak, a game I&rsquo;m pretty sure all my classmates were fairly addicted to. (I wasn&rsquo;t good enough at the game, and stuck to obbies, but those are in themselves extremely lucrative.) You&rsquo;d expect most people would&rsquo;t pay for cosmetics, but I suppose the in-game (and in-class) clout people who had Roblox Premium or whatever was enough of an incentive. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>Somewhat ironically, I still haven&rsquo;t bothered to customize my home screen. I&rsquo;d like to get larger widget grid icons for some of my Shortcuts and apps that I&rsquo;d like to encourage myself to use more, but I&rsquo;ve not found the time to do that yet. Someday. <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4" role="doc-endnote">
<p>GitHubDB, as they say. I don&rsquo;t want to talk about how called out I feel by this. <a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>RSS, bookmarks, &amp; Nitter</title>
      <link>https://kewbi.sh/blog/posts/210110/</link>
      <pubDate>10 Jan 2021</pubDate>
      <author>Emilie Ma ◦ Kewbish</author>
      <description>On centralizing media consumption.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Over the past maybe two months, I&rsquo;ve been hoarding a list of nearly all the people I follow around the internet in a text file. It started out as a list of handles and websites for a small group of people, but quickly <a href="https://kewbi.sh/blog/posts/201220/">branched</a> out as I found new &lsquo;layers&rsquo; of interesting individuals. Through the power of The Algorithm™️ (and some branching), the list briefly expanded to a concerning length before I pruned it down to active, regular creators. Some of these people are on Twitter, others have a short writing project each week, and others put out long-form essays every so often that I find engaging. Whenever I was in need of something to productively procrastinate with, I&rsquo;d pop open the file, simply named <code>cool.md</code>, and go check in on what people had done in the last few days or so.</p>
<p>With this new content regularly coming in, I&rsquo;d also developed a need to bookmark articles that I wanted to read either later, or keep in mind to revisit sometime in the future. This sort of thing would usually be from a site that had one or two pieces I wanted to keep an eye on, but not a site that I&rsquo;d want to consume content from regularly. To give you a sense of what fills this category, stuff like tutorials and productivity advice appears regularly. At the moment, I have a <a href="https://andymatuschak.org/prompts/">long essay</a> by Andy Matuschak I&rsquo;ve been meaning to read for the last week but haven&rsquo;t gotten the time to yet there. Apparently, people call files of this sort their &lsquo;attics&rsquo;.</p>
<p>I&rsquo;ve been meaning to collate the websites and RSS feeds of the aforementioned people for a while, but hadn&rsquo;t bothered to set up an RSS reader yet. Most of the ones I&rsquo;ve seen have a reader view, folders, and favouriting - while that&rsquo;s certainly a must-have for some people, I was looking for something much simpler. Yet after scouring the Internet, I&rsquo;ve found that the intersection of my rather specific criteria seem to be the odd Chrome extension or Android app, instead of any established site. I&rsquo;d been searching for something small to work on over winter break, so I decided I may as well try to gain some insights into my content consumption<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> and do a bit of programming<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> as well.</p>
<p>This is a log of what I&rsquo;ve done to build <a href="https://github.com/kewbish/matter">Matter</a>, my personal (very minimalistic) RSS reader, and also keep track of all the other feeds and bookmarks as well.</p>
<h2 id="rss">RSS</h2>
<p>I broke the contents of the <code>cool.md</code> up into three subsections: people (on Twitter), articles (personal websites, most with RSS feeds), and bookmarks (things I wanted to get around to reading someday). I decided to tackle the RSS reader first - I&rsquo;d live without checking Twitter, and keeping a list of bookmarks in a text file was not optimal, but fine for now.</p>
<p>As mentioned in the introduction, I spent a while looking for RSS readers. I was leaning towards Feedly, but I also kind of wanted to work on a small project. (At least, that&rsquo;s my justification for it, I really have no idea why I decided this was a good idea either.)</p>
<p>I wanted it to feel sort of like <a href="https://lobste.rs">lobste.rs</a> or <a href="https://news.ycombinator.com/">HackerNews</a> - just a simple collection of links. Most RSS readers were a bit overcomplicated, in my opinion, for what I wanted it to do: collect links so I could later <del>waste time</del> develop my personal knowledge with them. I wasn&rsquo;t very interested in a reading pane or annotations - those I could do in my notes repository, just to keep everything in one place. This way, I&rsquo;d avoid having to make more glue scripts to import and export and shuffle data around.</p>
<p>I ended up with something like this:</p>
<figure>
    <img src="https://i.imgur.com/PB8bVVL.png"
         alt="Figure 1. Matter, my personal RSS reader."/> <figcaption>
            <p><em>Matter, my personal RSS reader.</em></p>
        </figcaption>
</figure>

<p>It&rsquo;s basically a reskin of my blog&rsquo;s archive page, but I think that the simplicity makes it feel less addicting and less complicated-for-the-sake-of-marketing-and-features. I wanted to keep the same minimalist atmosphere I get from Lobsters and HN with Matter, and while the execution (read: code) was perhaps not very clean, it works nicely.</p>
<p>I now find that it&rsquo;s a lot easier to remember what I&rsquo;ve read and where I&rsquo;ve read it - I have fewer sources to scour before I find the one post I was trying to think about. It&rsquo;s also nice that I can finally have one feed for everything. Reading now feels more engaging, rather than something I do purely out of boredom (which biases towards short articles and quick posts), though boredom still factors into when I read. Matter solves a lot of the annoyances I&rsquo;ve had with reading blogs: it felt like too much work to go around and click through all the links in the <code>cool.md</code> file, and I&rsquo;d often miss or re-find articles since I didn&rsquo;t have a central place to keep track of them. I like it so far, and we&rsquo;ll see how my usage of it changes in the future.</p>
<p>I&rsquo;m also doing a little experiment with tracking articles over the month of January - I plan on writing a bit more about it at the end of the month.</p>
<h2 id="bookmarking">Bookmarking</h2>
<p>After I&rsquo;d gotten the RSS parsing done and dusted (somewhat less difficult than expected), I was also looking for a place to keep my temporary bookmarks. These are usually longer articles I don&rsquo;t have the time to read right this second, but that I&rsquo;d like to read in the near future. I try to group reading these over the weekend whenever I have a break (which is rather infrequently, but we&rsquo;re trying our best). With the <code>cool.md</code> file, I&rsquo;d usually reach for the shortest article, and often left longer articles, and those added earlier, for ages.</p>
<p>I already keep a private Git repo with all my school and personal notes, and I thought this might be a good place to use it. Yes, I could have used Pocket, Evernote, or even the Chrome bookmarks bar (oh the horrors), but I wanted to sort of keep my bookmarks and my notes in the same place. The rationale was that I&rsquo;d be more inclined to take notes and track things down, but more about this at the end of January. I also sort of wanted Matter to be my singular feed and source that I could check regularly, sort of like an <a href="https://jetgirl.art/2019/07/21/rss-is-better-than-reddit-twitter-and-email-subscriptions-for-updates/">all-encompassing life thread</a>.</p>
<p>So, I slapped together a simple function to pull in the list of comments from a GitHub issue. (Note, if you&rsquo;re going to do this, maybe remember to disable email notifications.) Through Matter, I can add new bookmarks (with or without a short note about its purpose), and delete ones I&rsquo;ve just read. As for technical details, the GitHub API is actually surprisingly painfree with comments and issues - I just had to feed it a repo, an issue number, and a PAT.</p>
<p>With this, I notice that while I still kind of bias towards first reading shorter articles, I&rsquo;ve also been sort of encouraged to go in a vaguely chronological order (in terms of adding said article to Matter). I definitely also remember to refer to these more, especially as they display on the top of all my other RSS feeds and articles. I also perceive it as easier to add items, even though technically opening Matter and pasting in a link takes about the same time as opening a Markdown file and editing one in.</p>
<h2 id="twitter">Twitter</h2>
<p>I&rsquo;ve realized that, for someone who doesn&rsquo;t even have a Twitter account, I spend a relatively disproportionate amount of time on Twitter. It&rsquo;s mostly to keep up with a couple people whose work gets posted to Twitter first, as well as explore some of those branching threads that seem to come up every now and then. In the <code>cool.md</code> file, I kept the list of Twitter handles mixed with a list of blogs as well, and would go manually decide to check in on one whenever I was bored.</p>
<p>However, this was a bit annoying - for all the supposed shortcomings of the Twitter feed, I&rsquo;d still say that having one place to catch up on the latest whatever is still markedly better than having to manually go through a bunch of profiles. I briefly toyed with the idea of actually creating an account and making a Twitter List for myself. However, I also realized that this would incentivize spending <em>more</em> time on Twitter, not streamlining the reading process, and end up not solving the problem.</p>
<p>I looked around for some way to make an RSS feed out of certain Twitter handles without an account - after all, I now had an RSS reader, and I thought I might as well also use that for Twitter. There were some seemingly defunct projects available - <a href="http://twitrss.me/">twitrss.me</a> was one of the free ones I checked out. (It&rsquo;ll throw an internal server error if you try anything; I assume the project&rsquo;s a bit dead.) However, after enough searching, I found that <a href="https://nitter.net/">nitter.net</a> has an RSS feature.</p>
<p>Upon a cursory search, I then found out that I could generate a <a href="https://github.com/zedeus/nitter/issues/83">single RSS feed for multiple users</a>. This was great - I&rsquo;d managed to create my own pseudofeed. However, upon loading it into Matter, I realized that the formatting of the RSS feed was a bit awkward. This was to no fault of Nitter&rsquo;s - what else would an expected title be besides, well, the tweet itself? The description also displayed the tweet, though, and because most tweets are longer than I&rsquo;d like for a single box in Matter, it ended up being a bit clunky<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>.</p>
<p>It was at the moment I realized that Nitter was, well, an alternative Twitter interface. The same link I was using to aggregate RSS feeds could also be used to simply browse Nitter (after I removed the <code>/rss</code> bit). So far, it&rsquo;s been pretty great - I don&rsquo;t need to create an account of any sort, and I can&rsquo;t really comment or try to interact with things either. I scroll through the last dayIs tweets in the morning, mark down anything worth bookmarking in Matter, and then just go about the rest of my day. With this setup, I manage to limit my &lsquo;oh wait have I checked if xyz person&rsquo;s done anything&rsquo; moments.</p>
<p>As I see it, Nitters&rsquo;s a bit of a read-only interface, which fits my purposes well. It&rsquo;s really easy to &lsquo;follow&rsquo; and &lsquo;unfollow&rsquo; users by removing them from the URL, and Nitter&rsquo;s also pretty good for going into individual tweets and such. The only issue I&rsquo;ve ever had with it is rate limiting, but that&rsquo;s to be expected without requiring any sort of API key from a user. Luckily, there are tonnes of <a href="https://github.com/zedeus/nitter/wiki/Instances">other Nitter instances</a>, so I can just swap out the URL and continue my doomscrolling.</p>
<h2 id="conclusion">Conclusion</h2>
<p>There&rsquo;s a constant inflow of information that has to pass through my brain for processing: the internet, school, people, and all the other miscellaneous work I have to do. Matter, and the methods I use to read through content that I&rsquo;ve written about above, are my attempts to distill things down to something that&rsquo;s more manageable. I don&rsquo;t want to spend ages scrolling through infinite feeds, but honestly, if I don&rsquo;t have anything else to fill the time with, I&rsquo;m probably going to revert to that. Matter reduces the friction that comes with reading things that actually interest me more - as a website (that I don&rsquo;t have to log in to), I can access it on my phone as well. This leads me to go read things I have in my Matter backlog, instead of scrolling Reddit, for example.</p>
<p>I like building small things for myself (and releasing them and then realizing this fits absolutely no one except me, but that&rsquo;s alright) - it&rsquo;s more fun than trying to make things for people, I guess. This sort of ties into making your own tools - <a href="https://thesephist.com/posts/tools/">thesephist&rsquo;s post on the topic</a>, and <a href="https://www.robinsloan.com/notes/home-cooked-app/">Robin Sloan&rsquo;s</a> are both pretty great posts that I think encapsulate what I tried to do with Matter nicely.</p>
<p>Matter&rsquo;s source is available at <a href="https://github.com/kewbish/matter">kewbish/matter</a> on GitHub, and it&rsquo;s also available at <a href="https://kewbi.sh/matter">kewbi.sh/matter</a>. Everything is client-side (I don&rsquo;t have a way to, or wish to, keep any of your RSS feeds), so feel free to try it out. I&rsquo;d like to clean up the code a bit more (probably unlikely given I have rather scuffed JS skills), and maybe tweak some of the bookmarking stuff. But for now, I&rsquo;m happy with it, and hey - for something I made for myself anyhow, that&rsquo;s enough.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>I used to really hate the phrase media consumption. It reminded me of that disease that novel characters always seemed to come down with, and also implied that we were being spoonfed content by a mysterious algorithm with no real choice in the matter. But really - that&rsquo;s exactly what&rsquo;s going on, isn&rsquo;t it? The Twitter recommended box comes up with three contacts of a given person, and nudges the user to go see what those people are up to as well. You don&rsquo;t have any influence over who comes up, so I suppose the only thing you can control is how you respond to that. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>Admittedly somewhat unnecessary programming, since using a pre-existing reader would have worked just fine and saved a bit of winter break time, but I was looking for something to do anyhow. The experience of building this was a bit of a complementing contrast to the rest of the work I had to do. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>This did lead me to add a nice truncation feature for other websites' links that would overflow though, so I suppose it wasn&rsquo;t all bad. <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>CPSC 110: 1b</title>
      <link>https://kewbi.sh/blog/posts/201227/</link>
      <pubDate>27 Dec 2020</pubDate>
      <author>Emilie Ma ◦ Kewbish</author>
      <description>On designing functions with HtDF.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Why I felt the need to <del>ruin</del> augment my Christmas week with some Racket, I don&rsquo;t know. It was fun to go through some HtDF material with CPSC 110 this week, however - surprisingly, it wasn&rsquo;t as tedious or repetitive as it seemed.</p>
<p>For non-Racketers (Racketeers?), the HtDF recipe, or guide, I suppose, is a method essentially detailing <strong>H</strong>ow <strong>T</strong>o <strong>D</strong>esign <strong>F</strong>unctions. You write a signature (the types expected), the stub (the minimal function needed to get the function to run), the <code>check-expect</code>s (unit tests, basically), the template (the stub, but a little bit more), and the final function. While it does get slightly boring to do the same things for each function (and a bit annoying for small, one-line functions), Kiczales does remind people that it&rsquo;s not a must-follow for everything, but it&rsquo;s good guidelines.</p>
<p>I also finally acquiesced and have started using DrRacket - I needed the stepper for the problem set checking. Besides, some of the distribution files that contain images are in some vaguely newline-filled format that doesn&rsquo;t read nicely in Vim. However, I managed to get vi-like keybindings via <a href="https://github.com/takikawa/drracket-vim-tool">this package</a>, which still works nicely. It&rsquo;s a lot easier to try things out in the REPL, and I can run check-expects aside.</p>
<p>There wasn&rsquo;t much besides the actual recipe covered this week, so we&rsquo;ll see if this post might be a bit shorter. Also, see the <a href="https://kewbi.sh/blog/posts/201213/">CPSC 110 module 1a</a> post I wrote a couple weeks ago.</p>
<h2 id="notes">Notes</h2>
<ul>
<li>htdf recipe is a non-waterfall set of instructions to write and easily debug functions</li>
<li>begin with writing a signature, listing the two types
<ul>
<li>forex, <code>Integer -&gt; String</code></li>
<li>ensure this starts with two semicolons - Kiczales mentions that this is tested for (two semicolons start a line of comments, a single one goes at the end)</li>
<li>sources conflict regarding whether to put the function name first, but for CPSC 110 don&rsquo;t</li>
</ul>
</li>
<li>purpose statement =&gt; one line statement regarding the purpose of function
<ul>
<li>should be as specific regarding return paths as possible</li>
<li>should specify what conditions should be met for a boolean function</li>
</ul>
</li>
<li>function stub =&gt; define the function with its arguments
<ul>
<li>return an empty value for the function</li>
<li>0 for integers, &quot;&quot; for strings, etc</li>
</ul>
</li>
<li>write examples and wrap in <code>check-expect</code>s, which will function as unit tests
<ul>
<li>need to test each code path for example behaviour</li>
<li>ideally number of tests should be around 3 (for boolean), one for each case</li>
<li>DrRacket will highlight unchecked paths in orange</li>
</ul>
</li>
<li>if tests fail on first run =&gt; expected, no functionality has run yet
<ul>
<li>just checking if well-formed</li>
<li>if test fail later, consider the test itself if correct</li>
<li>otherwise, check function definition</li>
<li>however, both can also be incorrect, as Kiczales points out in the video</li>
</ul>
</li>
<li>add a template, which is the stub but with a <code>...</code> and returning the argument
<ul>
<li>keeps track of all variables and what to do</li>
</ul>
</li>
<li>finally, can copy paste and implement function
<ul>
<li>remember to test intermittently to catch problems as they come up</li>
</ul>
</li>
<li>isn&rsquo;t a hard and fast rule, can use different steps along way
<ul>
<li>however, don&rsquo;t jump right into function definitions, which will lead to problems in future</li>
</ul>
</li>
<li>if a problem is poorly formed, clarify all constraints and possible corner cases first</li>
<li>(regarding problem sets and labs) keep htdf and htdd signatures, used by autograder</li>
</ul>
<h2 id="problem-set-and-lab">Problem Set and Lab</h2>
<p>I still have no idea how the problem set to module timing system for CPSC 110 works. While in module 1a, the first problem set contained material about functions that was covered in module 1b and that I had, at the time, not done yet, so I left it for the next week. However, the first lab was entirely of material covered in module 1a. I&rsquo;m sure there&rsquo;s a schedule somewhere<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>The problem set this week was actually quite interesting, and a good challenge level, I feel. I like that it&rsquo;s in a self contained starter file, and that you get to edit and make changes to each part. It reminds me a lot of CS50&rsquo;s distributions each week. Having each question target a specific area of knowledge and material taught in the module while giving everyone an even starting ground is beneficial, I feel, for my learning process. It makes everything feel a lot more manageable.</p>
<p>Lab 1, the intro lab, was also very straightforward. I wasn&rsquo;t able to get access to the quiz, but it was simple material covered in the lectures. I like that each subpart is very short, and that it&rsquo;s sort of like a problem set. It was definitely good practise.</p>
<p>I&rsquo;m not submitting anything for grading - I&rsquo;m still very unsure if I&rsquo;m <em>allowed</em> to be in this edx course at all. I figured that grading might be a bit of an issue, especially as I started the course later, but theoretically I might be able to properly do the course next semester?</p>
<h2 id="conclusion">Conclusion</h2>
<p>I&rsquo;ve recently found out I do have a possible chance at changing my student status to properly enroll in the course, but it&rsquo;s a bit late to do that for second semester. I&rsquo;d ideally like to challenge in the summer, but I also have several other plans. We&rsquo;ll see. In the meantime, I&rsquo;ve realized that CPSC 110 has a lot more modules than I&rsquo;ve expected, so I think finishing the course will take a lot longer, especially with work after winter break. Hopefully I&rsquo;ll be able to still preview before the April close date, and finish preparing for the summer.</p>
<p>Happy holidays, and we&rsquo;ll see what I decide to write about in the new year. I&rsquo;ve got a lot more HCI topics to think through before I write about them, but I think they&rsquo;re interesting enough.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>[later edit]: Upon further inspection, I&rsquo;m pretty sure each week number corresponds to one complete module number. It probably makes more sense that (the hypothetical) week 1, problem set 1, lab 1, and module 1 (containing both module 1a and 1b) are supposed to be done together. I&rsquo;ll probably leave 1a and 1b as separate posts, but combine them in the future. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>Branching</title>
      <link>https://kewbi.sh/blog/posts/201220/</link>
      <pubDate>20 Dec 2020</pubDate>
      <author>Emilie Ma ◦ Kewbish</author>
      <description>On Wikipedia rabbit holes and clickchains.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>I&rsquo;m currently trying to plod my way through <a href="https://kewbi.sh/blog/posts/201213/">designing functions</a>, so I thought I&rsquo;d write about a new thought-chain<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>: branching. I&rsquo;ve not read a lot of posts or threads regarding branching, but maybe I just can&rsquo;t manage to find the right search terms yet.</p>
<p>I&rsquo;d define branching as the feeling (though it&rsquo;s more of a concept) that you get when you find a thread (perhaps on Twitter, perhaps elsewhere) that&rsquo;s linking to tonnes of different places and new articles that you also find interesting. I&rsquo;ve mostly seen branching in the form of Twitter threads or link-dense blog posts, but I&rsquo;m sure there&rsquo;s also forms of branching in scientific journal papers and many other facets of long-form (and shorter, I suppose) content. The idea is prevalent in <a href="https://twitter.com/Conaw/status/1129806786477772801">this thread</a> by Conor White-Sullivan, which I inadvertently stumbled upon from <a href="https://twitter.com/geoffreylitt/status/1338212261282897921">Geoffrey Litt&rsquo;s Twitter memex</a>. (Look, a branch within the concept of branching!) White-Sullivan&rsquo;s thread is full of quotes and new links: a great example of branching in its natural habitat. I will exert a considerable amount of self control not to open it right now and go down an entire rabbit hole. Anyways.</p>
<p>Branching seems to be at least one of the reasons that Wikipedia rabbit holes are a thing. There&rsquo;s just so much to explore, and especially if the subject of a thread is something you&rsquo;re passionate about and interested in, it&rsquo;s quite possible to accidentally go two or three &lsquo;levels&rsquo; deep. The clickchain is never ending, and it&rsquo;s probably quite possible to end up in recursive loops of branching as well.</p>
<p>Branching is present not just in casual social media interactions, but is also a significant part of how popular notetaking and productivity apps function now. There&rsquo;s the classic Roam or Obsidian graph, and the nearly infinitely nesting tasks lists that Todoist users seem to love. I find that, when exploring new fields and getting into new areas of study, there&rsquo;s an inherent branching model present. Information links to information links to information, and so on. The intrinsic hyperlinking of the web makes branching even more obvious - it&rsquo;s immediately clear what next steps to research are, after I&rsquo;ve read a post. This leads to the chains of deep Wikipedia / information surfing that essentially form branching.</p>
<p>This post is intended as a collection of my current thoughts on branching, and the kind of infinite exploration canvas that it presents. There are some slightly unrelated examples of things that are relevant to branching here, but I may as well also categorize those thoughts for later. Perhaps this branching post will be the branching point for any readers to also metacognize about branching. Winter break just started, so what better time to spend ages writing an essay on branching and then going on tonnes of clickchains in the process?</p>
<h2 id="exploring-areas">Exploring Areas</h2>
<p>A prominent example of how branching happens in my life is when I try to branch into (pun intended) and explore a new area of knowledge. No matter what the topic is, I tend to first find some piece of information, be extremely confused about all the terms in it, and then try to decipher things one definition at a time. In some ways, this reflects how we used to be taught in elementary school: be force-fed  a central topic, with a handy box of definitions on the side. However, most blog posts, papers, or even Wikipedia definitions don&rsquo;t explain each individual term in detail - they assume some knowledge of the topic, or else the page would be endless. (In order to define term A, it must explain in terms of B, which relies on C, and so on.) When I finally map out all the things I don&rsquo;t know, I find that there&rsquo;s a huge tree that&rsquo;s out there to explore, and would you look at it: it&rsquo;s all branched out into separate categories. Usually, there <em>is</em> some end to the information graph, but the tree gets several layers deep.</p>
<p>One example of this is when I recently read <a href="https://en.wikipedia.org/wiki/G%C3%B6del,_Escher,_Bach">Gödel, Escher, Bach</a> by Douglas Hofstadter<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>. It is admittedly extremely academic, and some of the concepts still go over my head. My opinions on the book are currently in their formation phase - that&rsquo;s a topic for another blog post, not now. One of the things I <em>will</em> discuss is how the entire book is formed around, and basically encourages, branching. Perhaps it&rsquo;s a bit of my fault that I started with the preface, which discusses concepts better explained in the body of the book, but immediately there were a bunch of terms and areas that were extremely confusing. These terms and concepts all linked to each other, but explained separate facets of the point. (This is the part where I tell you to probably go at least read a summary of the book or something. It&rsquo;s an experience and a half.)</p>
<p>Reading GEB is when I started really thinking about branching. Hofstadter approaches topics from many different lenses: music (you can spend hours in the YouTube recommendations after watching a couple of the related pieces), art (Escher is extremely talented), computer science (my passion, and cause of the longest clickchains), and life sciences (many flashbacks to organic chemistry and biology were had). Yet they all converge at the central point of the novel - which you should go find out about by reading said novel. With this diverse array of topics, however, I spent ages going off on side tangents reading about what a recursive transition network was, or how Gödel numbering worked. I&rsquo;m still working on mapping out a way to start looking into each of the topics more, because they&rsquo;re definitely things I&rsquo;d like to look into for the future.</p>
<h2 id="tracking-branches">Tracking Branches</h2>
<p>Speaking of thinking about the meta-possibilities of branching, I&rsquo;d also like to track my thoughts about how I can use branching to study a topic, or reflect on the overall experience of each clickchain. With GEB, for example, I&rsquo;ve been trying to map out a guide of all the areas, linking them all together. In this linking process, I see the appeal of a more connected notetaking technique, but I think just being mindful about how concepts link together provides a lot of insight into how information flows.</p>
<p>Sometimes, branching can feel a bit overwhelming. Having an essentially infinite number of links to follow next makes keeping track of time and the actual convergence point behind all of the branches difficult, but also crucial. There&rsquo;s no point in reading about a random topic if you&rsquo;re not going to connect it to something else to use, unless it&rsquo;s unrelated trivia or a new branching origin point. With most topics, I feel that I need a way to keep track of these branches, and look into how to manipulate context to remember or draw out additional branches for further exploration.</p>
<p>Among all the content and information that flows in, there will inevitably be some threads that have provided key branching value. Perhaps a Twitter thread that&rsquo;s been extra insightful about something, or a blog post that has linked to several more that you greatly enjoy. I obviously want to keep things like this somewhere for future reference, but I&rsquo;m not entirely sure how to reflect this in my overall notetaking / knowledge base system. I link content where relevant, but there&rsquo;s points and levels within the branching that I&rsquo;d really like to extract. I think that this keeping track of &lsquo;good&rsquo; branches is a topic that I want to think about more, and perhaps make a personal tool for. Others have made similar things regarding branching: the <a href="https://twitter.com/szymon_k/status/1289942401318977537">paned and tree-style browser history</a>, and the memexing threads I discussed above are both great examples that served as branching origins for my own thoughts about branching.</p>
<h2 id="conclusion">Conclusion</h2>
<p>When I think about one of these HCI topics, I tend to also envision some personal solution to the problem. For the branching problem, I had the idea of a CLI to add and remove branches, and have an overview. I&rsquo;ve since realized that because it&rsquo;s so disconnected from the rest of my systems, I&rsquo;m probably going to update it infrequently, and it&rsquo;s going to end up just as another archived GitHub repo. For now, I&rsquo;m just using a text file with interesting branch origins, and keeping folders of notes as I go. This approach has worked pretty well so far. I&rsquo;ve realized that while some of the branch origins are truly notable, others are just interesting content that don&rsquo;t really fit in anywhere.</p>
<p>These HCI posts are actually a lot of fun to write, and I think I&rsquo;ve found a nice area to explore in the future. I have lots of topics on the mind at the moment, and I&rsquo;ll have many more thought-chains over the holidays, I&rsquo;m sure. Speaking of the holidays, there are only two weeks left in 2020, and one blog post after this one. I&rsquo;ve kept a weekly posting schedule for a good half of this past year, but I think I might switch my writing schedule a bit with the new year. I&rsquo;m not sure yet about that - we&rsquo;ll find out when we get there.</p>
<p>I hope that I&rsquo;ll be able to finish another section of CPSC 110 by next week, though it is the holidays now. It might be a tad premature, but happy holidays, and good luck on the remaining five days of <a href="https://adventofcode.com/">Advent of Code</a> if you&rsquo;re doing it. In the beginning, it was pretty fun, but now it&rsquo;s getting a bit tedious and difficult. It takes a lot more time than I have, but I only have a couple days left. Hopefully after that&rsquo;s all done and finished I&rsquo;ll devote more time to CPSC 110, but for now, I&rsquo;ll return to puzzling my way through the Jurassic (day 20)<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>I don&rsquo;t have anything else to call them - I see them kind of like Twitter threads, but with less of the quote retweets and tendency to inspire long chains of clicking through old threads. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>I did manage to finish the book, and have copious notes for it. I am still a bit confused on some areas, and I think I&rsquo;d like to explore RTNs and some of the other automata and formal grammar ideas in it. Coincidentally, I stumbled upon another branch while trying to research RTNs - first finding about the context free grammar relation, then finding out about the Chomsky hierarchy, then about regex and how those connect to automata, and then finally down a bunch of rabbit holes involving <a href="https://twitter.com/happyautomata">this cute automata bot</a>. Go check that out - it&rsquo;s extremely nerdy but it&rsquo;s also extremely amusing and fun. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>I will admit, I did reference another person&rsquo;s code for this. It was a difficult day. <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>CPSC 110: 1a</title>
      <link>https://kewbi.sh/blog/posts/201213/</link>
      <pubDate>13 Dec 2020</pubDate>
      <author>Emilie Ma ◦ Kewbish</author>
      <description>On finding my way into CPSC 110.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Racket, so far, has been an interesting language - lots of parentheses matching and prefix notation mistakes. It&rsquo;s unlike what I&rsquo;m used to (which is rather cobbled-together Python) but it&rsquo;s also quite fun to use. Also, because people keep asking: no, I didn&rsquo;t just decide to learn Racket for my own amusement, though I&rsquo;ve certainly got a lot out of the few short weeks I&rsquo;ve used it. I&rsquo;m planning on taking CPSC 110<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, which uses Racket extensively, and I&rsquo;d like to do the course first. (Why does it feel like I&rsquo;ve said this before? I don&rsquo;t know.)</p>
<p>I&rsquo;d initially tried to take the <a href="https://www.edx.org/course/how-to-code-simple-data">open edX version</a> of it, but I got a bit sidetracked with rack8, my Chip-8 emulator, and ended up letting it time out. It wouldn&rsquo;t let me into the course after a month, which was rather unfortunate.</p>
<p>However, I managed to finagle myself into the <em>actual</em> CPSC Edge (private edX platform, I think?) that&rsquo;s used. This contains the current problem sets and labs, as well as having a lot more final exam practises than on the public version. Fun! (Also, this won&rsquo;t time out until the end of the semester in late April, so I&rsquo;ll definitely be good on time.)</p>
<p>In this sort-of-series, I&rsquo;d like to document my progress through CPSC 110 (which should be the same as if on the public version anyhow). I did something similar last summer with <a href="https://kewbi.sh/blog/posts/200621/">CS50</a>, so hopefully I&rsquo;ll be more motivated to complete everything in a timely manner. Here&rsquo;s the first post: notes and thoughts on part 1a, in which Kiczales guides us on a scenic tour of BSL (Beginning Student Language).</p>
<h2 id="notes">Notes</h2>
<p>Like my CS50 posts, I&rsquo;m generally going to put my personal notes here. Skip to the <a href="#a-short-reflection">reflection</a> if you wish.</p>
<ul>
<li>Racket works with expressions (each statement in parentheses, essentially) to form programs
<ul>
<li>each exp is an element that is evaluated (Racket is compiled and then run from the bytecode)</li>
<li>functions go first, parameters later, so <code>(+ 3 4)</code> (which would be 7) (prefix notation)</li>
<li>have a very specific style guide w/ where they want spaces, refer to expressions section</li>
</ul>
</li>
<li>examples of primitives =&gt; strings, numbers
<ul>
<li>basic data structure provided by BSL (and later basically Racket)</li>
</ul>
</li>
<li>follows order of operations =&gt; evaluates innermost first, from left to right
<ul>
<li>each step of the evaluation plugs in results to the next one</li>
<li>frequently in the embedded questions</li>
</ul>
</li>
<li>Racket substring indices work like Python =&gt; range but excludes last one</li>
<li>using <code>(require 2htdp/image)</code> brings in image primitives
<ul>
<li>can draw with <code>(above)</code> and <code>(overlay)</code>, etc</li>
<li>stack <code>(circle)</code>s and other primitives inside =&gt; refer to docs</li>
<li>(# interesting that they choose to use images in their first examples, probably makes things a bit more intuitive?)</li>
</ul>
</li>
<li>definitions with <code>(define)</code> =&gt; Kiczales says these are generally capitalized
<ul>
<li>also can define functions as long as fn name and parameters in sep set of parentheses</li>
<li>fn is evaluated first by evaluting arguments and plugging those into main fn expressions</li>
<li>then the same rules of evaluation follow throughout</li>
<li>can use Stepper to see step-by-step evaluation of entire program in DrRacket</li>
</ul>
</li>
<li>booleans are <code>true</code> and <code>false</code>, instead of the <code>#t</code> and <code>#f</code> I used in rack8
<ul>
<li>are actually equivalent but I suppose for CPSC 110 use true/false</li>
<li>use <code>(and)</code>, <code>(or)</code>, and <code>(not)</code> to evaluate multiple (see conditionals section)</li>
<li>and only evaluates until it finds one that isn&rsquo;t true, or evalutes only until it finds an expression that is true</li>
</ul>
</li>
<li>Racket doesn&rsquo;t have a single expression if =&gt; must have an else clause
<ul>
<li>in rack8 just used a void expression, haven&rsquo;t gone through what to do in the recommended CPSC 110 style</li>
<li>the expression must go as a second argument in parentheses</li>
</ul>
</li>
<li>if evaluation, and other conditional expressions first evaluate the &lsquo;question expression&rsquo;s
<ul>
<li>then replaces the body of the if with either the true or false expression and evaluate the entire final expression</li>
<li>if neither, then produce an error</li>
</ul>
</li>
</ul>
<h2 id="a-short-reflection">A Short Reflection</h2>
<p>As an aside, it feels kind of weird to take notes on this, especially as some of it&rsquo;s stuff I&rsquo;ve muddled my way through via experience with rack8. However, I have a feeling I&rsquo;m going to forget the specifics if I don&rsquo;t at least try to record it, and perhaps this will serve as some sort of guide for others who are also investigating CPSC 110 or Racket.</p>
<p>Also, a brief note on setup. It&rsquo;s entirely possible to do Racket and most of what&rsquo;s done by Kiczales in a different IDE than DrRacket. Is it recommended to use Vim just because one feels like it? Probably not, but I couldn&rsquo;t be bothered to set it up while doing rack8, and now also cannot be bothered to set it up, since everything already works fine(ish) in Vim. I won&rsquo;t get the image functionality, or the REPL (though I <em>could</em> do that in VimScript or an extension), but I&rsquo;m alright with that.</p>
<p>I think I prefer Kiczales&rsquo;s teaching style to Malan&rsquo;s (see CS50 posts), or at least the course organization overall. CS50 lectures were very long chunks of information, and I find CPSC 110 is sort of like watching all of the CS50 shorts with questions in between.</p>
<p>That shorter cycle has been a lot more helpful, especially with the way the Edge course sticks a bunch of questions in some very innovative formats<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> in between each video. Kiczales&rsquo;s videos are nicely clear and concise, and theywork even when not using DrRacket or listening fully. Also, kudos to whoever had to edit and put in those arrows and annotation diagrams - they&rsquo;re super helpful, but were probably extremely painful to animate and put in.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Section 1a of the course has mostly been basic material that I&rsquo;ve covered on my own, but I think it&rsquo;s still valuable to review, especially the finer minutiae of evaluation ordering and what exactly is expected style-wise in autograder submissions. I&rsquo;m looking forward to section 1b, which is more on &lsquo;how to design functions&rsquo;. From what I&rsquo;ve researched on my own, there seems to be a pattern recipe of some kind involved, but we&rsquo;ll see more about that in the next CPSC 110 post.</p>
<p>On the more logistics side of things, I don&rsquo;t think I&rsquo;ll be able to churn through a section a week (or maybe I will - who knows? Winter break <em>is</em> coming up-), so I&rsquo;ll try to break things up with some thought-chain posts. Those will be the HCI ones, like the one I made recently regarding <a href="https://kewbi.sh/blog/posts/201206/">persisting context in annotations</a>. Hopefully that&rsquo;ll give me some more time to absorb and process the CPSC 110 material, as well as explore some of the thinking I&rsquo;ve been doing on my own regarding HCI. I&rsquo;m looking to finish this course sometime before the summer, hopefully so I can challenge the course right after I graduate, or sometime in the first term. We&rsquo;ll see, but for now, I&rsquo;ll be going back to BSL, and more Racket.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>UBC&rsquo;s introductory course on designing programs that all students pursuing some form of CS will have to take some form of. I <em>could</em> take 103 + 107, but that&rsquo;d be 2x more courses for roughly the same material, according to certain sources. Also, I can challenge the exam, which will save me a good amount of time and effort. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>I was not aware the question could see what part of the screen you were clicking on, which enabled some interesting question formats. Think along the lines of &lsquo;identify a parameter in this function call code block, put this green dot over it.&rsquo; <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>Morse Code Context</title>
      <link>https://kewbi.sh/blog/posts/201206/</link>
      <pubDate>06 Dec 2020</pubDate>
      <author>Emilie Ma ◦ Kewbish</author>
      <description>On dots, dashes, and annotations.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Hello, and welcome to another episode of <em>Kewbish talks about notes and knowledge for no reason whatsoever</em>. I&rsquo;ve somehow fallen into the corner of the interwebs vaguely describable as &lsquo;knowledge twt&rsquo;<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. Reading papers, especially CS-ish design (read: not entirely incomprehensible) ones, is kind of nice. Perhaps this habit stems from the lab reports we constantly have to write, but I find reading through them therapeutic, in a way.</p>
<p>These papers have a host of ideas spanning many disciplines and areas of thought. That&rsquo;s something I kind of like, as someone very inexperienced in the field. HCI, as I think it&rsquo;s properly called, spans a large breadth of thought. Luckily, most of it is the sort of thing that balances yet complements the science-focused learning I do for school. I find it fun to read papers (yes, I&rsquo;m a massive nerd), especially these, where I don&rsquo;t have to constantly do math or think about theory (though that can also be fun).</p>
<p>One of the ideas I&rsquo;ve seen over the last couple weeks was the concept of context, and either persisting or deleting it. How does one encapsulate the context of a moment, be it <a href="https://twitter.com/szymon_k/status/1289942401318977537">branching browser history</a> or <a href="https://zettelkasten.de/posts/bookmark-breadcrumbs/">leaving a trail of thoughts between processing sessions</a>? The concept is striking: when looking through things I&rsquo;ve written even just a year ago, there&rsquo;s often a question of why I even thought it was a good idea. Re-entering, or even getting a glimpse into, the frame of mind I was in then would be very interesting for reflection<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</p>
<p>I&rsquo;d like to bookmark my thoughts and keep a giant log of posts that have sparked a rabbit hole of thought, but I also think it&rsquo;s kind of charming to rediscover posts on their own. It&rsquo;s a slow, perhaps luck-based, process, and I&rsquo;m not guaranteed to recover a key article, but it&rsquo;s more organic. Increasing serendipity or something.</p>
<p>I&rsquo;m vaguely free from school at the moment, so I might write a bit about some thought-chains I&rsquo;ve had surrounding HCI topics. Maybe these posts&rsquo;ll get published, maybe they won&rsquo;t. Please don&rsquo;t take these seriously; I wanted to record random things I was thinking about and I thought I may as well publish them.</p>
<h2 id="dots-and-dashes">Dots and Dashes</h2>
<p>The first inspiration for this chain of thought was a tweet involving Cal Newport&rsquo;s <a href="https://www.calnewport.com/blog/2008/02/18/monday-master-class-rapid-note-taking-with-the-morse-code-method/">Morse Code Method</a>. It&rsquo;s from a while ago, but it has some interesting points regarding contexts, and context switching.</p>
<p>In the article, Newport touches on a efficient style of notetaking: the Morse Code Method. The only two symbols are, aptly, a dot and a dash. While skimming through and processing content a first time, mark each main point with a dot. Supporting ideas are denoted instead with a dash. It&rsquo;s important to maintain momentum while processing the literature, which makes the entire process a lot quicker than the typical &lsquo;read and annotate at the same time&rsquo; technique. Not breaking the reading flow also would definitely reduce the amount of <a href="https://kewbi.sh/blog/posts/201018/">context switching</a> required.</p>
<p>Newport then suggests annotating and pulling together additional notes <em>after</em> the process of reading, making it a distinct second step. I see this as playing into active recall somewhat, albeit in a very short-term, very non-spaced repetition way. Dots are reviewed for their striking-ness, and discarded if now irrelevant. This process of reviewing and redoing notes after having a different view on the paper definitely helps with filtering. I find that notes <em>before</em> or <em>while</em> learning a topic are a lot less polished and full of (usually unanswered) questions instead of actual new thought. After taking the time to understand and condense information<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>, the third step to this strategy-of-sorts, notes are usually more direct and dense.</p>
<h2 id="a-search-for-serendipity">A Search for Serendipity</h2>
<p>Sometime when I was supposed to be doing work, I had a thought. I haven&rsquo;t tried it myself, nor have I had the idea long enough to evaluate it, but I think it might be interesting. What would happen if the second and third steps of the above method were eliminated? There might be something intriguing there if the need to paraphrase and keep annotations was gone, and we just had dots and dashes scrawled in page margins.</p>
<p>Obviously, if a line inspires a groundbreaking idea, that might warrant more permanent storage. While there&rsquo;s some use to writing everything I take out of a given text or chunk of information, I feel like it makes things a lot more rigid. Rigid, as in, I now have one interpretation (hopefully mostly thoughts that are original and add to the material) in front of me. If I never looked at the text itself again, I might never try to reinterpret and rethink the ideas with my current worldview. After all, I&rsquo;ve read it once, and I now have these very comprehensive notes, so why should I? Perhaps a book isn&rsquo;t quite good enough to warrant a second reading, and maybe the notes are good enough™.</p>
<p>But I feel like there&rsquo;s a lost possible serendipity. Sure, finding ideas anew without rereading is certainly possible, especially if you&rsquo;ve densely interwoven your notes with other thoughts, as in a <a href="https://zettelkasten.de/posts/overview/">Zettelkasten</a>. There&rsquo;s the chance that you might stumble upon an orphaned or unlinked markdown file. However, I don&rsquo;t know if there&rsquo;s enough of a reason to revisit and reevaluate thoughts this way.</p>
<p>If I was just presented with a trail of dots and dashes, and perhaps had to filter out information again, I&rsquo;d probably develop a whole new set of ideas. Coming from the possible added perspective of a couple months or years, this might be a bit better than static (evergreen?) notes. There&rsquo;s a sense of wonder and clicking through rabbit holes the first time one finds a particularly well-linked and well-connected thread of thoughts. I&rsquo;m not sure if I can document that all the first time, and I&rsquo;m also not sure if I&rsquo;d be able to remember key points that were most interesting again.</p>
<p>I was thinking of building another personal Chrome extension lately. Instead of keeping more fleshed-out annotations in a bank, simple dots and dashes were placed in the margin of a webpage. (CSS-wise this might be a bit tricky, but let&rsquo;s not discuss the technical details.) I&rsquo;d not keep proper thoughts; just little circles and lines. Perhaps these could be reordered with shortcuts, and maybe even combined in different contexts. It might also provide insight through time by track placement of these pico-annotations.</p>
<p>This, however, does come with the same caveats as footnote 3<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>. While it does increase the possibility to rediscover and readd new ideas, ideas will be filtered out and left in the dust at times. These might not be as &lsquo;big&rsquo; as some of the other points, and not get passed on to the next generation of notes. Context, as well, might well be lost. If a thought from generation 1 of a note only happened due to connections with other similar thoughts in context of mindspace 1, what happens if mindspace 1 is entirely dissimilar from mindspace 2 when taking generation 2 notes?</p>
<h2 id="mapping-context">Mapping Context</h2>
<p>The idea I&rsquo;m trying to explore is the persistence of context. On one hand, a constant, rigid context (if well-written) provides stability at the expense of some additional commitment and friction when trying to add to them. Not only does one have to recomprehend the text or work at hand, but one also has to try to reenter the mental location they were in when first processing information. The ideas surrounding previous ideas may unknowingly invade newer thoughts, tainting them retroactively, in a way.</p>
<p>I don&rsquo;t want to lose my place, or my frame of mind. An ideal situation would be infinite memory, and an equally infinite and expandable notation for my current context. (But that might be a tad overwhelming.) Leaving a breadcrumb trail of similar thoughts that led to a specific thought would increase the amount of notetaking friction at one point in time, but may help in the future. There&rsquo;s no point to do context-heavy notes for a topic that you know won&rsquo;t be referenced in the future, so that might reduce the amount of labour if you&rsquo;re fully aware this for a one-off thing. But how does someone evaluate this &lsquo;one-off&rsquo;ness? You could argue that no notes should be made at all, if it&rsquo;s only to be used in the extremely short term.</p>
<p>On the other hand, completely throwing away trying to recall the context, and focusing on just the current interpretation gives some more flexibility for the future. With a way to remember which points and which areas made you think last time, it might be an interesting balance to investivate. The main points and supporting points you picked out last time would still be available to see, but perhaps the interpretation could be different this time around, or maybe it&rsquo;s largely the same.</p>
<p>I&rsquo;m wondering how I can reflect a context of a moment into my notes without creating too much extra friction force against taking notes. Currently, the persistent pico-annotation idea, combined with perhaps note versioning but with fresh starts every so often, is my best thought on the topic. Perhaps another day of diving into Twitter threads might be in order.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Context, especially wih regards to processing, is an intriguing area of thought. A lack of context forms a certain atmosphere, if I can call it that, and a large amount of it creates an metalayer. The amusing screenshots that fill up my Imgur are generally taken out of context. Notetaking often happens without context - especially if it&rsquo;s just raw information without reflection. Automatically added metadata (file creation time, EXIF data) adds another layer of searching possibilities, and a feeling of meta-organization. I have no idea whether context is absolutely essential or not, but I can see how it (over?)shadows interpretation. Just earlier, I was annotating an act of a play for class again (I did it in a different format that I wasn&rsquo;t satisfied with the first time round), and found myself essentially reframing past thoughts slightly. Maybe it&rsquo;s just me, and the way I work.</p>
<p>Tech Twitter is a very deep rabbit hole, and is very good at leading me into long clickchains. However, I can justify reading papers and being extremely nerdy about this because it&rsquo;s semi-productive, right? It&rsquo;s led me to investigate a lot of literature I wouldn&rsquo;t have without it, and is strangely therapeutic, so that&rsquo;s that.</p>
<p>I suppose this is a nice round place to end off. This was indeed full of tangents and small points, but I think it&rsquo;s a nice way to frame my thoughts for later (look, context!). I have nowhere else to put them, and this essay&rsquo;s vaguely technical, so here it shall stay.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>That being said, I also don&rsquo;t have a Twitter, which makes things slightly less addicting / more difficult to check in on all the content, but here we are. It&rsquo;s also interesting to note how seemingly everyone in HCItwt seems to know, or at least somewhere reference the others. It&rsquo;s a Roam graph of people - which I suppose is the essence of a social network. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>And the same process will happen in two or three years when I return to these posts. It&rsquo;s a cycle, and it&rsquo;s a process - but that doesn&rsquo;t mean I won&rsquo;t cringe. Well, at least the cringe now is several magnitudes less than two years ago: will this pattern continue? <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>It might be interesting to see how this process would play out if intermediary layers were scrapped. Perhaps if they were on scratch paper, intended on being thrown away or (a less harsh approach) filed into a &lsquo;cold&rsquo; archive for very unfrequent retrieval, it might reduce the pressure of making &lsquo;good notes&rsquo;. However, there&rsquo;d come the very real possibility of not recording any new thoughts that might have helped with future iterations of a concept, or losing existing ones in the condensing process. <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
