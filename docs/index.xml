<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>Yours, Kewbish</title>
    <link>https://kewbi.sh/blog/</link>
    <description>Latest Yours, Kewbish posts</description>
    <generator>Hugo + Yours, Kewbish</generator>
    <lastBuildDate>Sun, 07 Feb 2021 19:11:56 -0800</lastBuildDate>
    
	<atom:link href="https://kewbi.sh/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Month of Articles</title>
      <link>https://kewbi.sh/blog/posts/210207/</link>
      <pubDate>07 Feb 2021</pubDate>
      <author>Emilie Ma ◦ Kewbish</author>
      <guid>https://kewbi.sh/blog/posts/210207/</guid>
      <description>On tracking every single article I read in January.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>I&rsquo;ve been thinking more about the things I read: content, perspective, and contribution to my being in some form. As of now, content-wise, I prefer a mix of technology and meta-productivity or knowledge-building. Perspective-wise, I don&rsquo;t really have an opinion on, but seeing things from very passionate and very noncommital points of view can be interesting. Recently, I&rsquo;ve been mostly focusing on thinking about how what I read fits in, contribution-wise.</p>
<p>This series of thoughts started with me doing a decent chunk of self-study of maths, physics, and some CS over the summer. I was reading a lot of drier information each day, but most of it was material I needed to cover (well, not needed, but wanted to, for the sake of pre-reading) and properly remember. Trying to take clear and concise notes to build a library of references I could look back to later was not the most innovative or impactful summer project, but at least it helped me build a sense of what I liked in content, and what role I wanted consuming that information to play in my daily life.</p>
<p>While trying to teach myself, I started to notice that there were certain information &lsquo;aesthetics&rsquo; that I tended towards. I have a thing both for older, pre-&lsquo;CSS is important&rsquo; era university sites, where math profs simply share their knowledge without any ulterior motive; and newer sites that perhaps contained interactives, or more casual information sharing. My article aesthetic now is similar - I tend towards indie personal sites, rather than &lsquo;popular&rsquo; blogs with share buttons plastered all over. However, finding those articles and websites is pretty difficult - how do I search for &lsquo;small blogs that write generally about programming but in a easy-to-understand way&rsquo;?</p>
<p><a href="https://findka.com">Findka</a>, so far, has been eerily good at recommending things that I&rsquo;m actually interested in - I suppose the closer and more active user base has something to do with that<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. Despite not having the popularity of other forums like r/programming and dev.to, it strikes a nice balance of articles both aligning with and outside my interests. It&rsquo;s become much easier to find a couple articles to read a day to satisfy my productive procrastination needs, rather than having to scroll through other sites with a much higher noise to signal ratio.</p>
<p>However, I still found that I was trying to skim through a bit too much each day. I was still alt-tabbing to go off on blog post tangents when I&rsquo;d set out to do something completely different, and I wanted to try to curtail that as much as possible. With the new year, and all the vague self-improvement energy that saturates the internet, I decided to track every article I read for the month of January (spoiler: I have somehow trained myself to subconsciously continue this, well into February). I was looking to see what insights I could gain, and observe if consciously tracking content would make a difference in what and why I was reading.</p>
<h2 id="the-rules">The Rules</h2>
<p>I&rsquo;ll go into how I tracked and counted these articles exactly in a bit, but I&rsquo;d like to explain my materials and methods first. (I will try my best not to turn this into a giant lab report, but as I edit this, I can see that I&rsquo;ve somewhat failed.) I imposed a couple of rules on what counted as an article to track or not, mainly to keep statistics more consistent.</p>
<ul>
<li>I&rsquo;d keep forum-like sites out of the article count - things like Reddit, Lobste.rs discussions, Twitter threads and StackOverflow pages wouldn&rsquo;t count.</li>
<li>Speaking of StackOverflow, tutorials and other technical references also weren&rsquo;t included. Documentation for libraries, looking up regex, or following some walkthrough to set something up, for example, fall into this category.</li>
<li>Content required for schoolwork was not included as well - the point of this experiment was to track what I was reading outside of school, not how much I was studying.</li>
<li>I allowed myself to skim the first paragraph-ish to determine if I&rsquo;d like to read the article fully or not, and then track the article. I was definitely also allowed to stop reading the post at any time, but by any point after the first hundred-ish words, the article would already be tracked.</li>
<li>Every single article besides that would be counted - blog posts, Reddit and Twitter links, Findka recommendations would all count towards the day&rsquo;s total.</li>
</ul>
<h2 id="the-graphs">The Graphs</h2>
<p>So we&rsquo;ve come to the graphs, of which there are only two - I think they encapsulate most of the data well enough, and leaves out the parts that I&rsquo;d rather not share (for example, the list of posts I read). One shows a total of articles read per day, with a three day rolling average, and the other shows a distribution of the times I read any article each day.</p>
<figure>
    <img src="https://i.imgur.com/0ChbUQV.png"
         alt="Figure 1. A graph showing articles read per day"/> <figcaption>
            <p><em>Figure 1. Articles read per day.</em></p>
        </figcaption>
</figure>

<p>You can see a large spike in the beginning of the experiment - I&rsquo;ve coloured those bars a darker grey because I don&rsquo;t think they represent what I was actually reading. If I go back through the Google Sheet (more about technical implementations later) that houses all my responses, there&rsquo;s a lot of repeated links clustered very close together, so I&rsquo;m going to assume I was trying to figure out how to make the technical bits and pieces work together.</p>
<p>There&rsquo;s also a pretty significant dip in the middle of the experiment - it was already coming to the end of term, and there was a steady influx of homework, leaving less time for reading. It&rsquo;s interesting to see how homework has such a significant impact on what I can consume content-wise, but that&rsquo;s sort of expected anyhow.</p>
<p>I&rsquo;d also like to mention that I went from 5 Findka articles a day, to 3, somewhere in that second week, which ended up increasing back to 4 in the third. I&rsquo;ve been increasingly turning to Matter and Findka (on Matter, yay RSS feeds!) more instead of scrolling through aggregators, so a fluctuation in articles there generally correlates with changes in reading.</p>
<figure>
    <img src="https://i.imgur.com/CAnUol8.png"
         alt="Figure 2. A graph showing time distribution for article readings per day."/> <figcaption>
            <p><em>Figure 2. Time distribution for article readings per day.</em></p>
        </figcaption>
</figure>

<p>This figure shows the timestamps of each log. There are two main bands around morning and afternoon - more on that later.</p>
<p>If you&rsquo;d like some raw numbers:</p>
<ul>
<li>I read 174 articles over 26 days - short and long form are included</li>
<li>That averages to around 6.69 articles a day over the entire range</li>
<li>Each week, I averaged a different number of articles:
<ul>
<li>The first week (I was doing a lot of testing with my Shortcuts and things), I averaged 9.5 per day</li>
<li>The second week, I averaged 4.6 articles a day</li>
<li>The third week, I averaged 4.4 articles per day</li>
<li>For the last week of the experiment, I averaged 5.5 a day</li>
</ul>
</li>
</ul>
<h2 id="the-findings">The Findings</h2>
<p>I suppose that this would be the discussion part of this pseudo-lab report, so let&rsquo;s get into some expectations, findings and takeaways.</p>
<p>My hypothesis going into this entire tracking experiment was that by being more conscious about what and when I was reading, I&rsquo;d manage to self-regulate more impulsive reading sprees, and check the productive procrastination that sometimes ticks in. Before I started this, I had a bit of a reflex to just Ctrl-T, open up a new tab, and sort of spam whatever into the omnibox before my brain consciously processed what I was doing, and then close the tab. (Oddly enough, I ended up not going down those rabbit holes most of the time anyway, but it was a bit annoying to accidentally keep opening and searching around for things to procrastinate with.)</p>
<p>In the rules, I explicitly stated that I wouldn&rsquo;t include Reddit, Twitter, or discussion threads in the totals for each day. I thought that this would lead me to spend proportionally more time there, but I don&rsquo;t think it&rsquo;s made a significant difference. I think that having to explicitly log what I was reading while giving myself planned time to read reduced the urge to go look for something to read well enough. At the moment, I go through my Findka, Matter, and Nitter in the morning, and I&rsquo;ve realized that there&rsquo;s really no point in checking much more frequently - people don&rsquo;t create meaningful content in 15 minute intervals. It feels more satisfying to go through a larger chunk of content anyways, though I can&rsquo;t measure how much of this was due to the tracking in any quantifiable numbers. Creating a regular schedule for reading through things, and trying to keep myself accountable with the log, was surprisingly useful.</p>
<p>Speaking of surprises, tracking every single link I&rsquo;d read over the past month has built up sort of a library effect. While retention of points isn&rsquo;t something I&rsquo;ve explored in my data at all, I have less of an issue finding really great articles and then losing them in my browser history. I know that everything I&rsquo;ve read is in a central location, and it&rsquo;s much easier to find things in one place than to search for that place, and then for the article I&rsquo;m looking for<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>. (It&rsquo;s also probably useful to mention that I do generate summaries of what I&rsquo;ve read each week to review and see what I&rsquo;d like to take away from.) I find that I can at least vaguely remember what I&rsquo;ve read better - especially since I try to consciously choose better articles to &lsquo;commit&rsquo; to when I track them.</p>
<p>Going back to the raw data, and the charts I put in the section above, it&rsquo;s interesting to see how the amount of schoolwork (a non-tracked item, but something I can very clearly remember) has an impact on my reading. It&rsquo;s probably just because of how I organize my days - if I really have homework to catch up on, I&rsquo;ll work in the time that I have scheduled out for checking various social media, which pushes the reading to the next available block of time (which, if I&rsquo;m busy, would be in a while). It&rsquo;s also interesting to see that, even with heavy workloads, I kept up with most of my recommendations and reading, never going a day without reading at least something. I think it&rsquo;s valuable to set aside time to see what others have written about, so that&rsquo;s a habit I think I&rsquo;d like to continue.</p>
<p>If I scan the time logged for each article logged, I can see two main blocks - morning and night. (Disregarding the first couple days - those longer series are probably from when I was testing out my system.) It&rsquo;s interesting that I read very consistently at night, and a bit less, though still very consistently, in the mornings. (Let&rsquo;s pretend the ones in the middle are me during breaks and not me █████ █████████████ in █████.)</p>
<p>I have no other data to check my totals against (I can&rsquo;t exactly just search up blog post total articles spent), so I also have absolutely no idea how my consumption compares to the average population. Maybe I spend a lot more time compared to other people, maybe I don&rsquo;t. I&rsquo;d be interested to see how others perform this experiment and how it changes their views, but it&rsquo;s also not a data comparison I&rsquo;m entirely that interested in.</p>
<p>In terms of sources of error (always a fun section to write in labs), I can&rsquo;t think of much besides a) not balancing for word counts and b) mixing the testing / development data in with the actual end data. I don&rsquo;t think it makes too much of a difference for point a if you consider ideas absorbed instead of purely articles read, or their length. In terms of point b, I think it&rsquo;s fine to just ignore days 6 through 8, and pretend I started the entire experiment a little later.</p>
<h2 id="conclusion">Conclusion</h2>
<p>There was an interesting article <a href="https://junglegym.substack.com/p/the-t-shaped-information-diet">about the T-shaped approach to content</a> that I read recently, which discusses the types of information that you choose to consume. That was something I tried to keep in mind throughout the experiment, and I think that, considering my findings and my managing to train myself not to unconsciously alt-tab away to be unproductive when I work, the experiment can be considered a success.</p>
<p>In lab reports, this is the part where I try to convince you how relevant this research is, and how it can be applied. In terms of relevance and application, there&rsquo;s not much else besides being a bit more aware of what content you consume. That, and keeping extremely detailed data on your reading habits, which might appeal to some. I wouldn&rsquo;t recommend this to someone, nor would I advise against it - it&rsquo;s pretty fun to do, and an interesting dataset to analyze later.</p>
<p>In the future, I might like to look at how I use forum sites instead: an area that I specifically left out of this post. That, combined with more productivity-oriented research, might be an interesting area of self-experimentation. I can&rsquo;t figure out a way to analyze the subject matter or word count of each post, but I&rsquo;m pretty happy with the data I&rsquo;ve managed to collect so far. I&rsquo;m still continuing this experiment - I&rsquo;ll probably continue to track everything this year. Because of how I designed the Chrome extension and the Shortcut (see appendix A for other relevant technical magic), the friction of adding a new article is close to none, meaning I&rsquo;ll be more likely to continue using it anyway. It&rsquo;s become a new reflex anyway, and I think having this big of a dataset to analyze maybe later in the year will provide additional interesting insights.</p>
<h2 id="appendix-a-technical-digressions">Appendix A: Technical Digressions</h2>
<p>This is the part that fellow nerds might find mildly interesting, but that you should feel free to skip. Some of the work I did with the tracking inspired the <a href="https://kewbi.sh/blog/posts/210124/">hyperpersonalization</a> post I wrote earlier, while I was continuing this experiment on my own. I&rsquo;ll try to briefly explain how everything gets logged, and leave some trails for interested parties to follow up on.</p>
<p>I knew right off the bat that I wanted the process of logging to be as simple as possible - that meant a maximum of one click away on my laptop, and from the share sheet on my phone. Instead of trying to rig up some complicated API and spin up a Heroku server, I decided to go a simpler route: a simple Google Form, linked directly to a Google Sheet. The form has a field for the URL of the post and notes (I didn&rsquo;t end up writing notes as I read, but rather later at the end of my week during my review), and automatically fills in the exact time the form was submitted.</p>
<p>However, I obviously wouldn&rsquo;t <em>fill in a form manually</em> - we have automation to overengineer! Google Forms have a great link function, where you can autofill and submit a form from just a link. From the form link, something like:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">https://docs.google.com/forms/d/e/{id}/viewform/
</code></pre></div><p>you can get to something like</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">https://docs.google.com/forms/d/e/{id}/formResponse?usp=pp_url&amp;{key}={val}&amp;{key}={val}&amp;submit=Submit
</code></pre></div><p>You can get this from getting a prefilled link within Google Forms itself.</p>
<p>I managed to bodge together a Chrome extension with this fetch (and a couple lines to display a badge), which I then bound to a keyboard shortcut. I also slapped this fetch into a iOS Shortcut by enabling share sheet for the shortcut, and getting the URL from the input to put into a &lsquo;Get Contents of URL&rsquo; block. I can then log articles from my phone and my laptop super easily, which was a major reason the experiment went so well. I expect there&rsquo;s a similar shortcut-maker for Android, but iOS Shortcuts feel so snappy to make. You might also want to reference <a href="https://www.reddit.com/r/shortcuts/comments/bp735g/how_to_add_rows_to_google_sheets_from_a_shortcut/">this brilliant guide</a>, and adapt it for whatever platform you&rsquo;re planning to track on.</p>
<p>I then wrote a simple Python script to persist a &lsquo;row last read&rsquo; count of the Sheet in a file, and parsed the CSV values since the last pull with <code>csv</code> and <code>requests</code>. That all gets sent into a Markdown file for me to process and read through at the end of the week. I can also download a full CSV file to process the data in an external app directly from Sheets.</p>
<p>None of the above is open source at the moment, but I trust the guide and the Internet can get you to what I&rsquo;ve managed to do in much shorter time than it took me to even try to figure out how to do it.</p>
<p>In terms of <a href="#the-graphs">the graphs</a>, those were generated with a little bit of pivot table magic in LibreOffice Calc. The first required a little bit of summing each day together, and the other required just inserting a normal chart and editing the major gridlines to fit with the whole times-as-fractions that LO does. It took much more time than I&rsquo;m willing to admit, but all in the name of science, right?</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>I can&rsquo;t figure out if it&rsquo;s just a relatively small number of users, or really similar tastes, but it&rsquo;s got to the point that my friend(s?) have made a game out of trying to figure out which articles I submit, with scary accuracy. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>This is part of the reason why I also built Matter - it&rsquo;s one place to look for things, as opposed to over several different aggregators. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>Hyperpersonalization</title>
      <link>https://kewbi.sh/blog/posts/210124/</link>
      <pubDate>24 Jan 2021</pubDate>
      <author>Emilie Ma ◦ Kewbish</author>
      <guid>https://kewbi.sh/blog/posts/210124/</guid>
      <description>On extending and making personal tools.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>A few months ago, I applied for an internship somewhere. It was a pretty standard application for a pretty standard development position. List your specialties, why you wish to apply, what makes you a good candidate. Have a 250 word input to cram your life&rsquo;s goals and achievements. Upload your resume, mindlessly fill demographic information, do you wish to forward a copy of your responses to your email, click send. A cookie-cutter application, nothing special.</p>
<p>One of the main parts of the application was to upload a major project, and write a little bit about it. They&rsquo;d consider the size, purpose, application, and several other characteristics of the given code sample, apparently, and this was a key point of evaluation for the position. What I submitted is irrelevant to the point, but I remember submitting the application with a worrying thought in the back of my mind.</p>
<p>As I was going through past participant&rsquo;s blog posts and collecting any shreds of insider information, I realized that there was a clear divide between &lsquo;their projects&rsquo;, and &lsquo;my projects&rsquo;. Theirs were so much more complex, integrating many technologies, and actually had an obvious industry or consumer application. My science fair project<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> - certainly not &lsquo;clean code&rsquo; by any regards - seemed very small in comparison.</p>
<p>Through this application, I realized that I really didn&rsquo;t have any &lsquo;big&rsquo; projects. My largest project was not my most complex, or anything that&rsquo;d I&rsquo;d deem representative of my skill. My more &lsquo;complicated&rsquo; projects were more components to be mishmashed to extend or work with other software, not individual applications.</p>
<p>I&rsquo;ve been thinking about my work recently over the New Year, and I&rsquo;ve come to conclusion that I&rsquo;ve preferred to write small tools for myself. No one else (well, okay, maybe <em>very</em> small amounts of people) will probably use them, and that&rsquo;s okay for now. I&rsquo;d eventually like to work on bigger projects, but I&rsquo;d also like to make sure that those projects are something I&rsquo;m personally invested in, and not something I&rsquo;m developing for the sake of my resume or something. At the moment, I haven&rsquo;t found an idea or something that I&rsquo;d want to work on - plus, senior year and the associated heavy workload.</p>
<p>However, I still think there&rsquo;s an interesting area to be explored with &lsquo;small software&rsquo;. In this post, I&rsquo;d like to highlight two (and a half) toolkits I&rsquo;ve used to make the aforementioned personalized software. Consider this a combination of thoughts regarding making extremely customized software for a small user base, and a year (± three years) in review.</p>
<h2 id="prelude---roblox">Prelude - Roblox</h2>
<p>Roblox has been described as both a highly addicting platform, and a highly creative engine. (If you don&rsquo;t know what Roblox is, go look it up - the development and monetization side of things is especially interesting.) I don&rsquo;t think I&rsquo;ve seen a community that&rsquo;s been more inspired to share games (barring perhaps Minecraft, which shares similar traits). Even though I was maybe ten, I still managed to wrangle a couple small obbies (essentially 3D platformers) and story adventures out. The Roblox community, as I remember it, was a hivemind of kids teaching other kids how to program. I&rsquo;m sure that there were a good chunk of competent adult programmers, but as a kid (maybe it was just selection bias), I remember looking up to those channels churning out Lua tutorials each week.</p>
<p>Roblox was my &lsquo;in&rsquo; to game development. It&rsquo;s nowhere as complicated as Unity, and it&rsquo;s a great example of something that&rsquo;s literally child-proof yet has an ample system for expansion. I had no experience with proper programming or game design, yet the system of prefabricated assets and drag-and-drop configurability made it super easy to get started. Lua was too complicated for me to understand, but with assets, I managed to bodge together a CTF game for me and my classmates. It was only for us, and was, looking back at the previews I can see on the Roblox site, absolutely horrible. It was just a tiny map with several biomes and &lsquo;hidden&rsquo; flags (the concept of randomization and terrain generation was still several years to come) - but it was something. Something that I&rsquo;d made, and proudly showed off, climbing up several rungs in the 5th-grade social hierarchy as <em>the</em> Roblox dev.</p>
<p>While Roblox is a proper standalone platform, I included it here because it has a sort of whimsy that I find mirrored in the other two (eco)systems that I want to touch on today. That first spark of ownership is something that&rsquo;s sort of addicting to the right people, and probably a good explanation to the infinite server forks my friends had. Roblox gave budding devs a platform, and held their hand until they stepped into the infinite world of Lua and &lsquo;proper&rsquo; scripting. I think that&rsquo;s kind of fun - not just because it&rsquo;s so easy to use, but also because it actually makes game development open, and encourages little kids towards creation, and little bit away from mindless consumption<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</p>
<h2 id="chrome-extensions">Chrome Extensions</h2>
<p>An interesting approach to building hyperpersonalized tools is by extending yet another tool. One of the best examples of this is browser extensions - what better to customize than the very tool you&rsquo;re spending most of your online life in? I already use my browser to consume most of my content, and to keep in touch with people, so I personally think investing some time into making the browser exactly what I&rsquo;d like it to be is a worthwhile investment.</p>
<p>If you&rsquo;re a developer, or have any experience with JS, Chrome extensions are relatively easy to get started with - a manifest.json and a couple small HTML / JS files later, and you&rsquo;ve got a working extension. Because they&rsquo;re so easy to use, they&rsquo;re what I generally turn to in order to facilitate and automate basic actions that I do often. I&rsquo;ve made ones recently for <a href="https://github.com/kewbish/revshare-gh">Revshare for GH</a>, and one that I&rsquo;m using at the moment for tracking some interesting experimental data (blog postmortem of self-research to come in a couple weeks). Both took relatively short times to build - one was a CS50 project, which took a month-ish, and one was done in literally an hour. The difference? Whether I chose to make it a &lsquo;proper project&rsquo; - more on this later.</p>
<p>There&rsquo;s something very fun in playing with and manipulating what&rsquo;s shown on a page, especially when it&rsquo;s something just you&rsquo;ll use.With the way Chrome makes it relatively easy to add and iterate on your own extensions by loading unpacked folders somewhere, I can justify taking a couple hours to slap something together to fix a &lsquo;minor problem&rsquo;. Of course, there&rsquo;ll be &lsquo;minor problems&rsquo; that a lot of people share, or that you&rsquo;d like to make aware to others - this is when publishing an extension might come in handy. But for the majority of my &lsquo;minor problems&rsquo;, it seems that no one else has them, so for now, I&rsquo;m content to continue hacking away with &lsquo;hyperpersonalized&rsquo; things.</p>
<h2 id="shortcuts">Shortcuts</h2>
<p>Shortcuts (on iOS, though I&rsquo;m sure there&rsquo;ll be an Android equivalent <em>somewhere</em>) is another example of extending an ecosystem to personalize it. As with Chrome extensions, people have made amazing things - I&rsquo;ve seen <a href="https://www.jacksondame.com/vestigory/get-started">entire life management and tracker apps</a> made in it, as well as very slick widget apps and integrations<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>. It&rsquo;s sort of like a hybrid automation and Siri extension system, but I use it mainly for its automation capabilities and integrations. I don&rsquo;t think I&rsquo;ll ever get into iOS development, but Shortcuts lets me make what is essentially a proper app - I can enable it in the Share Sheet (the little popup when you&rsquo;d like to share something) and I can make it do rather complicated things with APIs and files. It&rsquo;s an interesting attempt by Apple to finally give people some much-appreciated customization and a way to make apps without shelling out for a license and diving into learning Swift.</p>
<p>Using the right tool for the right job is something that I often ignore, but I&rsquo;ve recently been trying to decomplicate most of the things I make (which, historically, have been very overcomplicated). A couple weeks ago, I was trying to make a little form for a tracker, and was toying with the idea of making a PWA of some sort, connecting it to some GitHub repository issue<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup>. In short, it would be very complicated, but good fun to code. However, I resisted the urge to immediately go create a new repo - I&rsquo;d rediscovered Shortcuts earlier that week. It was surprisingly pain-free to drag and drop a bunch of blocks together to POST data to a Google Sheet (probably a better way of storing information as opposed to an issue thread), as well as make it available to interact with from the browser bar.</p>
<p>Another interesting thing with Shortcuts is that it&rsquo;s the very embodiment of the entire &lsquo;no-code&rsquo; thing that&rsquo;s supposed to become popular enough to take over my job right about when I graduate university (/s. Maybe.). I don&rsquo;t have a lot of Shortcuts rigged up at the moment, but I&rsquo;d agree with <a href="https://www.reddit.com/r/shortcuts/">r/Shortcuts</a> that the entire process of making one is very <em>satisfying</em>. Sometimes the smaller screen size of my phone makes it a bit difficult to drag things to the right places, and sometimes copy-pasting things around can be a hassle. Still, I think there&rsquo;s a sort of whimsy in building your own &lsquo;app&rsquo; that even non-technical people can take advantage of. Again, there&rsquo;s that hyperpersonalization people can get. Instead of waiting for someone to solve your problems for you with a proper app, you can slap something else together in Shortcuts.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Returning to the internship application: my GitHub has a significant population of these tiny creations - be it extensions, small scripts, and personal utilities. Microapps, as I&rsquo;ve decided to call these small little one-user extensions and automations, are something that I&rsquo;d like to continue to explore. I keep returning to the word whimsy to describe these microapps, and that&rsquo;s because whimsicalness is exactly what I see in making these. The ease of iteration and production is sort of a fascinating idea, and one that I&rsquo;ll always keep an eye out for. I realize there&rsquo;s something sort of ironic in actively sharing microapps, but hey - maybe I&rsquo;ll help one person who has the very specific problem that I do, and that&rsquo;s more than enough.</p>
<p>By taking the pressure off to make something that&rsquo;s useful for other people, or that&rsquo;s polished enough that you&rsquo;d be willing to shamelessly promote it everywhere, I feel like I have the freedom to focus on having ideas that&rsquo;d benefit me first. I&rsquo;d have that freedom anyway, but by plastering &lsquo;this is hyperpersonalized, don&rsquo;t attack me if it&rsquo;s broken in one of these edge cases&rsquo; over the project mentally, it feels like I have more room to figure things out. While I&rsquo;m happy to, and do, share most of my work, I&rsquo;d rather not add more stress to maintain something I don&rsquo;t believe in anymore, or that I&rsquo;m forcing myself to do for no good reason.</p>
<p>I think this can serve as an effective sieve of ideas - a bunch of ideas flow in, and you filter them in or out depending on whether you yourself are emotionally drawn to the idea. Ideally, you&rsquo;d find a happy medium of &lsquo;helps people&rsquo; and &lsquo;helps me&rsquo;, but that might not be the case all the time. I&rsquo;m still very young - I have a vague idea of what I&rsquo;d like to do, and what I&rsquo;d like to work on in the meantime to get myself to that end direction. For now, I&rsquo;m leaning on the side of &lsquo;helps me&rsquo; - there&rsquo;s something very satisfactory in building smaller tools that benefit my own workflow.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>I don&rsquo;t know why I need to preface this, but no, I did not <code>import random</code>. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>I also find it really amazing that Roblox actually has a system to properly pay their developers. I&rsquo;m pretty sure if I&rsquo;d known as a kid that I could have saved up a couple Robux, I&rsquo;d have put much more time and effort into trying to monetize my hobby - I was a very entrepreneurial type of kid. I remember seeing <a href="https://www.cnbc.com/2019/09/23/college-student-video-game-creator-made-millions-from-jailbreak.html">an article (might have been this one)</a> about the creators of Jailbreak, a game I&rsquo;m pretty sure all my classmates were fairly addicted to. (I wasn&rsquo;t good enough at the game, and stuck to obbies, but those are in themselves extremely lucrative.) You&rsquo;d expect most people would&rsquo;t pay for cosmetics, but I suppose the in-game (and in-class) clout people who had Roblox Premium or whatever was enough of an incentive. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>Somewhat ironically, I still haven&rsquo;t bothered to customize my home screen. I&rsquo;d like to get larger widget grid icons for some of my Shortcuts and apps that I&rsquo;d like to encourage myself to use more, but I&rsquo;ve not found the time to do that yet. Someday. <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4" role="doc-endnote">
<p>GitHubDB, as they say. I don&rsquo;t want to talk about how called out I feel by this. <a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>RSS, bookmarks, &amp; Nitter</title>
      <link>https://kewbi.sh/blog/posts/210110/</link>
      <pubDate>10 Jan 2021</pubDate>
      <author>Emilie Ma ◦ Kewbish</author>
      <guid>https://kewbi.sh/blog/posts/210110/</guid>
      <description>On centralizing media consumption.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Over the past maybe two months, I&rsquo;ve been hoarding a list of nearly all the people I follow around the internet in a text file. It started out as a list of handles and websites for a small group of people, but quickly <a href="https://kewbi.sh/blog/posts/201220/">branched</a> out as I found new &lsquo;layers&rsquo; of interesting individuals. Through the power of The Algorithm™️ (and some branching), the list briefly expanded to a concerning length before I pruned it down to active, regular creators. Some of these people are on Twitter, others have a short writing project each week, and others put out long-form essays every so often that I find engaging. Whenever I was in need of something to productively procrastinate with, I&rsquo;d pop open the file, simply named <code>cool.md</code>, and go check in on what people had done in the last few days or so.</p>
<p>With this new content regularly coming in, I&rsquo;d also developed a need to bookmark articles that I wanted to read either later, or keep in mind to revisit sometime in the future. This sort of thing would usually be from a site that had one or two pieces I wanted to keep an eye on, but not a site that I&rsquo;d want to consume content from regularly. To give you a sense of what fills this category, stuff like tutorials and productivity advice appears regularly. At the moment, I have a <a href="https://andymatuschak.org/prompts/">long essay</a> by Andy Matuschak I&rsquo;ve been meaning to read for the last week but haven&rsquo;t gotten the time to yet there. Apparently, people call files of this sort their &lsquo;attics&rsquo;.</p>
<p>I&rsquo;ve been meaning to collate the websites and RSS feeds of the aforementioned people for a while, but hadn&rsquo;t bothered to set up an RSS reader yet. Most of the ones I&rsquo;ve seen have a reader view, folders, and favouriting - while that&rsquo;s certainly a must-have for some people, I was looking for something much simpler. Yet after scouring the Internet, I&rsquo;ve found that the intersection of my rather specific criteria seem to be the odd Chrome extension or Android app, instead of any established site. I&rsquo;d been searching for something small to work on over winter break, so I decided I may as well try to gain some insights into my content consumption<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup> and do a bit of programming<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> as well.</p>
<p>This is a log of what I&rsquo;ve done to build <a href="https://github.com/kewbish/matter">Matter</a>, my personal (very minimalistic) RSS reader, and also keep track of all the other feeds and bookmarks as well.</p>
<h2 id="rss">RSS</h2>
<p>I broke the contents of the <code>cool.md</code> up into three subsections: people (on Twitter), articles (personal websites, most with RSS feeds), and bookmarks (things I wanted to get around to reading someday). I decided to tackle the RSS reader first - I&rsquo;d live without checking Twitter, and keeping a list of bookmarks in a text file was not optimal, but fine for now.</p>
<p>As mentioned in the introduction, I spent a while looking for RSS readers. I was leaning towards Feedly, but I also kind of wanted to work on a small project. (At least, that&rsquo;s my justification for it, I really have no idea why I decided this was a good idea either.)</p>
<p>I wanted it to feel sort of like <a href="https://lobste.rs">lobste.rs</a> or <a href="https://news.ycombinator.com/">HackerNews</a> - just a simple collection of links. Most RSS readers were a bit overcomplicated, in my opinion, for what I wanted it to do: collect links so I could later <del>waste time</del> develop my personal knowledge with them. I wasn&rsquo;t very interested in a reading pane or annotations - those I could do in my notes repository, just to keep everything in one place. This way, I&rsquo;d avoid having to make more glue scripts to import and export and shuffle data around.</p>
<p>I ended up with something like this:</p>
<figure>
    <img src="https://i.imgur.com/PB8bVVL.png"
         alt="Figure 1. Matter, my personal RSS reader."/> <figcaption>
            <p><em>Matter, my personal RSS reader.</em></p>
        </figcaption>
</figure>

<p>It&rsquo;s basically a reskin of my blog&rsquo;s archive page, but I think that the simplicity makes it feel less addicting and less complicated-for-the-sake-of-marketing-and-features. I wanted to keep the same minimalist atmosphere I get from Lobsters and HN with Matter, and while the execution (read: code) was perhaps not very clean, it works nicely.</p>
<p>I now find that it&rsquo;s a lot easier to remember what I&rsquo;ve read and where I&rsquo;ve read it - I have fewer sources to scour before I find the one post I was trying to think about. It&rsquo;s also nice that I can finally have one feed for everything. Reading now feels more engaging, rather than something I do purely out of boredom (which biases towards short articles and quick posts), though boredom still factors into when I read. Matter solves a lot of the annoyances I&rsquo;ve had with reading blogs: it felt like too much work to go around and click through all the links in the <code>cool.md</code> file, and I&rsquo;d often miss or re-find articles since I didn&rsquo;t have a central place to keep track of them. I like it so far, and we&rsquo;ll see how my usage of it changes in the future.</p>
<p>I&rsquo;m also doing a little experiment with tracking articles over the month of January - I plan on writing a bit more about it at the end of the month.</p>
<h2 id="bookmarking">Bookmarking</h2>
<p>After I&rsquo;d gotten the RSS parsing done and dusted (somewhat less difficult than expected), I was also looking for a place to keep my temporary bookmarks. These are usually longer articles I don&rsquo;t have the time to read right this second, but that I&rsquo;d like to read in the near future. I try to group reading these over the weekend whenever I have a break (which is rather infrequently, but we&rsquo;re trying our best). With the <code>cool.md</code> file, I&rsquo;d usually reach for the shortest article, and often left longer articles, and those added earlier, for ages.</p>
<p>I already keep a private Git repo with all my school and personal notes, and I thought this might be a good place to use it. Yes, I could have used Pocket, Evernote, or even the Chrome bookmarks bar (oh the horrors), but I wanted to sort of keep my bookmarks and my notes in the same place. The rationale was that I&rsquo;d be more inclined to take notes and track things down, but more about this at the end of January. I also sort of wanted Matter to be my singular feed and source that I could check regularly, sort of like an <a href="https://jetgirl.art/2019/07/21/rss-is-better-than-reddit-twitter-and-email-subscriptions-for-updates/">all-encompassing life thread</a>.</p>
<p>So, I slapped together a simple function to pull in the list of comments from a GitHub issue. (Note, if you&rsquo;re going to do this, maybe remember to disable email notifications.) Through Matter, I can add new bookmarks (with or without a short note about its purpose), and delete ones I&rsquo;ve just read. As for technical details, the GitHub API is actually surprisingly painfree with comments and issues - I just had to feed it a repo, an issue number, and a PAT.</p>
<p>With this, I notice that while I still kind of bias towards first reading shorter articles, I&rsquo;ve also been sort of encouraged to go in a vaguely chronological order (in terms of adding said article to Matter). I definitely also remember to refer to these more, especially as they display on the top of all my other RSS feeds and articles. I also perceive it as easier to add items, even though technically opening Matter and pasting in a link takes about the same time as opening a Markdown file and editing one in.</p>
<h2 id="twitter">Twitter</h2>
<p>I&rsquo;ve realized that, for someone who doesn&rsquo;t even have a Twitter account, I spend a relatively disproportionate amount of time on Twitter. It&rsquo;s mostly to keep up with a couple people whose work gets posted to Twitter first, as well as explore some of those branching threads that seem to come up every now and then. In the <code>cool.md</code> file, I kept the list of Twitter handles mixed with a list of blogs as well, and would go manually decide to check in on one whenever I was bored.</p>
<p>However, this was a bit annoying - for all the supposed shortcomings of the Twitter feed, I&rsquo;d still say that having one place to catch up on the latest whatever is still markedly better than having to manually go through a bunch of profiles. I briefly toyed with the idea of actually creating an account and making a Twitter List for myself. However, I also realized that this would incentivize spending <em>more</em> time on Twitter, not streamlining the reading process, and end up not solving the problem.</p>
<p>I looked around for some way to make an RSS feed out of certain Twitter handles without an account - after all, I now had an RSS reader, and I thought I might as well also use that for Twitter. There were some seemingly defunct projects available - <a href="http://twitrss.me/">twitrss.me</a> was one of the free ones I checked out. (It&rsquo;ll throw an internal server error if you try anything; I assume the project&rsquo;s a bit dead.) However, after enough searching, I found that <a href="https://nitter.net/">nitter.net</a> has an RSS feature.</p>
<p>Upon a cursory search, I then found out that I could generate a <a href="https://github.com/zedeus/nitter/issues/83">single RSS feed for multiple users</a>. This was great - I&rsquo;d managed to create my own pseudofeed. However, upon loading it into Matter, I realized that the formatting of the RSS feed was a bit awkward. This was to no fault of Nitter&rsquo;s - what else would an expected title be besides, well, the tweet itself? The description also displayed the tweet, though, and because most tweets are longer than I&rsquo;d like for a single box in Matter, it ended up being a bit clunky<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>.</p>
<p>It was at the moment I realized that Nitter was, well, an alternative Twitter interface. The same link I was using to aggregate RSS feeds could also be used to simply browse Nitter (after I removed the <code>/rss</code> bit). So far, it&rsquo;s been pretty great - I don&rsquo;t need to create an account of any sort, and I can&rsquo;t really comment or try to interact with things either. I scroll through the last dayIs tweets in the morning, mark down anything worth bookmarking in Matter, and then just go about the rest of my day. With this setup, I manage to limit my &lsquo;oh wait have I checked if xyz person&rsquo;s done anything&rsquo; moments.</p>
<p>As I see it, Nitters&rsquo;s a bit of a read-only interface, which fits my purposes well. It&rsquo;s really easy to &lsquo;follow&rsquo; and &lsquo;unfollow&rsquo; users by removing them from the URL, and Nitter&rsquo;s also pretty good for going into individual tweets and such. The only issue I&rsquo;ve ever had with it is rate limiting, but that&rsquo;s to be expected without requiring any sort of API key from a user. Luckily, there are tonnes of <a href="https://github.com/zedeus/nitter/wiki/Instances">other Nitter instances</a>, so I can just swap out the URL and continue my doomscrolling.</p>
<h2 id="conclusion">Conclusion</h2>
<p>There&rsquo;s a constant inflow of information that has to pass through my brain for processing: the internet, school, people, and all the other miscellaneous work I have to do. Matter, and the methods I use to read through content that I&rsquo;ve written about above, are my attempts to distill things down to something that&rsquo;s more manageable. I don&rsquo;t want to spend ages scrolling through infinite feeds, but honestly, if I don&rsquo;t have anything else to fill the time with, I&rsquo;m probably going to revert to that. Matter reduces the friction that comes with reading things that actually interest me more - as a website (that I don&rsquo;t have to log in to), I can access it on my phone as well. This leads me to go read things I have in my Matter backlog, instead of scrolling Reddit, for example.</p>
<p>I like building small things for myself (and releasing them and then realizing this fits absolutely no one except me, but that&rsquo;s alright) - it&rsquo;s more fun than trying to make things for people, I guess. This sort of ties into making your own tools - <a href="https://thesephist.com/posts/tools/">thesephist&rsquo;s post on the topic</a>, and <a href="https://www.robinsloan.com/notes/home-cooked-app/">Robin Sloan&rsquo;s</a> are both pretty great posts that I think encapsulate what I tried to do with Matter nicely.</p>
<p>Matter&rsquo;s source is available at <a href="https://github.com/kewbish/matter">kewbish/matter</a> on GitHub, and it&rsquo;s also available at <a href="https://kewbi.sh/matter">kewbi.sh/matter</a>. Everything is client-side (I don&rsquo;t have a way to, or wish to, keep any of your RSS feeds), so feel free to try it out. I&rsquo;d like to clean up the code a bit more (probably unlikely given I have rather scuffed JS skills), and maybe tweak some of the bookmarking stuff. But for now, I&rsquo;m happy with it, and hey - for something I made for myself anyhow, that&rsquo;s enough.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>I used to really hate the phrase media consumption. It reminded me of that disease that novel characters always seemed to come down with, and also implied that we were being spoonfed content by a mysterious algorithm with no real choice in the matter. But really - that&rsquo;s exactly what&rsquo;s going on, isn&rsquo;t it? The Twitter recommended box comes up with three contacts of a given person, and nudges the user to go see what those people are up to as well. You don&rsquo;t have any influence over who comes up, so I suppose the only thing you can control is how you respond to that. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>Admittedly somewhat unnecessary programming, since using a pre-existing reader would have worked just fine and saved a bit of winter break time, but I was looking for something to do anyhow. The experience of building this was a bit of a complementing contrast to the rest of the work I had to do. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>This did lead me to add a nice truncation feature for other websites' links that would overflow though, so I suppose it wasn&rsquo;t all bad. <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>CPSC 110: 1b</title>
      <link>https://kewbi.sh/blog/posts/201227/</link>
      <pubDate>27 Dec 2020</pubDate>
      <author>Emilie Ma ◦ Kewbish</author>
      <guid>https://kewbi.sh/blog/posts/201227/</guid>
      <description>On designing functions with HtDF.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Why I felt the need to <del>ruin</del> augment my Christmas week with some Racket, I don&rsquo;t know. It was fun to go through some HtDF material with CPSC 110 this week, however - surprisingly, it wasn&rsquo;t as tedious or repetitive as it seemed.</p>
<p>For non-Racketers (Racketeers?), the HtDF recipe, or guide, I suppose, is a method essentially detailing <strong>H</strong>ow <strong>T</strong>o <strong>D</strong>esign <strong>F</strong>unctions. You write a signature (the types expected), the stub (the minimal function needed to get the function to run), the <code>check-expect</code>s (unit tests, basically), the template (the stub, but a little bit more), and the final function. While it does get slightly boring to do the same things for each function (and a bit annoying for small, one-line functions), Kiczales does remind people that it&rsquo;s not a must-follow for everything, but it&rsquo;s good guidelines.</p>
<p>I also finally acquiesced and have started using DrRacket - I needed the stepper for the problem set checking. Besides, some of the distribution files that contain images are in some vaguely newline-filled format that doesn&rsquo;t read nicely in Vim. However, I managed to get vi-like keybindings via <a href="https://github.com/takikawa/drracket-vim-tool">this package</a>, which still works nicely. It&rsquo;s a lot easier to try things out in the REPL, and I can run check-expects aside.</p>
<p>There wasn&rsquo;t much besides the actual recipe covered this week, so we&rsquo;ll see if this post might be a bit shorter. Also, see the <a href="https://kewbi.sh/blog/posts/201213/">CPSC 110 module 1a</a> post I wrote a couple weeks ago.</p>
<h2 id="notes">Notes</h2>
<ul>
<li>htdf recipe is a non-waterfall set of instructions to write and easily debug functions</li>
<li>begin with writing a signature, listing the two types
<ul>
<li>forex, <code>Integer -&gt; String</code></li>
<li>ensure this starts with two semicolons - Kiczales mentions that this is tested for (two semicolons start a line of comments, a single one goes at the end)</li>
<li>sources conflict regarding whether to put the function name first, but for CPSC 110 don&rsquo;t</li>
</ul>
</li>
<li>purpose statement =&gt; one line statement regarding the purpose of function
<ul>
<li>should be as specific regarding return paths as possible</li>
<li>should specify what conditions should be met for a boolean function</li>
</ul>
</li>
<li>function stub =&gt; define the function with its arguments
<ul>
<li>return an empty value for the function</li>
<li>0 for integers, &quot;&quot; for strings, etc</li>
</ul>
</li>
<li>write examples and wrap in <code>check-expect</code>s, which will function as unit tests
<ul>
<li>need to test each code path for example behaviour</li>
<li>ideally number of tests should be around 3 (for boolean), one for each case</li>
<li>DrRacket will highlight unchecked paths in orange</li>
</ul>
</li>
<li>if tests fail on first run =&gt; expected, no functionality has run yet
<ul>
<li>just checking if well-formed</li>
<li>if test fail later, consider the test itself if correct</li>
<li>otherwise, check function definition</li>
<li>however, both can also be incorrect, as Kiczales points out in the video</li>
</ul>
</li>
<li>add a template, which is the stub but with a <code>...</code> and returning the argument
<ul>
<li>keeps track of all variables and what to do</li>
</ul>
</li>
<li>finally, can copy paste and implement function
<ul>
<li>remember to test intermittently to catch problems as they come up</li>
</ul>
</li>
<li>isn&rsquo;t a hard and fast rule, can use different steps along way
<ul>
<li>however, don&rsquo;t jump right into function definitions, which will lead to problems in future</li>
</ul>
</li>
<li>if a problem is poorly formed, clarify all constraints and possible corner cases first</li>
<li>(regarding problem sets and labs) keep htdf and htdd signatures, used by autograder</li>
</ul>
<h2 id="problem-set-and-lab">Problem Set and Lab</h2>
<p>I still have no idea how the problem set to module timing system for CPSC 110 works. While in module 1a, the first problem set contained material about functions that was covered in module 1b and that I had, at the time, not done yet, so I left it for the next week. However, the first lab was entirely of material covered in module 1a. I&rsquo;m sure there&rsquo;s a schedule somewhere<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>The problem set this week was actually quite interesting, and a good challenge level, I feel. I like that it&rsquo;s in a self contained starter file, and that you get to edit and make changes to each part. It reminds me a lot of CS50&rsquo;s distributions each week. Having each question target a specific area of knowledge and material taught in the module while giving everyone an even starting ground is beneficial, I feel, for my learning process. It makes everything feel a lot more manageable.</p>
<p>Lab 1, the intro lab, was also very straightforward. I wasn&rsquo;t able to get access to the quiz, but it was simple material covered in the lectures. I like that each subpart is very short, and that it&rsquo;s sort of like a problem set. It was definitely good practise.</p>
<p>I&rsquo;m not submitting anything for grading - I&rsquo;m still very unsure if I&rsquo;m <em>allowed</em> to be in this edx course at all. I figured that grading might be a bit of an issue, especially as I started the course later, but theoretically I might be able to properly do the course next semester?</p>
<h2 id="conclusion">Conclusion</h2>
<p>I&rsquo;ve recently found out I do have a possible chance at changing my student status to properly enroll in the course, but it&rsquo;s a bit late to do that for second semester. I&rsquo;d ideally like to challenge in the summer, but I also have several other plans. We&rsquo;ll see. In the meantime, I&rsquo;ve realized that CPSC 110 has a lot more modules than I&rsquo;ve expected, so I think finishing the course will take a lot longer, especially with work after winter break. Hopefully I&rsquo;ll be able to still preview before the April close date, and finish preparing for the summer.</p>
<p>Happy holidays, and we&rsquo;ll see what I decide to write about in the new year. I&rsquo;ve got a lot more HCI topics to think through before I write about them, but I think they&rsquo;re interesting enough.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>[later edit]: Upon further inspection, I&rsquo;m pretty sure each week number corresponds to one complete module number. It probably makes more sense that (the hypothetical) week 1, problem set 1, lab 1, and module 1 (containing both module 1a and 1b) are supposed to be done together. I&rsquo;ll probably leave 1a and 1b as separate posts, but combine them in the future. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>Branching</title>
      <link>https://kewbi.sh/blog/posts/201220/</link>
      <pubDate>20 Dec 2020</pubDate>
      <author>Emilie Ma ◦ Kewbish</author>
      <guid>https://kewbi.sh/blog/posts/201220/</guid>
      <description>On Wikipedia rabbit holes and clickchains.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>I&rsquo;m currently trying to plod my way through <a href="https://kewbi.sh/blog/posts/201213/">designing functions</a>, so I thought I&rsquo;d write about a new thought-chain<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>: branching. I&rsquo;ve not read a lot of posts or threads regarding branching, but maybe I just can&rsquo;t manage to find the right search terms yet.</p>
<p>I&rsquo;d define branching as the feeling (though it&rsquo;s more of a concept) that you get when you find a thread (perhaps on Twitter, perhaps elsewhere) that&rsquo;s linking to tonnes of different places and new articles that you also find interesting. I&rsquo;ve mostly seen branching in the form of Twitter threads or link-dense blog posts, but I&rsquo;m sure there&rsquo;s also forms of branching in scientific journal papers and many other facets of long-form (and shorter, I suppose) content. The idea is prevalent in <a href="https://twitter.com/Conaw/status/1129806786477772801">this thread</a> by Conor White-Sullivan, which I inadvertently stumbled upon from <a href="https://twitter.com/geoffreylitt/status/1338212261282897921">Geoffrey Litt&rsquo;s Twitter memex</a>. (Look, a branch within the concept of branching!) White-Sullivan&rsquo;s thread is full of quotes and new links: a great example of branching in its natural habitat. I will exert a considerable amount of self control not to open it right now and go down an entire rabbit hole. Anyways.</p>
<p>Branching seems to be at least one of the reasons that Wikipedia rabbit holes are a thing. There&rsquo;s just so much to explore, and especially if the subject of a thread is something you&rsquo;re passionate about and interested in, it&rsquo;s quite possible to accidentally go two or three &lsquo;levels&rsquo; deep. The clickchain is never ending, and it&rsquo;s probably quite possible to end up in recursive loops of branching as well.</p>
<p>Branching is present not just in casual social media interactions, but is also a significant part of how popular notetaking and productivity apps function now. There&rsquo;s the classic Roam or Obsidian graph, and the nearly infinitely nesting tasks lists that Todoist users seem to love. I find that, when exploring new fields and getting into new areas of study, there&rsquo;s an inherent branching model present. Information links to information links to information, and so on. The intrinsic hyperlinking of the web makes branching even more obvious - it&rsquo;s immediately clear what next steps to research are, after I&rsquo;ve read a post. This leads to the chains of deep Wikipedia / information surfing that essentially form branching.</p>
<p>This post is intended as a collection of my current thoughts on branching, and the kind of infinite exploration canvas that it presents. There are some slightly unrelated examples of things that are relevant to branching here, but I may as well also categorize those thoughts for later. Perhaps this branching post will be the branching point for any readers to also metacognize about branching. Winter break just started, so what better time to spend ages writing an essay on branching and then going on tonnes of clickchains in the process?</p>
<h2 id="exploring-areas">Exploring Areas</h2>
<p>A prominent example of how branching happens in my life is when I try to branch into (pun intended) and explore a new area of knowledge. No matter what the topic is, I tend to first find some piece of information, be extremely confused about all the terms in it, and then try to decipher things one definition at a time. In some ways, this reflects how we used to be taught in elementary school: be force-fed  a central topic, with a handy box of definitions on the side. However, most blog posts, papers, or even Wikipedia definitions don&rsquo;t explain each individual term in detail - they assume some knowledge of the topic, or else the page would be endless. (In order to define term A, it must explain in terms of B, which relies on C, and so on.) When I finally map out all the things I don&rsquo;t know, I find that there&rsquo;s a huge tree that&rsquo;s out there to explore, and would you look at it: it&rsquo;s all branched out into separate categories. Usually, there <em>is</em> some end to the information graph, but the tree gets several layers deep.</p>
<p>One example of this is when I recently read <a href="https://en.wikipedia.org/wiki/G%C3%B6del,_Escher,_Bach">Gödel, Escher, Bach</a> by Douglas Hofstadter<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>. It is admittedly extremely academic, and some of the concepts still go over my head. My opinions on the book are currently in their formation phase - that&rsquo;s a topic for another blog post, not now. One of the things I <em>will</em> discuss is how the entire book is formed around, and basically encourages, branching. Perhaps it&rsquo;s a bit of my fault that I started with the preface, which discusses concepts better explained in the body of the book, but immediately there were a bunch of terms and areas that were extremely confusing. These terms and concepts all linked to each other, but explained separate facets of the point. (This is the part where I tell you to probably go at least read a summary of the book or something. It&rsquo;s an experience and a half.)</p>
<p>Reading GEB is when I started really thinking about branching. Hofstadter approaches topics from many different lenses: music (you can spend hours in the YouTube recommendations after watching a couple of the related pieces), art (Escher is extremely talented), computer science (my passion, and cause of the longest clickchains), and life sciences (many flashbacks to organic chemistry and biology were had). Yet they all converge at the central point of the novel - which you should go find out about by reading said novel. With this diverse array of topics, however, I spent ages going off on side tangents reading about what a recursive transition network was, or how Gödel numbering worked. I&rsquo;m still working on mapping out a way to start looking into each of the topics more, because they&rsquo;re definitely things I&rsquo;d like to look into for the future.</p>
<h2 id="tracking-branches">Tracking Branches</h2>
<p>Speaking of thinking about the meta-possibilities of branching, I&rsquo;d also like to track my thoughts about how I can use branching to study a topic, or reflect on the overall experience of each clickchain. With GEB, for example, I&rsquo;ve been trying to map out a guide of all the areas, linking them all together. In this linking process, I see the appeal of a more connected notetaking technique, but I think just being mindful about how concepts link together provides a lot of insight into how information flows.</p>
<p>Sometimes, branching can feel a bit overwhelming. Having an essentially infinite number of links to follow next makes keeping track of time and the actual convergence point behind all of the branches difficult, but also crucial. There&rsquo;s no point in reading about a random topic if you&rsquo;re not going to connect it to something else to use, unless it&rsquo;s unrelated trivia or a new branching origin point. With most topics, I feel that I need a way to keep track of these branches, and look into how to manipulate context to remember or draw out additional branches for further exploration.</p>
<p>Among all the content and information that flows in, there will inevitably be some threads that have provided key branching value. Perhaps a Twitter thread that&rsquo;s been extra insightful about something, or a blog post that has linked to several more that you greatly enjoy. I obviously want to keep things like this somewhere for future reference, but I&rsquo;m not entirely sure how to reflect this in my overall notetaking / knowledge base system. I link content where relevant, but there&rsquo;s points and levels within the branching that I&rsquo;d really like to extract. I think that this keeping track of &lsquo;good&rsquo; branches is a topic that I want to think about more, and perhaps make a personal tool for. Others have made similar things regarding branching: the <a href="https://twitter.com/szymon_k/status/1289942401318977537">paned and tree-style browser history</a>, and the memexing threads I discussed above are both great examples that served as branching origins for my own thoughts about branching.</p>
<h2 id="conclusion">Conclusion</h2>
<p>When I think about one of these HCI topics, I tend to also envision some personal solution to the problem. For the branching problem, I had the idea of a CLI to add and remove branches, and have an overview. I&rsquo;ve since realized that because it&rsquo;s so disconnected from the rest of my systems, I&rsquo;m probably going to update it infrequently, and it&rsquo;s going to end up just as another archived GitHub repo. For now, I&rsquo;m just using a text file with interesting branch origins, and keeping folders of notes as I go. This approach has worked pretty well so far. I&rsquo;ve realized that while some of the branch origins are truly notable, others are just interesting content that don&rsquo;t really fit in anywhere.</p>
<p>These HCI posts are actually a lot of fun to write, and I think I&rsquo;ve found a nice area to explore in the future. I have lots of topics on the mind at the moment, and I&rsquo;ll have many more thought-chains over the holidays, I&rsquo;m sure. Speaking of the holidays, there are only two weeks left in 2020, and one blog post after this one. I&rsquo;ve kept a weekly posting schedule for a good half of this past year, but I think I might switch my writing schedule a bit with the new year. I&rsquo;m not sure yet about that - we&rsquo;ll find out when we get there.</p>
<p>I hope that I&rsquo;ll be able to finish another section of CPSC 110 by next week, though it is the holidays now. It might be a tad premature, but happy holidays, and good luck on the remaining five days of <a href="https://adventofcode.com/">Advent of Code</a> if you&rsquo;re doing it. In the beginning, it was pretty fun, but now it&rsquo;s getting a bit tedious and difficult. It takes a lot more time than I have, but I only have a couple days left. Hopefully after that&rsquo;s all done and finished I&rsquo;ll devote more time to CPSC 110, but for now, I&rsquo;ll return to puzzling my way through the Jurassic (day 20)<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>I don&rsquo;t have anything else to call them - I see them kind of like Twitter threads, but with less of the quote retweets and tendency to inspire long chains of clicking through old threads. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>I did manage to finish the book, and have copious notes for it. I am still a bit confused on some areas, and I think I&rsquo;d like to explore RTNs and some of the other automata and formal grammar ideas in it. Coincidentally, I stumbled upon another branch while trying to research RTNs - first finding about the context free grammar relation, then finding out about the Chomsky hierarchy, then about regex and how those connect to automata, and then finally down a bunch of rabbit holes involving <a href="https://twitter.com/happyautomata">this cute automata bot</a>. Go check that out - it&rsquo;s extremely nerdy but it&rsquo;s also extremely amusing and fun. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>I will admit, I did reference another person&rsquo;s code for this. It was a difficult day. <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>CPSC 110: 1a</title>
      <link>https://kewbi.sh/blog/posts/201213/</link>
      <pubDate>13 Dec 2020</pubDate>
      <author>Emilie Ma ◦ Kewbish</author>
      <guid>https://kewbi.sh/blog/posts/201213/</guid>
      <description>On finding my way into CPSC 110.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Racket, so far, has been an interesting language - lots of parentheses matching and prefix notation mistakes. It&rsquo;s unlike what I&rsquo;m used to (which is rather cobbled-together Python) but it&rsquo;s also quite fun to use. Also, because people keep asking: no, I didn&rsquo;t just decide to learn Racket for my own amusement, though I&rsquo;ve certainly got a lot out of the few short weeks I&rsquo;ve used it. I&rsquo;m planning on taking CPSC 110<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, which uses Racket extensively, and I&rsquo;d like to do the course first. (Why does it feel like I&rsquo;ve said this before? I don&rsquo;t know.)</p>
<p>I&rsquo;d initially tried to take the <a href="https://www.edx.org/course/how-to-code-simple-data">open edX version</a> of it, but I got a bit sidetracked with rack8, my Chip-8 emulator, and ended up letting it time out. It wouldn&rsquo;t let me into the course after a month, which was rather unfortunate.</p>
<p>However, I managed to finagle myself into the <em>actual</em> CPSC Edge (private edX platform, I think?) that&rsquo;s used. This contains the current problem sets and labs, as well as having a lot more final exam practises than on the public version. Fun! (Also, this won&rsquo;t time out until the end of the semester in late April, so I&rsquo;ll definitely be good on time.)</p>
<p>In this sort-of-series, I&rsquo;d like to document my progress through CPSC 110 (which should be the same as if on the public version anyhow). I did something similar last summer with <a href="https://kewbi.sh/blog/posts/200621/">CS50</a>, so hopefully I&rsquo;ll be more motivated to complete everything in a timely manner. Here&rsquo;s the first post: notes and thoughts on part 1a, in which Kiczales guides us on a scenic tour of BSL (Beginning Student Language).</p>
<h2 id="notes">Notes</h2>
<p>Like my CS50 posts, I&rsquo;m generally going to put my personal notes here. Skip to the <a href="#a-short-reflection">reflection</a> if you wish.</p>
<ul>
<li>Racket works with expressions (each statement in parentheses, essentially) to form programs
<ul>
<li>each exp is an element that is evaluated (Racket is compiled and then run from the bytecode)</li>
<li>functions go first, parameters later, so <code>(+ 3 4)</code> (which would be 7) (prefix notation)</li>
<li>have a very specific style guide w/ where they want spaces, refer to expressions section</li>
</ul>
</li>
<li>examples of primitives =&gt; strings, numbers
<ul>
<li>basic data structure provided by BSL (and later basically Racket)</li>
</ul>
</li>
<li>follows order of operations =&gt; evaluates innermost first, from left to right
<ul>
<li>each step of the evaluation plugs in results to the next one</li>
<li>frequently in the embedded questions</li>
</ul>
</li>
<li>Racket substring indices work like Python =&gt; range but excludes last one</li>
<li>using <code>(require 2htdp/image)</code> brings in image primitives
<ul>
<li>can draw with <code>(above)</code> and <code>(overlay)</code>, etc</li>
<li>stack <code>(circle)</code>s and other primitives inside =&gt; refer to docs</li>
<li>(# interesting that they choose to use images in their first examples, probably makes things a bit more intuitive?)</li>
</ul>
</li>
<li>definitions with <code>(define)</code> =&gt; Kiczales says these are generally capitalized
<ul>
<li>also can define functions as long as fn name and parameters in sep set of parentheses</li>
<li>fn is evaluated first by evaluting arguments and plugging those into main fn expressions</li>
<li>then the same rules of evaluation follow throughout</li>
<li>can use Stepper to see step-by-step evaluation of entire program in DrRacket</li>
</ul>
</li>
<li>booleans are <code>true</code> and <code>false</code>, instead of the <code>#t</code> and <code>#f</code> I used in rack8
<ul>
<li>are actually equivalent but I suppose for CPSC 110 use true/false</li>
<li>use <code>(and)</code>, <code>(or)</code>, and <code>(not)</code> to evaluate multiple (see conditionals section)</li>
<li>and only evaluates until it finds one that isn&rsquo;t true, or evalutes only until it finds an expression that is true</li>
</ul>
</li>
<li>Racket doesn&rsquo;t have a single expression if =&gt; must have an else clause
<ul>
<li>in rack8 just used a void expression, haven&rsquo;t gone through what to do in the recommended CPSC 110 style</li>
<li>the expression must go as a second argument in parentheses</li>
</ul>
</li>
<li>if evaluation, and other conditional expressions first evaluate the &lsquo;question expression&rsquo;s
<ul>
<li>then replaces the body of the if with either the true or false expression and evaluate the entire final expression</li>
<li>if neither, then produce an error</li>
</ul>
</li>
</ul>
<h2 id="a-short-reflection">A Short Reflection</h2>
<p>As an aside, it feels kind of weird to take notes on this, especially as some of it&rsquo;s stuff I&rsquo;ve muddled my way through via experience with rack8. However, I have a feeling I&rsquo;m going to forget the specifics if I don&rsquo;t at least try to record it, and perhaps this will serve as some sort of guide for others who are also investigating CPSC 110 or Racket.</p>
<p>Also, a brief note on setup. It&rsquo;s entirely possible to do Racket and most of what&rsquo;s done by Kiczales in a different IDE than DrRacket. Is it recommended to use Vim just because one feels like it? Probably not, but I couldn&rsquo;t be bothered to set it up while doing rack8, and now also cannot be bothered to set it up, since everything already works fine(ish) in Vim. I won&rsquo;t get the image functionality, or the REPL (though I <em>could</em> do that in VimScript or an extension), but I&rsquo;m alright with that.</p>
<p>I think I prefer Kiczales&rsquo;s teaching style to Malan&rsquo;s (see CS50 posts), or at least the course organization overall. CS50 lectures were very long chunks of information, and I find CPSC 110 is sort of like watching all of the CS50 shorts with questions in between.</p>
<p>That shorter cycle has been a lot more helpful, especially with the way the Edge course sticks a bunch of questions in some very innovative formats<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup> in between each video. Kiczales&rsquo;s videos are nicely clear and concise, and theywork even when not using DrRacket or listening fully. Also, kudos to whoever had to edit and put in those arrows and annotation diagrams - they&rsquo;re super helpful, but were probably extremely painful to animate and put in.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Section 1a of the course has mostly been basic material that I&rsquo;ve covered on my own, but I think it&rsquo;s still valuable to review, especially the finer minutiae of evaluation ordering and what exactly is expected style-wise in autograder submissions. I&rsquo;m looking forward to section 1b, which is more on &lsquo;how to design functions&rsquo;. From what I&rsquo;ve researched on my own, there seems to be a pattern recipe of some kind involved, but we&rsquo;ll see more about that in the next CPSC 110 post.</p>
<p>On the more logistics side of things, I don&rsquo;t think I&rsquo;ll be able to churn through a section a week (or maybe I will - who knows? Winter break <em>is</em> coming up-), so I&rsquo;ll try to break things up with some thought-chain posts. Those will be the HCI ones, like the one I made recently regarding <a href="https://kewbi.sh/blog/posts/201206/">persisting context in annotations</a>. Hopefully that&rsquo;ll give me some more time to absorb and process the CPSC 110 material, as well as explore some of the thinking I&rsquo;ve been doing on my own regarding HCI. I&rsquo;m looking to finish this course sometime before the summer, hopefully so I can challenge the course right after I graduate, or sometime in the first term. We&rsquo;ll see, but for now, I&rsquo;ll be going back to BSL, and more Racket.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>UBC&rsquo;s introductory course on designing programs that all students pursuing some form of CS will have to take some form of. I <em>could</em> take 103 + 107, but that&rsquo;d be 2x more courses for roughly the same material, according to certain sources. Also, I can challenge the exam, which will save me a good amount of time and effort. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>I was not aware the question could see what part of the screen you were clicking on, which enabled some interesting question formats. Think along the lines of &lsquo;identify a parameter in this function call code block, put this green dot over it.&rsquo; <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>Morse Code Context</title>
      <link>https://kewbi.sh/blog/posts/201206/</link>
      <pubDate>06 Dec 2020</pubDate>
      <author>Emilie Ma ◦ Kewbish</author>
      <guid>https://kewbi.sh/blog/posts/201206/</guid>
      <description>On dots, dashes, and annotations.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>Hello, and welcome to another episode of <em>Kewbish talks about notes and knowledge for no reason whatsoever</em>. I&rsquo;ve somehow fallen into the corner of the interwebs vaguely describable as &lsquo;knowledge twt&rsquo;<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. Reading papers, especially CS-ish design (read: not entirely incomprehensible) ones, is kind of nice. Perhaps this habit stems from the lab reports we constantly have to write, but I find reading through them therapeutic, in a way.</p>
<p>These papers have a host of ideas spanning many disciplines and areas of thought. That&rsquo;s something I kind of like, as someone very inexperienced in the field. HCI, as I think it&rsquo;s properly called, spans a large breadth of thought. Luckily, most of it is the sort of thing that balances yet complements the science-focused learning I do for school. I find it fun to read papers (yes, I&rsquo;m a massive nerd), especially these, where I don&rsquo;t have to constantly do math or think about theory (though that can also be fun).</p>
<p>One of the ideas I&rsquo;ve seen over the last couple weeks was the concept of context, and either persisting or deleting it. How does one encapsulate the context of a moment, be it <a href="https://twitter.com/szymon_k/status/1289942401318977537">branching browser history</a> or <a href="https://zettelkasten.de/posts/bookmark-breadcrumbs/">leaving a trail of thoughts between processing sessions</a>? The concept is striking: when looking through things I&rsquo;ve written even just a year ago, there&rsquo;s often a question of why I even thought it was a good idea. Re-entering, or even getting a glimpse into, the frame of mind I was in then would be very interesting for reflection<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</p>
<p>I&rsquo;d like to bookmark my thoughts and keep a giant log of posts that have sparked a rabbit hole of thought, but I also think it&rsquo;s kind of charming to rediscover posts on their own. It&rsquo;s a slow, perhaps luck-based, process, and I&rsquo;m not guaranteed to recover a key article, but it&rsquo;s more organic. Increasing serendipity or something.</p>
<p>I&rsquo;m vaguely free from school at the moment, so I might write a bit about some thought-chains I&rsquo;ve had surrounding HCI topics. Maybe these posts&rsquo;ll get published, maybe they won&rsquo;t. Please don&rsquo;t take these seriously; I wanted to record random things I was thinking about and I thought I may as well publish them.</p>
<h2 id="dots-and-dashes">Dots and Dashes</h2>
<p>The first inspiration for this chain of thought was a tweet involving Cal Newport&rsquo;s <a href="https://www.calnewport.com/blog/2008/02/18/monday-master-class-rapid-note-taking-with-the-morse-code-method/">Morse Code Method</a>. It&rsquo;s from a while ago, but it has some interesting points regarding contexts, and context switching.</p>
<p>In the article, Newport touches on a efficient style of notetaking: the Morse Code Method. The only two symbols are, aptly, a dot and a dash. While skimming through and processing content a first time, mark each main point with a dot. Supporting ideas are denoted instead with a dash. It&rsquo;s important to maintain momentum while processing the literature, which makes the entire process a lot quicker than the typical &lsquo;read and annotate at the same time&rsquo; technique. Not breaking the reading flow also would definitely reduce the amount of <a href="https://kewbi.sh/blog/posts/201018/">context switching</a> required.</p>
<p>Newport then suggests annotating and pulling together additional notes <em>after</em> the process of reading, making it a distinct second step. I see this as playing into active recall somewhat, albeit in a very short-term, very non-spaced repetition way. Dots are reviewed for their striking-ness, and discarded if now irrelevant. This process of reviewing and redoing notes after having a different view on the paper definitely helps with filtering. I find that notes <em>before</em> or <em>while</em> learning a topic are a lot less polished and full of (usually unanswered) questions instead of actual new thought. After taking the time to understand and condense information<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>, the third step to this strategy-of-sorts, notes are usually more direct and dense.</p>
<h2 id="a-search-for-serendipity">A Search for Serendipity</h2>
<p>Sometime when I was supposed to be doing work, I had a thought. I haven&rsquo;t tried it myself, nor have I had the idea long enough to evaluate it, but I think it might be interesting. What would happen if the second and third steps of the above method were eliminated? There might be something intriguing there if the need to paraphrase and keep annotations was gone, and we just had dots and dashes scrawled in page margins.</p>
<p>Obviously, if a line inspires a groundbreaking idea, that might warrant more permanent storage. While there&rsquo;s some use to writing everything I take out of a given text or chunk of information, I feel like it makes things a lot more rigid. Rigid, as in, I now have one interpretation (hopefully mostly thoughts that are original and add to the material) in front of me. If I never looked at the text itself again, I might never try to reinterpret and rethink the ideas with my current worldview. After all, I&rsquo;ve read it once, and I now have these very comprehensive notes, so why should I? Perhaps a book isn&rsquo;t quite good enough to warrant a second reading, and maybe the notes are good enough™.</p>
<p>But I feel like there&rsquo;s a lost possible serendipity. Sure, finding ideas anew without rereading is certainly possible, especially if you&rsquo;ve densely interwoven your notes with other thoughts, as in a <a href="https://zettelkasten.de/posts/overview/">Zettelkasten</a>. There&rsquo;s the chance that you might stumble upon an orphaned or unlinked markdown file. However, I don&rsquo;t know if there&rsquo;s enough of a reason to revisit and reevaluate thoughts this way.</p>
<p>If I was just presented with a trail of dots and dashes, and perhaps had to filter out information again, I&rsquo;d probably develop a whole new set of ideas. Coming from the possible added perspective of a couple months or years, this might be a bit better than static (evergreen?) notes. There&rsquo;s a sense of wonder and clicking through rabbit holes the first time one finds a particularly well-linked and well-connected thread of thoughts. I&rsquo;m not sure if I can document that all the first time, and I&rsquo;m also not sure if I&rsquo;d be able to remember key points that were most interesting again.</p>
<p>I was thinking of building another personal Chrome extension lately. Instead of keeping more fleshed-out annotations in a bank, simple dots and dashes were placed in the margin of a webpage. (CSS-wise this might be a bit tricky, but let&rsquo;s not discuss the technical details.) I&rsquo;d not keep proper thoughts; just little circles and lines. Perhaps these could be reordered with shortcuts, and maybe even combined in different contexts. It might also provide insight through time by track placement of these pico-annotations.</p>
<p>This, however, does come with the same caveats as footnote 3<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>. While it does increase the possibility to rediscover and readd new ideas, ideas will be filtered out and left in the dust at times. These might not be as &lsquo;big&rsquo; as some of the other points, and not get passed on to the next generation of notes. Context, as well, might well be lost. If a thought from generation 1 of a note only happened due to connections with other similar thoughts in context of mindspace 1, what happens if mindspace 1 is entirely dissimilar from mindspace 2 when taking generation 2 notes?</p>
<h2 id="mapping-context">Mapping Context</h2>
<p>The idea I&rsquo;m trying to explore is the persistence of context. On one hand, a constant, rigid context (if well-written) provides stability at the expense of some additional commitment and friction when trying to add to them. Not only does one have to recomprehend the text or work at hand, but one also has to try to reenter the mental location they were in when first processing information. The ideas surrounding previous ideas may unknowingly invade newer thoughts, tainting them retroactively, in a way.</p>
<p>I don&rsquo;t want to lose my place, or my frame of mind. An ideal situation would be infinite memory, and an equally infinite and expandable notation for my current context. (But that might be a tad overwhelming.) Leaving a breadcrumb trail of similar thoughts that led to a specific thought would increase the amount of notetaking friction at one point in time, but may help in the future. There&rsquo;s no point to do context-heavy notes for a topic that you know won&rsquo;t be referenced in the future, so that might reduce the amount of labour if you&rsquo;re fully aware this for a one-off thing. But how does someone evaluate this &lsquo;one-off&rsquo;ness? You could argue that no notes should be made at all, if it&rsquo;s only to be used in the extremely short term.</p>
<p>On the other hand, completely throwing away trying to recall the context, and focusing on just the current interpretation gives some more flexibility for the future. With a way to remember which points and which areas made you think last time, it might be an interesting balance to investivate. The main points and supporting points you picked out last time would still be available to see, but perhaps the interpretation could be different this time around, or maybe it&rsquo;s largely the same.</p>
<p>I&rsquo;m wondering how I can reflect a context of a moment into my notes without creating too much extra friction force against taking notes. Currently, the persistent pico-annotation idea, combined with perhaps note versioning but with fresh starts every so often, is my best thought on the topic. Perhaps another day of diving into Twitter threads might be in order.</p>
<h2 id="conclusion">Conclusion</h2>
<p>Context, especially wih regards to processing, is an intriguing area of thought. A lack of context forms a certain atmosphere, if I can call it that, and a large amount of it creates an metalayer. The amusing screenshots that fill up my Imgur are generally taken out of context. Notetaking often happens without context - especially if it&rsquo;s just raw information without reflection. Automatically added metadata (file creation time, EXIF data) adds another layer of searching possibilities, and a feeling of meta-organization. I have no idea whether context is absolutely essential or not, but I can see how it (over?)shadows interpretation. Just earlier, I was annotating an act of a play for class again (I did it in a different format that I wasn&rsquo;t satisfied with the first time round), and found myself essentially reframing past thoughts slightly. Maybe it&rsquo;s just me, and the way I work.</p>
<p>Tech Twitter is a very deep rabbit hole, and is very good at leading me into long clickchains. However, I can justify reading papers and being extremely nerdy about this because it&rsquo;s semi-productive, right? It&rsquo;s led me to investigate a lot of literature I wouldn&rsquo;t have without it, and is strangely therapeutic, so that&rsquo;s that.</p>
<p>I suppose this is a nice round place to end off. This was indeed full of tangents and small points, but I think it&rsquo;s a nice way to frame my thoughts for later (look, context!). I have nowhere else to put them, and this essay&rsquo;s vaguely technical, so here it shall stay.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>That being said, I also don&rsquo;t have a Twitter, which makes things slightly less addicting / more difficult to check in on all the content, but here we are. It&rsquo;s also interesting to note how seemingly everyone in HCItwt seems to know, or at least somewhere reference the others. It&rsquo;s a Roam graph of people - which I suppose is the essence of a social network. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>And the same process will happen in two or three years when I return to these posts. It&rsquo;s a cycle, and it&rsquo;s a process - but that doesn&rsquo;t mean I won&rsquo;t cringe. Well, at least the cringe now is several magnitudes less than two years ago: will this pattern continue? <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>It might be interesting to see how this process would play out if intermediary layers were scrapped. Perhaps if they were on scratch paper, intended on being thrown away or (a less harsh approach) filed into a &lsquo;cold&rsquo; archive for very unfrequent retrieval, it might reduce the pressure of making &lsquo;good notes&rsquo;. However, there&rsquo;d come the very real possibility of not recording any new thoughts that might have helped with future iterations of a concept, or losing existing ones in the condensing process. <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>A Continuation of rack8</title>
      <link>https://kewbi.sh/blog/posts/201129/</link>
      <pubDate>29 Nov 2020</pubDate>
      <author>Emilie Ma ◦ Kewbish</author>
      <guid>https://kewbi.sh/blog/posts/201129/</guid>
      <description>On Racket and Chip-8, part 2.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>After maybe a month of intermittent work, it works!</p>
<figure>
    <img src="https://i.imgur.com/7n4DQhL.png"
         alt="Figure 1. A singleplayer game of Connect 4."/> <figcaption>
            <p><em>A singleplayer game of Connect 4</em></p>
        </figcaption>
</figure>

<p>If you&rsquo;re not sure what &lsquo;it&rsquo; is, you&rsquo;ll probably want to read the <a href="https://kewbi.sh/blog/posts/201115/">first blog post</a> of this microseries. In it, I touch on the experience of my first couple days with Racket and Chip-8, a game emulator. It turns out that trying to figure out how to piece together the Chip-8 documentation and synthesize it into Racket wasn&rsquo;t too bad, after all. Oh, the joys of what is essentially a glorified set of print statements. I&rsquo;m very happy with how rack8 (the pet name I&rsquo;ve been calling it) has turned out<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>.</p>
<p>In the above blog post, I left off with working opcode interpreting and somewhat-working internals. Back then, I was on a bit of a hunt for the proper graphics library, as well as how to manage taking keyboard input without hanging. It was a toss-up between <a href="https://docs.racket-lang.org/charterm/index.html">charterm</a> and <a href="https://github.com/dys-bigwig/racket-ncurses">racket-ncurses</a> &ndash; both would do what I wanted.</p>
<p>This is the devlog, of sorts, of the remainder of development, and my next steps.</p>
<h2 id="managing-display">Managing Display</h2>
<p>I initially thought the ncurses binding would be a better fit. ncurses was something I&rsquo;d briefly tried before in a toy Python project, and it didn&rsquo;t seem difficult to learn. It also explicitly stated an option for non-hanging input, which would be a must, and made the library very attractive. It&rsquo;d be impossible to try to rig together a short delay system, at least with my limited experience. So, I <code>raco pkg install</code>ed it, and was on my merry way.</p>
<p>It turned out, however, things were not as straightforward as they were advertised. (Are things ever?) First, the ncurses FFI was something like a year and a half old, and relied on <code>libncurses5</code>. I had <code>libncurses6</code>, and symlinking (not that I knew what to symlink) didn&rsquo;t seem to work. There seemed no way to get the correct library besides manually <code>make pkg</code>ing it from the AUR snapshot, so I also attempted to learn how to do that. Surprisingly, it worked, but that wasn&rsquo;t the end of the issues with the FFI.</p>
<p>It also seemed to escape from the window each time a key was pressed, and spit out some errors that I couldn&rsquo;t manage to trace. I&rsquo;m unsure if this was an issue with my implementation, though I copied directly from the given example, or from the package itself, or from the <code>ncurses5</code> I managed to MacGyver.</p>
<p>I briefly flirted with the idea of just doing things with <code>(printf)</code>s and hanging input, but I figured that wouldn&rsquo;t be very satisfying either. Seeing as the ncurses FFI, which was technically more recent than charterm, was already outdated (or perhaps just not working in its abandoned stage) wasn&rsquo;t quite acting as expected, I was hesistant to try charterm. However, I didn&rsquo;t have any better solution, so one <code>raco pkg install charterm</code> later, I braced myself for the worst.</p>
<p>After some issues with slow, character by character display, I finally had <em>some</em> output. At this point, it was just blocks of seemingly random Ms everywhere. I had two issues at this point: not getting newlines, and not drawing from memory properly</p>
<p>charterm seems to have an issue with printing newlines with its <code>(charterm-display)</code> function. Initially, this was an error on my part (all errors here are errors on my part, to be honest) &ndash; the documentation explicitly stated to&hellip;</p>
<blockquote>
<p>avoid trying to send your own control sequences or using newlines</p>
</blockquote>
<p>&hellip;but clearly this didn&rsquo;t register (Chip-8 pun not intended). I then switched to printing each line (or horizontal row) of the display onto the current charterm display, with a newline in between. I had some issues with the correct placement of the end brackets for for-loops, leading to a lot of time wasted trying to change parentheses around.</p>
<p>Two smaller tips here:</p>
<ul>
<li>one, maybe properly indent your code so parenthesis groupings are properly visible (oops)</li>
<li>and two, don&rsquo;t <code>(with-charterm)</code> every operation. I found that, when I tried this, there&rsquo;d be a visible delay in printing each line / character, as opposed to just one large operation. I&rsquo;m not entirely sure why this is either. Just wrapping the entirety of the inside of the graphics display function in the <code>(with charterm)</code> was much more efficient and effective.</li>
</ul>
<p>With regards to the DRAW opcode itself, I remember adapting much of it from <a href="https://pastebin.com/TtCM6Hh7">this pastebin</a>, which I found off a (now lost to the depths of search history) Reddit post. Before that, I had a very janky solution that was most definitely not up to the technical implementation. It was a rather pleasant surprise to see a little Connect4 counter on my screen, after much work <del>and suffering</del><sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</p>
<h2 id="keyboard-control">Keyboard Control</h2>
<p>In comparison to the display work, keyboard mappings were a lot easier to develop. While charterm doesn&rsquo;t have a completely blocking-less option, I managed to use a delay of 0.001 seconds<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup>. My test ROM used was Connect4, which ends up only using the blocking keypress opcode, if I recall correctly, but the delay should be theoretically imperceptible even if a shorter reaction is needed. (On that note, I should probably test with more ROMs. Mental note to add to the todo list.)</p>
<p>Chip-8 itself has a very unique<sup id="fnref:4"><a href="#fn:4" class="footnote-ref" role="doc-noteref">4</a></sup> 16-key mapping that I had to figure out how to model. My implementation used a hash-map<sup id="fnref:5"><a href="#fn:5" class="footnote-ref" role="doc-noteref">5</a></sup>, which I mapped to (apparently what everyone else used):</p>
<pre><code>+---+---+---+---+
| 0 | 1 | 2 | 3 |
+---------------+
| 4 | 5 | 6 | 7 |
+---------------+
| 8 | 9 | A | B |
+---------------+
| C | D | E | F |
+---+---+---+---+
</code></pre><p>charterm, helpfully (Racket is also to thank for this) returns nice keycodes, so I was able to map these very easily, and even add an extra condition for a global quit key.</p>
<h2 id="conclusion">Conclusion</h2>
<p>So is the state of my journey with Racket. I&rsquo;m probably not going to tinker with rack8 much more, though I plan on loading some more ROMs up and testing if all my opcodes are sound. I&rsquo;ll also make the repo public on GitHub at some point, if anyone is interested in perusing my very badly written Racket. When I become slightly more familiar with Racket, I might write a short guide on how to make a Chip-8 interpreter in it: the only articles I can find for writing Chip-8 emulators in anything remotely similar is &lsquo;Chicken Scheme&rsquo;. I have no idea what that is, but perhaps making a Racket guide may be useful, both for others and for my own learning. (The Feynman technique is a thing, right?)</p>
<p>In making rack8, I&rsquo;ve also managed to steer myself entirely off the track of my original plan for CPSC 110 review. The material&rsquo;s still there on edX, so I should probably take the time to do the course properly. However, I think this little side excursion has been a valuable experience, both in terms of learning Racket, and having some fun with emulators. Overall, I find when I start with a hands-on project, and the higher-level details of a concept, I learn things better. I suppose rack8 can serve as my introduction to Racket syntax (so when I start properly studying, it won&rsquo;t be as jarring) and some of its concepts.</p>
<p>My next steps, in this analogy of projects, would probably to do more theory and &lsquo;dictionary-definition&rsquo; work. I was planning on doing more algorithms (essentially just the coursework of the various CPSC courses UBC has publicly available) anyway, so I think tackling that will be my next step. Racket has been surprisingly not that painful, and rack8&rsquo;s been a charming little project to tinker with. It might be interesting, once I have more time / finish the never-ending list of things I want to program, to investigate more emulator development, but who knows what I&rsquo;ll end up doing.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>The experience of finally getting display to properly work was somewhat akin to getting the Liquid Galaxy system set up: I had no idea what I was doing, no documentation (that I could understand), and there were no clear pointers as to where I was going wrong. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>An interesting story &ndash; I was originally very confused as to why the Chip-8 was printing just blocks of 8 characters, instead of one at a time. I tried everything, including completely rewriting the DRAW opcode implementation, copy-pasting things around. In the end, the issue was that I had <code>bitwise-and</code>ed something I should have <code>bitwise-xor</code>ed. It&rsquo;s interesting how three letters can waste so much time, but I suppose this is the essence of debugging. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>Actually, now that I think about it, it might be possible to set a zero-second blocking timeout. I&rsquo;ll try this and edit the post a bit later with how it&rsquo;s gone. <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:4" role="doc-endnote">
<p>Well, unique to us, I suppose. Apparently, these were quite common &lsquo;back in the day&rsquo;, and I see a lot of 16-key keypads around, so they must be useful for something (?) <a href="#fnref:4" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:5" role="doc-endnote">
<p>As an aside, Racket hashmaps (or dictionaries, I&rsquo;m unsure of the technically correct description) and their syntax are very unique. I&rsquo;m used to the <code>[key]: [value]</code> representation, but Racket just puts a <code>.</code> in between, and surrounds keys with parentheses. Though I suppose the parentheses are very on-brand for Racket. <a href="#fnref:5" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>Git and iOS</title>
      <link>https://kewbi.sh/blog/posts/201122/</link>
      <pubDate>22 Nov 2020</pubDate>
      <author>Emilie Ma ◦ Kewbish</author>
      <guid>https://kewbi.sh/blog/posts/201122/</guid>
      <description>On crossplatform repo editing.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>I&rsquo;ve always tried to take notes as much as possible on paper, just because it was easier (and theoretically also better for me). However, with COVID and spending more time with digital resources, I&rsquo;ve tried to take more notes online. These notes have been, from the beginning, backed up somewhere. First, it was to Google Drive; later, to OneDrive, when I used OneNote. I relatively <a href="https://kewbi.sh/blog/posts/200607/">recently</a> transitioned to Markdown files, but kept them in OneDrive. On Windows, I simply left them in the OneDrive folder, and edited with Vim.</p>
<p>On Linux, however, it&rsquo;s not quite as easy. I originally started off using <a href="https://github.com/abraunegg/onedrive">another OneDrive CLI tool</a>, which served its purpose well. I ran the sync command every so often, and I had access from my phone. However, I found myself not syncing often, and having out of date copies of work on my phone, which wasn&rsquo;t ideal. There was a bit too much friction for syncing - and to be honest, I just forgot. I could, of course, make a script and shove it in the autostart folder, but that didn&rsquo;t occur to me til much later.</p>
<p>In an attempt to reap more of the benefits of version control, I then shunted all my files onto a Git repo. It served the same purpose, but with the same problem. I kept forgetting to sync to GitHub.</p>
<p>As well, with just a mostly out of date version on GitHub, I couldn&rsquo;t access the latest version of my files on my phone. I&rsquo;m trying to make it as easy as possible to have a sync from both ends, so I searched around for a solution.</p>
<p>This whole process would probably be a lot simpler on Android, but I use an iPhone. (Feel free to rant about non-free software here.) I can&rsquo;t mess with folders and edit things as easily, so here is my attempt at describing my system now.</p>
<h2 id="overcomplicated-ascii-art">Overcomplicated ASCII Art</h2>
<p>The system looks something like this:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">+---------------------+        +-------------+        +----+
|                     |        |             |        |----|
|    git + sync.sh    | +----&gt; |   |\---/|   | &lt;----+ ||  ||
|                     |        |   |     |   |        ||  ||
+---------------------+        |    \___/    |        +----+
         |---|                 |             |        | || |
       +-------+               +-------------+        +----+
</code></pre></div><p><em>Figure 1. An excuse to experiment with ASCII art.</em></p>
<p>On the Git repo, I run a <code>sync.sh</code> script on log-in, which pulls the changes and commits and pushes any local ones. Everything then goes to a private GitHub repo.</p>
<p>But the Git integration from my phone would be tricky. Sure, I could <em>view</em> from my phone with the GitHub app, but I don&rsquo;t think I can write. That&rsquo;d end up not solving the problem, so I looked for something else.</p>
<h2 id="ios-magic">iOS Magic</h2>
<p>Enter <strong>Working Copy</strong> and <strong>Pretext</strong>.</p>
<p>I&rsquo;m not entirely sure if there are other Git clients on iOS, but the one I stumbled upon first was <a href="https://workingcopyapp.com/">Working Copy</a>. It let me set up another Git identity and get into my GitHub easily. I managed to get everything done in a couple minutes - this part was very simple. (Add new repo, choose GitHub source, log in if it&rsquo;s a private repo, clone, profit (?))</p>
<p>Great, I now had my notes on the local filesystem. But where?</p>
<p>Turns out that I had to go back and redownload the Files app (I&rsquo;d uninstalled it in one of my cyclic purges), and enable access from there. Click the three little dots on the top, and switch the slider over for Working Copy.</p>
<figure>
    <img src="https://i.imgur.com/qW2jhPp.png"
         alt="Figure 2. A tricky hidden slider."/> <figcaption>
            <p><em>Figure 2. A tricky hidden slider.</em></p>
        </figcaption>
</figure>

<p>This is where you should get <a href="https://apps.apple.com/us/app/pretext/id1347707000">Pretext</a>, a simple Markdown editor<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>. It&rsquo;s plaintext, with HTML preview, and enough tweaking features. It doesn&rsquo;t have ads, though there are some other features that are unlockable with payment.</p>
<p>Inside Pretext, enter the Working Copy folder in Pretext, and select your repo of choice. From there, everything is a simple list view away. While Pretext can&rsquo;t edit anything other than Markdown, that&rsquo;s all my notes are in, so it works wonderfully. If I ever need to present, and don&rsquo;t want Markdown syntax, there&rsquo;s a nice HTML preview available in the <code>Share &gt; Preview as HTML</code> menu.</p>
<h2 id="syncing">Syncing</h2>
<p>Right, so syncing. Syncing was probably the bigger headache of the two here. For some reason, the first time round I tried getting an XFCE Autostart desktop to work, it would refuse to do anything. I assume this is due to an issue that I&rsquo;ll touch on in a few lines.</p>
<p>Under <code>Session and Startup &gt; Application Autostart</code>, I <code>+Add</code>ed a new desktop file. I&rsquo;m pretty sure it&rsquo;s important that this doesn&rsquo;t have a space in its title - that was the only thing different between my two attempts. The command I had it run was simply the bash script I wrote, which, for my later convenience, is below:</p>
<div class="highlight"><pre style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#!/bin/bash
</span><span style="color:#75715e"></span>
cd ~/EVB/
<span style="color:#66d9ef">if</span> <span style="color:#f92672">[[</span> <span style="color:#e6db74">`</span>git status --porcelain<span style="color:#e6db74">`</span> <span style="color:#f92672">]]</span>; <span style="color:#66d9ef">then</span>
    <span style="color:#66d9ef">for</span> i in <span style="color:#f92672">{</span>1..50<span style="color:#f92672">}</span>; <span style="color:#66d9ef">do</span> ping -c1 www.google.com &amp;&gt; /dev/null <span style="color:#f92672">&amp;&amp;</span> break; <span style="color:#66d9ef">done</span>
    NOW<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span> date <span style="color:#e6db74">&#39;+%F-%H%M&#39;</span> <span style="color:#66d9ef">)</span>
    git add .
    git commit --author<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;Emilie Ma &lt;notarealemail@kewbi.sh&gt;&#34;</span> -m <span style="color:#e6db74">&#34;Sync: </span>$NOW<span style="color:#e6db74">&#34;</span>
    git pull
    git push
    echo <span style="color:#e6db74">&#34;Successful!&#34;</span>
<span style="color:#66d9ef">else</span>
    echo <span style="color:#e6db74">&#34;No changes!&#34;</span>
<span style="color:#66d9ef">fi</span>
</code></pre></div><p>Probably change the directory to the one you&rsquo;re using for your Git. Also, probably change the author, unless you&rsquo;ve decided to impersonate me or are also named Emilie Ma.</p>
<p>And there we go - on login (since I do this at the beginning of the day, and I often only edit anything on my phone the afternoon before or at night), all changes will be pulled (and theoretically won&rsquo;t conflict - I&rsquo;m the only one using this, and I don&rsquo;t tend to edit the same note at different times). The changes locally get pushed, and everything is fine and dandy!</p>
<h2 id="conclusion">Conclusion</h2>
<p>Is this incredibly overengineered? Actually, not really. This is the simplest way I&rsquo;ve found to do it, other than to just fire up my laptop every time I want to reference something, which I&rsquo;d rather not do. I&rsquo;m still not entirely sure how Working Copy even works, especially with the sandboxing things that are supposed to happen behind the scenes, but I won&rsquo;t question it too much. It&rsquo;s a nice system, and it works well enough.</p>
<p>This post is mostly for self reference later, but if I&rsquo;ve somehow managed to help, that&rsquo;s cool too.</p>
<h2 id="currently">Currently</h2>
<p>It&rsquo;s been a while since I appended one of these, so apologies if the conclusion was a bit abrupt. I&rsquo;ve been working a decent bit more on my Racket x Chip-8 emulator attempt, and it hasn&rsquo;t been very successful. I chalk this up to the fact I don&rsquo;t know how to use the GUI / something&rsquo;s wrong with the display code - the rest of it worked fine (theoretically) without it.</p>
<p>I have, however, managed to at least get some sort of display working with <a href="https://docs.racket-lang.org/charterm/index.html">charterm</a>, but I need to fix a pesky issue. The width for the display should be 64 pixels, and I can print much more to the terminal, but I need to find a way to linebreak. The display refuses to take newline characters, so that&rsquo;s a bit of a challenge. I&rsquo;m sure I&rsquo;ll manage to work out some janky solution, anyhow.</p>
<p>I&rsquo;ve also found some other amazing Racket games and Chip-8 implementations, so hopefully I can leech a bit off of their approaches. If all goes well, I&rsquo;ll write about my progress next week. If not, I have some other ideas. Well, back to writing lab<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>Having attempted to work with Notes before, I didn&rsquo;t want to bother with trying to select and bold text with the WYSIWYG panes again. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>And on another, slightly more quantitative note, I managed to hit 50k words on this blog! Five weeks ahead of schedule, so that&rsquo;s something. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
    <item>
      <title>Racket and Chip-8</title>
      <link>https://kewbi.sh/blog/posts/201115/</link>
      <pubDate>15 Nov 2020</pubDate>
      <author>Emilie Ma ◦ Kewbish</author>
      <guid>https://kewbi.sh/blog/posts/201115/</guid>
      <description>On contemplating opcodes.</description>
      <content:encoded><![CDATA[<h2 id="introduction">Introduction</h2>
<p>If all goes well, I will hopefully be attending the University of British Columbia this coming September - probably for computer science. As a first year, I&rsquo;m going to end up taking <a href="https://sites.google.com/site/ubccpsc110/">CPSC 110</a>. Unfortunately, CPSC 110 happens to be firmly entrenched in the language of Racket. Because I&rsquo;m also plan on challenging (credit by exam, they call it apparently) the course, and was thinking of getting some preliminary practise with Racket. It also seems like an interesting language overall, and I was a bit bored after adding an <a href="https://diveintoht.ml">editor to diveintoht.ml</a>. So, I decided to try something in Racket.</p>
<p>That something is currently the skeleton of a <a href="https://en.wikipedia.org/wiki/CHIP-8">Chip-8 emulator</a>. Chip-8 was apparently historically used on the COSMAC VIP and run on the Chip-8 virtual machine, a sentence which I am not entirely sure I understand myself. I&rsquo;ve had about zero experience with trying to emulate or do anything lower level than <a href="https://kewbi.sh/blog/posts/200712/">CS50&rsquo;s C sections</a>. So, I thought this would be a fun challenge.</p>
<p>Was trying to juggle learning a new programming language, the syntax of which was completely unlike anything I&rsquo;d worked with before, and wrapping my brain around hexadecimal and opcoes at the same time a good idea? Probably not, but I&rsquo;ve managed to do a decent chunk of work, and I thought I&rsquo;d write about it today.</p>
<h2 id="printf-so-racket">(printf &ldquo;So, Racket.&quot;)</h2>
<p>After blundering through some install instructions, I had Racket. And just because I decided to, I didn&rsquo;t install DrRacket either. I originally had the contents of above printf as &lsquo;Hello World&rsquo;. I don&rsquo;t think I&rsquo;ve ever done a proper Hello World program<sup id="fnref:1"><a href="#fn:1" class="footnote-ref" role="doc-noteref">1</a></sup>, and hey, there was no time like the present. So began my stumbling into Racket.</p>
<p>The Racket language docs are rather complicated for a complete beginner, which I was. I also had the misfortune of only finding <a href="https://cs.uwaterloo.ca/~plragde/flaneries/TYR/">Teach Yourself Racket</a> and <a href="https://docs.racket-lang.org/guide/">The Racket Guide</a> just after muddling my way through too many Stack Overflow pages.</p>
<p>Racket is apparently &lsquo;functional programming&rsquo; (oh look - a buzzword!), so that was another challenge I had to deal with. Most lines are something like <code>([function] a b)</code>. This is extremely different from what I&rsquo;ve worked with before. This means it took me a solid couple minutes while trying my first Pythagorean&rsquo;s project to even realize that I was unconsciously doing <code>(a + b)</code>. The proper <code>(+ a b)</code>. The constant parenthesis matching is something that <a href="https://github.com/neoclide/coc-pairs">coc-pairs</a> really helped with, so I&rsquo;m happy I didn&rsquo;t have to deal with constantly reaching around. Also, something else that was interesting - no semicolons! The whole wrapping expressions and definitions concept wasn&rsquo;t too bad either.</p>
<p>Another unique issue I encountered while trying to grasp the basics was the fact that Racket is a subset of Scheme, which is itself a dialect of Lisp. Racket seems to be a very niche language that seems to only have resources from university course websites. It&rsquo;s therefore sometimes difficult to find the answer to a question. I have to first look for something like &lsquo;print variable in racket&rsquo; (very basic, I know). Then, when that doesn&rsquo;t come up with many results that aren&rsquo;t just the Racket docs (which at that point weren&rsquo;t very comprehensible). I then have to google for Scheme, which seems a little more widely used, so that&rsquo;s something to keep in mind.</p>
<p>I find that having such a unique syntax with the functions and parentheses completely different from something like Python was probably helpful. I didn&rsquo;t end up confusing functions with each other - as I did when doing CS50 with C and constantly forgetting that the print function was actually printf - and that I actually needed semicolons (or when I switched back to Python and found myself accidentally writing C). I&rsquo;m still very much a beginner, and I have very far to go, but Racket is certainly a lot less painful than it was the first few days.</p>
<h2 id="hexadecimal-hindrances">Hexadecimal Hindrances</h2>
<p>I think in decimal, and I can attempt to convert with bytes, but oh boy, dealing with hex and trying to manipulate the data read in for each opcode was a pain.</p>
<p>Part of the problem was simply that I didn&rsquo;t have much (or any, really) experience with hexadecimal or assembly. Most of this was also down to the fact that I forgot that I had to divide by hexadecimal 100 to get the correct digit I wanted, or that I needed to check if the variable was equal to a hex equivalent, instead of a decimal number.</p>
<p>The most challenging part of understanding Chip-8 so far, I find, was definitely masking. All the binary operations that go into decoding just one opcode are rather tricky. It also didn&rsquo;t entirely help that I was unfamiliar with what the Racket syntax was when looking at example emulators. This ended up causing documentation tangents every time I found a new function. Just yesterday, I figured out a problem I&rsquo;d been having for two days where apparently I was reading bytes from out of bounds. The issue? I had masked the value properly and gotten the correct digit, but it was stored in the hundredths place of the entire hex number. That meant that I was reading at the position 768 (or #x300 in hex) instead of at the correct register, 3. This was because I&rsquo;d ignored an implementation&rsquo;s division by #x100 (256 in decimal) and misguidedly tried to use the value itself.</p>
<p>Speaking of registers, I also had to properly learn how to access things from places in memory in a way that I didn&rsquo;t have to do with lists in Python. Well, for one, I didn&rsquo;t make giant byte strings with entire ROMs in Python, but I&rsquo;d have slightly more of a clue what to do in Python as opposed to Racket. Oh well.</p>
<p>In the end, with the help of several resources that I&rsquo;ll acknowledge a bit later so they&rsquo;re all in once place, I managed to figure out what the example was doing. I somehow also figured out why it was doing it<sup id="fnref:2"><a href="#fn:2" class="footnote-ref" role="doc-noteref">2</a></sup>, and how I could do so in my own program. It got to the point where my parents were questioning why I was trying to divide seemingly random numbers by 16 on pieces of scrap paper while I was taking a break, but hey, I figured it out.</p>
<h2 id="conclusion">Conclusion</h2>
<p>At the moment, I&rsquo;m feeling a bit more acquainted with Racket. Nowhere near the point that I&rsquo;d have needed to challenge CPSC 110, but somewhere, at least. Interestingly enough, I apparently went in the opposite direction that 110 would have gone. While 110&rsquo;s past papers reveal a lot of data structures, I instead focused on some lower level applications. A mental note to review data structures later when I finish this emulator.</p>
<p>I should also point out that most of my emulator has been based, or at least somewhat referenced from <a href="https://github.com/Bourg/chip8">Austin Bourgerie&rsquo;s emulator</a>. It seemed to be the only emulator in Racket I was able to find that wasn&rsquo;t too incomplete. [edit: also found <a href="https://github.com/theo-lw/chip8">theo-lw&rsquo;s</a> recently. Was helpful.] It pointed me in the right direction in several tricky places. My approaches for getting specific bytes and positions for specific opcodes and the general program was heavily inspired by it. I&rsquo;d also like to recommend <a href="http://devernay.free.fr/hacks/chip8/C8TECH10.HTM">Thomas Greene&rsquo;s, aka Cowgod&rsquo;s, reference on Chip-8</a>. Clear and concise, and was helpful when I encountered new concepts.</p>
<p>I&rsquo;m nowhere near done with my emulator. As of writing this, I have the reading of the ROM and the beginnings of the opcode processing for codes starting with characters 0 through 7. I hope to finish the opcodes sometime this week and see where I can get myself with graphics and input. From preliminary research, graphics doesn&rsquo;t seem too bad - I can probably just do those in terminal with half blocks ASCII characters for each row. Input, though, looks a bit tricky. Apparently, Chip-8 itself has a bunch of inconsistencies with how implementations handle input. Besides, I&rsquo;m not entirely sure how to tackle input in the terminal without messing up display at the same time.<sup id="fnref:3"><a href="#fn:3" class="footnote-ref" role="doc-noteref">3</a></sup></p>
<p>It&rsquo;s been a fun detour from web and tinkering with NPM though, and while I&rsquo;ve been trying to learn the basics of Racket and Chip-8, I&rsquo;m also learning a lot.</p>
<section class="footnotes" role="doc-endnotes">
<hr>
<ol>
<li id="fn:1" role="doc-endnote">
<p>At this point, I feel like Hello World programs are kind of the baseline of programming one needs to know. Similar to the &lsquo;vast knowledge of web design&rsquo; lines people slap on their resume, maybe Hello Worlds are also part of that extremely limited but perhaps resume-able set of things people first learn to program. <a href="#fnref:1" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:2" role="doc-endnote">
<p>Instead of just copy-pasting code, which would have been the easiest way to get a working emulator up, but also the most useless. <a href="#fnref:2" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
<li id="fn:3" role="doc-endnote">
<p>Though I <em>was</em> looking at Curses for Python, and that seems relatively painless. Doesn&rsquo;t seem to be a proper Curses library for Racket that I&rsquo;ve found ye. However, I&rsquo;m also entirely unsure how package management in Racket even works. A problem for later. [edit: I found <a href="https://github.com/dys-bigwig/racket-ncurses">racket-ncurses</a>, which looks like it should work!] <a href="#fnref:3" class="footnote-backref" role="doc-backlink">&#x21a9;&#xfe0e;</a></p>
</li>
</ol>
</section>
]]></content:encoded>
    </item>
    
  </channel>
</rss>
